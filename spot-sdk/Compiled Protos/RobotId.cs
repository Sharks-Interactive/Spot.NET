// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/robot_id.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/robot_id.proto</summary>
  public static partial class RobotIdReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/robot_id.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotIdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQcm90b3Mvcm9ib3RfaWQucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rvcy9o",
            "ZWFkZXIucHJvdG8aFlByb3Rvcy9wYXJhbWV0ZXIucHJvdG8aH2dvb2dsZS9w",
            "cm90b2J1Zi90aW1lc3RhbXAucHJvdG8isAEKB1JvYm90SWQSFQoNc2VyaWFs",
            "X251bWJlchgBIAEoCRIPCgdzcGVjaWVzGAIgASgJEg8KB3ZlcnNpb24YAyAB",
            "KAkSOgoQc29mdHdhcmVfcmVsZWFzZRgEIAEoCzIgLmJvc2R5bi5hcGkuUm9i",
            "b3RTb2Z0d2FyZVJlbGVhc2USEAoIbmlja25hbWUYBSABKAkSHgoWY29tcHV0",
            "ZXJfc2VyaWFsX251bWJlchgGIAEoCSJUCg9Tb2Z0d2FyZVZlcnNpb24SFQoN",
            "bWFqb3JfdmVyc2lvbhgBIAEoBRIVCg1taW5vcl92ZXJzaW9uGAIgASgFEhMK",
            "C3BhdGNoX2xldmVsGAMgASgFIrQCChRSb2JvdFNvZnR3YXJlUmVsZWFzZRIs",
            "Cgd2ZXJzaW9uGAEgASgLMhsuYm9zZHluLmFwaS5Tb2Z0d2FyZVZlcnNpb24S",
            "DAoEbmFtZRgCIAEoCRIMCgR0eXBlGAMgASgJEjIKDmNoYW5nZXNldF9kYXRl",
            "GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIRCgljaGFuZ2Vz",
            "ZXQYBSABKAkSEwoLYXBpX3ZlcnNpb24YBiABKAkSGQoRYnVpbGRfaW5mb3Jt",
            "YXRpb24YByABKAkSMAoMaW5zdGFsbF9kYXRlGAggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIpCgpwYXJhbWV0ZXJzGAkgAygLMhUuYm9zZHlu",
            "LmFwaS5QYXJhbWV0ZXIiOwoOUm9ib3RJZFJlcXVlc3QSKQoGaGVhZGVyGAEg",
            "ASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyImQKD1JvYm90SWRSZXNw",
            "b25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVh",
            "ZGVyEiUKCHJvYm90X2lkGAIgASgLMhMuYm9zZHluLmFwaS5Sb2JvdElkQhpC",
            "DFJvYm90SWRQcm90b1oKYm9zZHluL2FwaWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.ParameterReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotId), global::Bosdyn.Api.RobotId.Parser, new[]{ "SerialNumber", "Species", "Version", "SoftwareRelease", "Nickname", "ComputerSerialNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SoftwareVersion), global::Bosdyn.Api.SoftwareVersion.Parser, new[]{ "MajorVersion", "MinorVersion", "PatchLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotSoftwareRelease), global::Bosdyn.Api.RobotSoftwareRelease.Parser, new[]{ "Version", "Name", "Type", "ChangesetDate", "Changeset", "ApiVersion", "BuildInformation", "InstallDate", "Parameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotIdRequest), global::Bosdyn.Api.RobotIdRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotIdResponse), global::Bosdyn.Api.RobotIdResponse.Parser, new[]{ "Header", "RobotId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Robot identity information, which should be static while robot is powered-on.
  /// </summary>
  public sealed partial class RobotId : pb::IMessage<RobotId> {
    private static readonly pb::MessageParser<RobotId> _parser = new pb::MessageParser<RobotId>(() => new RobotId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotIdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotId(RobotId other) : this() {
      serialNumber_ = other.serialNumber_;
      species_ = other.species_;
      version_ = other.version_;
      softwareRelease_ = other.softwareRelease_ != null ? other.softwareRelease_.Clone() : null;
      nickname_ = other.nickname_;
      computerSerialNumber_ = other.computerSerialNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotId Clone() {
      return new RobotId(this);
    }

    /// <summary>Field number for the "serial_number" field.</summary>
    public const int SerialNumberFieldNumber = 1;
    private string serialNumber_ = "";
    /// <summary>
    /// A unique string identifier for the particular robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "species" field.</summary>
    public const int SpeciesFieldNumber = 2;
    private string species_ = "";
    /// <summary>
    /// Type of robot.  E.g., 'spot'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Species {
      get { return species_; }
      set {
        species_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// Robot version/platform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "software_release" field.</summary>
    public const int SoftwareReleaseFieldNumber = 4;
    private global::Bosdyn.Api.RobotSoftwareRelease softwareRelease_;
    /// <summary>
    /// Version information about software running on the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotSoftwareRelease SoftwareRelease {
      get { return softwareRelease_; }
      set {
        softwareRelease_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 5;
    private string nickname_ = "";
    /// <summary>
    /// Optional, customer-supplied nickname.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "computer_serial_number" field.</summary>
    public const int ComputerSerialNumberFieldNumber = 6;
    private string computerSerialNumber_ = "";
    /// <summary>
    /// Computer Serial Number. Unlike serial_number, which identifies a complete robot,
    /// the computer_serial_number identifies the computer hardware used in the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComputerSerialNumber {
      get { return computerSerialNumber_; }
      set {
        computerSerialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialNumber != other.SerialNumber) return false;
      if (Species != other.Species) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(SoftwareRelease, other.SoftwareRelease)) return false;
      if (Nickname != other.Nickname) return false;
      if (ComputerSerialNumber != other.ComputerSerialNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
      if (Species.Length != 0) hash ^= Species.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (softwareRelease_ != null) hash ^= SoftwareRelease.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (ComputerSerialNumber.Length != 0) hash ^= ComputerSerialNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SerialNumber);
      }
      if (Species.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Species);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (softwareRelease_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SoftwareRelease);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Nickname);
      }
      if (ComputerSerialNumber.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ComputerSerialNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
      }
      if (Species.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Species);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (softwareRelease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SoftwareRelease);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (ComputerSerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComputerSerialNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotId other) {
      if (other == null) {
        return;
      }
      if (other.SerialNumber.Length != 0) {
        SerialNumber = other.SerialNumber;
      }
      if (other.Species.Length != 0) {
        Species = other.Species;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.softwareRelease_ != null) {
        if (softwareRelease_ == null) {
          SoftwareRelease = new global::Bosdyn.Api.RobotSoftwareRelease();
        }
        SoftwareRelease.MergeFrom(other.SoftwareRelease);
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.ComputerSerialNumber.Length != 0) {
        ComputerSerialNumber = other.ComputerSerialNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SerialNumber = input.ReadString();
            break;
          }
          case 18: {
            Species = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            if (softwareRelease_ == null) {
              SoftwareRelease = new global::Bosdyn.Api.RobotSoftwareRelease();
            }
            input.ReadMessage(SoftwareRelease);
            break;
          }
          case 42: {
            Nickname = input.ReadString();
            break;
          }
          case 50: {
            ComputerSerialNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The software versioning number for a release.
  /// </summary>
  public sealed partial class SoftwareVersion : pb::IMessage<SoftwareVersion> {
    private static readonly pb::MessageParser<SoftwareVersion> _parser = new pb::MessageParser<SoftwareVersion>(() => new SoftwareVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftwareVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotIdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareVersion(SoftwareVersion other) : this() {
      majorVersion_ = other.majorVersion_;
      minorVersion_ = other.minorVersion_;
      patchLevel_ = other.patchLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareVersion Clone() {
      return new SoftwareVersion(this);
    }

    /// <summary>Field number for the "major_version" field.</summary>
    public const int MajorVersionFieldNumber = 1;
    private int majorVersion_;
    /// <summary>
    /// Signficant changes to software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MajorVersion {
      get { return majorVersion_; }
      set {
        majorVersion_ = value;
      }
    }

    /// <summary>Field number for the "minor_version" field.</summary>
    public const int MinorVersionFieldNumber = 2;
    private int minorVersion_;
    /// <summary>
    /// Normal changes to software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinorVersion {
      get { return minorVersion_; }
      set {
        minorVersion_ = value;
      }
    }

    /// <summary>Field number for the "patch_level" field.</summary>
    public const int PatchLevelFieldNumber = 3;
    private int patchLevel_;
    /// <summary>
    /// Fixes which should not change intended capabilities or affect compatibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PatchLevel {
      get { return patchLevel_; }
      set {
        patchLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftwareVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftwareVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MajorVersion != other.MajorVersion) return false;
      if (MinorVersion != other.MinorVersion) return false;
      if (PatchLevel != other.PatchLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
      if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
      if (PatchLevel != 0) hash ^= PatchLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MajorVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MajorVersion);
      }
      if (MinorVersion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinorVersion);
      }
      if (PatchLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PatchLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MajorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MajorVersion);
      }
      if (MinorVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinorVersion);
      }
      if (PatchLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PatchLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftwareVersion other) {
      if (other == null) {
        return;
      }
      if (other.MajorVersion != 0) {
        MajorVersion = other.MajorVersion;
      }
      if (other.MinorVersion != 0) {
        MinorVersion = other.MinorVersion;
      }
      if (other.PatchLevel != 0) {
        PatchLevel = other.PatchLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MajorVersion = input.ReadInt32();
            break;
          }
          case 16: {
            MinorVersion = input.ReadInt32();
            break;
          }
          case 24: {
            PatchLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of the software release currently running on the robot.
  /// </summary>
  public sealed partial class RobotSoftwareRelease : pb::IMessage<RobotSoftwareRelease> {
    private static readonly pb::MessageParser<RobotSoftwareRelease> _parser = new pb::MessageParser<RobotSoftwareRelease>(() => new RobotSoftwareRelease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotSoftwareRelease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotIdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSoftwareRelease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSoftwareRelease(RobotSoftwareRelease other) : this() {
      version_ = other.version_ != null ? other.version_.Clone() : null;
      name_ = other.name_;
      type_ = other.type_;
      changesetDate_ = other.changesetDate_ != null ? other.changesetDate_.Clone() : null;
      changeset_ = other.changeset_;
      apiVersion_ = other.apiVersion_;
      buildInformation_ = other.buildInformation_;
      installDate_ = other.installDate_ != null ? other.installDate_.Clone() : null;
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotSoftwareRelease Clone() {
      return new RobotSoftwareRelease(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private global::Bosdyn.Api.SoftwareVersion version_;
    /// <summary>
    /// The software version, e.g., 2.0.1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SoftwareVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of the robot, e.g., '20190601'
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// Kind of software release.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "changeset_date" field.</summary>
    public const int ChangesetDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp changesetDate_;
    /// <summary>
    /// Timestamp of the changeset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ChangesetDate {
      get { return changesetDate_; }
      set {
        changesetDate_ = value;
      }
    }

    /// <summary>Field number for the "changeset" field.</summary>
    public const int ChangesetFieldNumber = 5;
    private string changeset_ = "";
    /// <summary>
    /// Changeset hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Changeset {
      get { return changeset_; }
      set {
        changeset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "api_version" field.</summary>
    public const int ApiVersionFieldNumber = 6;
    private string apiVersion_ = "";
    /// <summary>
    /// API version.  E.g., 2.14.5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiVersion {
      get { return apiVersion_; }
      set {
        apiVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build_information" field.</summary>
    public const int BuildInformationFieldNumber = 7;
    private string buildInformation_ = "";
    /// <summary>
    /// Extra information associated with the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildInformation {
      get { return buildInformation_; }
      set {
        buildInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "install_date" field.</summary>
    public const int InstallDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp installDate_;
    /// <summary>
    /// Date/time when release was installed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp InstallDate {
      get { return installDate_; }
      set {
        installDate_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(74, global::Bosdyn.Api.Parameter.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Parameter> parameters_ = new pbc::RepeatedField<global::Bosdyn.Api.Parameter>();
    /// <summary>
    /// Other information about the build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Parameter> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotSoftwareRelease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotSoftwareRelease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Version, other.Version)) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(ChangesetDate, other.ChangesetDate)) return false;
      if (Changeset != other.Changeset) return false;
      if (ApiVersion != other.ApiVersion) return false;
      if (BuildInformation != other.BuildInformation) return false;
      if (!object.Equals(InstallDate, other.InstallDate)) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (version_ != null) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (changesetDate_ != null) hash ^= ChangesetDate.GetHashCode();
      if (Changeset.Length != 0) hash ^= Changeset.GetHashCode();
      if (ApiVersion.Length != 0) hash ^= ApiVersion.GetHashCode();
      if (BuildInformation.Length != 0) hash ^= BuildInformation.GetHashCode();
      if (installDate_ != null) hash ^= InstallDate.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (changesetDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChangesetDate);
      }
      if (Changeset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Changeset);
      }
      if (ApiVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ApiVersion);
      }
      if (BuildInformation.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BuildInformation);
      }
      if (installDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(InstallDate);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (changesetDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangesetDate);
      }
      if (Changeset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Changeset);
      }
      if (ApiVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiVersion);
      }
      if (BuildInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildInformation);
      }
      if (installDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstallDate);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotSoftwareRelease other) {
      if (other == null) {
        return;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Bosdyn.Api.SoftwareVersion();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.changesetDate_ != null) {
        if (changesetDate_ == null) {
          ChangesetDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ChangesetDate.MergeFrom(other.ChangesetDate);
      }
      if (other.Changeset.Length != 0) {
        Changeset = other.Changeset;
      }
      if (other.ApiVersion.Length != 0) {
        ApiVersion = other.ApiVersion;
      }
      if (other.BuildInformation.Length != 0) {
        BuildInformation = other.BuildInformation;
      }
      if (other.installDate_ != null) {
        if (installDate_ == null) {
          InstallDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        InstallDate.MergeFrom(other.InstallDate);
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (version_ == null) {
              Version = new global::Bosdyn.Api.SoftwareVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            if (changesetDate_ == null) {
              ChangesetDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ChangesetDate);
            break;
          }
          case 42: {
            Changeset = input.ReadString();
            break;
          }
          case 50: {
            ApiVersion = input.ReadString();
            break;
          }
          case 58: {
            BuildInformation = input.ReadString();
            break;
          }
          case 66: {
            if (installDate_ == null) {
              InstallDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(InstallDate);
            break;
          }
          case 74: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotId request message sent to a robot to learn it's basic identification information.
  /// </summary>
  public sealed partial class RobotIdRequest : pb::IMessage<RobotIdRequest> {
    private static readonly pb::MessageParser<RobotIdRequest> _parser = new pb::MessageParser<RobotIdRequest>(() => new RobotIdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotIdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdRequest(RobotIdRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdRequest Clone() {
      return new RobotIdRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotId response message, including the ID information for a robot.
  /// </summary>
  public sealed partial class RobotIdResponse : pb::IMessage<RobotIdResponse> {
    private static readonly pb::MessageParser<RobotIdResponse> _parser = new pb::MessageParser<RobotIdResponse>(() => new RobotIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotIdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdResponse(RobotIdResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      robotId_ = other.robotId_ != null ? other.robotId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotIdResponse Clone() {
      return new RobotIdResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 2;
    private global::Bosdyn.Api.RobotId robotId_;
    /// <summary>
    /// The requested RobotId information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotId RobotId {
      get { return robotId_; }
      set {
        robotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(RobotId, other.RobotId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (robotId_ != null) hash ^= RobotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (robotId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RobotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (robotId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.robotId_ != null) {
        if (robotId_ == null) {
          RobotId = new global::Bosdyn.Api.RobotId();
        }
        RobotId.MergeFrom(other.RobotId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (robotId_ == null) {
              RobotId = new global::Bosdyn.Api.RobotId();
            }
            input.ReadMessage(RobotId);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
