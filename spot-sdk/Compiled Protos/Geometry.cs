// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/geometry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/geometry.proto</summary>
  public static partial class GeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQcm90b3MvZ2VvbWV0cnkucHJvdG8SCmJvc2R5bi5hcGkaHmdvb2dsZS9w",
            "cm90b2J1Zi93cmFwcGVycy5wcm90byIcCgRWZWMyEgkKAXgYASABKAESCQoB",
            "eRgCIAEoASInCgRWZWMzEgkKAXgYASABKAESCQoBeRgCIAEoARIJCgF6GAMg",
            "ASgBIjwKFUN5bGluZHJpY2FsQ29vcmRpbmF0ZRIJCgFyGAEgASgBEg0KBXRo",
            "ZXRhGAIgASgBEgkKAXoYAyABKAEiOAoKUXVhdGVybmlvbhIJCgF4GAEgASgB",
            "EgkKAXkYAiABKAESCQoBehgDIAEoARIJCgF3GAQgASgBIkoKBVBsYW5lEh8K",
            "BXBvaW50GAEgASgLMhAuYm9zZHluLmFwaS5WZWMzEiAKBm5vcm1hbBgCIAEo",
            "CzIQLmJvc2R5bi5hcGkuVmVjMyI3CgRRdWFkEiEKBHBvc2UYASABKAsyEy5i",
            "b3NkeW4uYXBpLlNFM1Bvc2USDAoEc2l6ZRgCIAEoASJMCgNSYXkSIAoGb3Jp",
            "Z2luGAEgASgLMhAuYm9zZHluLmFwaS5WZWMzEiMKCWRpcmVjdGlvbhgCIAEo",
            "CzIQLmJvc2R5bi5hcGkuVmVjMyI8CgdTRTJQb3NlEiIKCHBvc2l0aW9uGAEg",
            "ASgLMhAuYm9zZHluLmFwaS5WZWMyEg0KBWFuZ2xlGAIgASgBIkAKC1NFMlZl",
            "bG9jaXR5EiAKBmxpbmVhchgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjMhIPCgdh",
            "bmd1bGFyGAIgASgBImYKEFNFMlZlbG9jaXR5TGltaXQSKAoHbWF4X3ZlbBgB",
            "IAEoCzIXLmJvc2R5bi5hcGkuU0UyVmVsb2NpdHkSKAoHbWluX3ZlbBgCIAEo",
            "CzIXLmJvc2R5bi5hcGkuU0UyVmVsb2NpdHkiVwoHU0UzUG9zZRIiCghwb3Np",
            "dGlvbhgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjMxIoCghyb3RhdGlvbhgCIAEo",
            "CzIWLmJvc2R5bi5hcGkuUXVhdGVybmlvbiJSCgtTRTNWZWxvY2l0eRIgCgZs",
            "aW5lYXIYASABKAsyEC5ib3NkeW4uYXBpLlZlYzMSIQoHYW5ndWxhchgCIAEo",
            "CzIQLmJvc2R5bi5hcGkuVmVjMyJLCgZXcmVuY2gSHwoFZm9yY2UYASABKAsy",
            "EC5ib3NkeW4uYXBpLlZlYzMSIAoGdG9ycXVlGAIgASgLMhAuYm9zZHluLmFw",
            "aS5WZWMzIq8CChFGcmFtZVRyZWVTbmFwc2hvdBJZChhjaGlsZF90b19wYXJl",
            "bnRfZWRnZV9tYXAYASADKAsyNy5ib3NkeW4uYXBpLkZyYW1lVHJlZVNuYXBz",
            "aG90LkNoaWxkVG9QYXJlbnRFZGdlTWFwRW50cnkaWAoKUGFyZW50RWRnZRIZ",
            "ChFwYXJlbnRfZnJhbWVfbmFtZRgBIAEoCRIvChJwYXJlbnRfdGZvcm1fY2hp",
            "bGQYAiABKAsyEy5ib3NkeW4uYXBpLlNFM1Bvc2UaZQoZQ2hpbGRUb1BhcmVu",
            "dEVkZ2VNYXBFbnRyeRILCgNrZXkYASABKAkSNwoFdmFsdWUYAiABKAsyKC5i",
            "b3NkeW4uYXBpLkZyYW1lVHJlZVNuYXBzaG90LlBhcmVudEVkZ2U6AjgBIiYK",
            "BEJveDISHgoEc2l6ZRgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjMiJ1Cg1Cb3gy",
            "V2l0aEZyYW1lEh0KA2JveBgBIAEoCzIQLmJvc2R5bi5hcGkuQm94MhISCgpm",
            "cmFtZV9uYW1lGAIgASgJEjEKFGZyYW1lX25hbWVfdGZvcm1fYm94GAMgASgL",
            "MhMuYm9zZHluLmFwaS5TRTNQb3NlIiYKBEJveDMSHgoEc2l6ZRgBIAEoCzIQ",
            "LmJvc2R5bi5hcGkuVmVjMyJ1Cg1Cb3gzV2l0aEZyYW1lEh0KA2JveBgBIAEo",
            "CzIQLmJvc2R5bi5hcGkuQm94MxISCgpmcmFtZV9uYW1lGAIgASgJEjEKFGZy",
            "YW1lX25hbWVfdGZvcm1fYm94GAMgASgLMhMuYm9zZHluLmFwaS5TRTNQb3Nl",
            "IjQKBk1hdHJpeBIMCgRyb3dzGAEgASgFEgwKBGNvbHMYAiABKAUSDgoGdmFs",
            "dWVzGAMgAygBIoECCg1TRTNDb3ZhcmlhbmNlEiIKBm1hdHJpeBgBIAEoCzIS",
            "LmJvc2R5bi5hcGkuTWF0cml4EhgKDHlhd192YXJpYW5jZRgCIAEoAUICGAES",
            "EgoGY292X3h4GAMgASgBQgIYARISCgZjb3ZfeHkYBCABKAFCAhgBEhIKBmNv",
            "dl94ehgFIAEoAUICGAESEgoGY292X3l4GAYgASgBQgIYARISCgZjb3ZfeXkY",
            "ByABKAFCAhgBEhIKBmNvdl95ehgIIAEoAUICGAESEgoGY292X3p4GAkgASgB",
            "QgIYARISCgZjb3ZfenkYCiABKAFCAhgBEhIKBmNvdl96ehgLIAEoAUICGAEi",
            "LAoIUG9seUxpbmUSIAoGcG9pbnRzGAEgAygLMhAuYm9zZHluLmFwaS5WZWMy",
            "Ii0KB1BvbHlnb24SIgoIdmVydGV4ZXMYASADKAsyEC5ib3NkeW4uYXBpLlZl",
            "YzIiaAoVUG9seWdvbldpdGhFeGNsdXNpb25zEiYKCWluY2x1c2lvbhgFIAEo",
            "CzITLmJvc2R5bi5hcGkuUG9seWdvbhInCgpleGNsdXNpb25zGAYgAygLMhMu",
            "Ym9zZHluLmFwaS5Qb2x5Z29uIj0KBkNpcmNsZRIjCgljZW50ZXJfcHQYASAB",
            "KAsyEC5ib3NkeW4uYXBpLlZlYzISDgoGcmFkaXVzGAIgASgBImAKBEFyZWES",
            "JgoHcG9seWdvbhgBIAEoCzITLmJvc2R5bi5hcGkuUG9seWdvbkgAEiQKBmNp",
            "cmNsZRgCIAEoCzISLmJvc2R5bi5hcGkuQ2lyY2xlSABCCgoIZ2VvbWV0cnki",
            "NQoGVm9sdW1lEh8KA2JveBgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjM0gAQgoK",
            "CGdlb21ldHJ5IiYKBkJvdW5kcxINCgVsb3dlchgBIAEoARINCgV1cHBlchgC",
            "IAEoASJdCglWZWMyVmFsdWUSJwoBeBgBIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRInCgF5GAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlIoYBCglWZWMzVmFsdWUSJwoBeBgBIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5Eb3VibGVWYWx1ZRInCgF5GAIgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEicKAXoYAyABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWVCG0INR2VvbWV0cnlQcm90b1oKYm9zZHluL2FwaWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Vec2), global::Bosdyn.Api.Vec2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Vec3), global::Bosdyn.Api.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CylindricalCoordinate), global::Bosdyn.Api.CylindricalCoordinate.Parser, new[]{ "R", "Theta", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Quaternion), global::Bosdyn.Api.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Plane), global::Bosdyn.Api.Plane.Parser, new[]{ "Point", "Normal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Quad), global::Bosdyn.Api.Quad.Parser, new[]{ "Pose", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Ray), global::Bosdyn.Api.Ray.Parser, new[]{ "Origin", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE2Pose), global::Bosdyn.Api.SE2Pose.Parser, new[]{ "Position", "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE2Velocity), global::Bosdyn.Api.SE2Velocity.Parser, new[]{ "Linear", "Angular" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE2VelocityLimit), global::Bosdyn.Api.SE2VelocityLimit.Parser, new[]{ "MaxVel", "MinVel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE3Pose), global::Bosdyn.Api.SE3Pose.Parser, new[]{ "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE3Velocity), global::Bosdyn.Api.SE3Velocity.Parser, new[]{ "Linear", "Angular" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Wrench), global::Bosdyn.Api.Wrench.Parser, new[]{ "Force", "Torque" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.FrameTreeSnapshot), global::Bosdyn.Api.FrameTreeSnapshot.Parser, new[]{ "ChildToParentEdgeMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge), global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge.Parser, new[]{ "ParentFrameName", "ParentTformChild" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Box2), global::Bosdyn.Api.Box2.Parser, new[]{ "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Box2WithFrame), global::Bosdyn.Api.Box2WithFrame.Parser, new[]{ "Box", "FrameName", "FrameNameTformBox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Box3), global::Bosdyn.Api.Box3.Parser, new[]{ "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Box3WithFrame), global::Bosdyn.Api.Box3WithFrame.Parser, new[]{ "Box", "FrameName", "FrameNameTformBox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Matrix), global::Bosdyn.Api.Matrix.Parser, new[]{ "Rows", "Cols", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SE3Covariance), global::Bosdyn.Api.SE3Covariance.Parser, new[]{ "Matrix", "YawVariance", "CovXx", "CovXy", "CovXz", "CovYx", "CovYy", "CovYz", "CovZx", "CovZy", "CovZz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PolyLine), global::Bosdyn.Api.PolyLine.Parser, new[]{ "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Polygon), global::Bosdyn.Api.Polygon.Parser, new[]{ "Vertexes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PolygonWithExclusions), global::Bosdyn.Api.PolygonWithExclusions.Parser, new[]{ "Inclusion", "Exclusions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Circle), global::Bosdyn.Api.Circle.Parser, new[]{ "CenterPt", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Area), global::Bosdyn.Api.Area.Parser, new[]{ "Polygon", "Circle" }, new[]{ "Geometry" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Volume), global::Bosdyn.Api.Volume.Parser, new[]{ "Box" }, new[]{ "Geometry" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Bounds), global::Bosdyn.Api.Bounds.Parser, new[]{ "Lower", "Upper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Vec2Value), global::Bosdyn.Api.Vec2Value.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Vec3Value), global::Bosdyn.Api.Vec3Value.Parser, new[]{ "X", "Y", "Z" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Two dimensional vector primitive.
  /// </summary>
  public sealed partial class Vec2 : pb::IMessage<Vec2> {
    private static readonly pb::MessageParser<Vec2> _parser = new pb::MessageParser<Vec2>(() => new Vec2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2(Vec2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2 Clone() {
      return new Vec2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Three dimensional vector primitive.
  /// </summary>
  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cylindrical coordinates are a generalization of polar coordiates, adding a
  /// height
  /// axis. See (http://mathworld.wolfram.com/CylindricalCoordinates.html) for
  /// more details.
  /// </summary>
  public sealed partial class CylindricalCoordinate : pb::IMessage<CylindricalCoordinate> {
    private static readonly pb::MessageParser<CylindricalCoordinate> _parser = new pb::MessageParser<CylindricalCoordinate>(() => new CylindricalCoordinate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CylindricalCoordinate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalCoordinate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalCoordinate(CylindricalCoordinate other) : this() {
      r_ = other.r_;
      theta_ = other.theta_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalCoordinate Clone() {
      return new CylindricalCoordinate(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private double r_;
    /// <summary>
    /// Radial coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "theta" field.</summary>
    public const int ThetaFieldNumber = 2;
    private double theta_;
    /// <summary>
    /// Azimuthal coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Theta {
      get { return theta_; }
      set {
        theta_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    /// <summary>
    /// Vertical coordiante
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CylindricalCoordinate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CylindricalCoordinate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Theta, other.Theta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(R);
      if (Theta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Theta);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(R);
      }
      if (Theta != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Theta);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0D) {
        size += 1 + 8;
      }
      if (Theta != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CylindricalCoordinate other) {
      if (other == null) {
        return;
      }
      if (other.R != 0D) {
        R = other.R;
      }
      if (other.Theta != 0D) {
        Theta = other.Theta;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            R = input.ReadDouble();
            break;
          }
          case 17: {
            Theta = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Quaternion primitive. A quaternion can be used to describe the rotation.
  /// </summary>
  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (W != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (W != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (W != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.W != 0D) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            W = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Plane primitive, described with a point and normal.
  /// </summary>
  public sealed partial class Plane : pb::IMessage<Plane> {
    private static readonly pb::MessageParser<Plane> _parser = new pb::MessageParser<Plane>(() => new Plane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane(Plane other) : this() {
      point_ = other.point_ != null ? other.point_.Clone() : null;
      normal_ = other.normal_ != null ? other.normal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane Clone() {
      return new Plane(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 point_;
    /// <summary>
    /// A point on the plane.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 2;
    private global::Bosdyn.Api.Vec3 normal_;
    /// <summary>
    /// The direction of the planes normal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if (normal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Normal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plane other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.Vec3();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          Normal = new global::Bosdyn.Api.Vec3();
        }
        Normal.MergeFrom(other.Normal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Point);
            break;
          }
          case 18: {
            if (normal_ == null) {
              Normal = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Normal);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A square oriented in 3D space.
  /// </summary>
  public sealed partial class Quad : pb::IMessage<Quad> {
    private static readonly pb::MessageParser<Quad> _parser = new pb::MessageParser<Quad>(() => new Quad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quad(Quad other) : this() {
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quad Clone() {
      return new Quad(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Bosdyn.Api.SE3Pose pose_;
    /// <summary>
    /// The center of the quad and the orientation of the normal.
    /// The normal axis is [0, 0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private double size_;
    /// <summary>
    /// The side length of the quad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (Size != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Size);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (Size != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (Size != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quad other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Bosdyn.Api.SE3Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.Size != 0D) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 17: {
            Size = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A ray in 3D space.
  /// </summary>
  public sealed partial class Ray : pb::IMessage<Ray> {
    private static readonly pb::MessageParser<Ray> _parser = new pb::MessageParser<Ray>(() => new Ray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ray(Ray other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ray Clone() {
      return new Ray(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 origin_;
    /// <summary>
    /// Base of ray.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Bosdyn.Api.Vec3 direction_;
    /// <summary>
    /// Unit vector defining the direction of the ray.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ray other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Bosdyn.Api.Vec3();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Bosdyn.Api.Vec3();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              Origin = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 18: {
            if (direction_ == null) {
              Direction = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Direction);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive to describe 2D position and rotation.
  /// </summary>
  public sealed partial class SE2Pose : pb::IMessage<SE2Pose> {
    private static readonly pb::MessageParser<SE2Pose> _parser = new pb::MessageParser<SE2Pose>(() => new SE2Pose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE2Pose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Pose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Pose(SE2Pose other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Pose Clone() {
      return new SE2Pose(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Bosdyn.Api.Vec2 position_;
    /// <summary>
    /// (m)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private double angle_;
    /// <summary>
    /// (rad)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE2Pose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE2Pose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Angle != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE2Pose other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.Vec2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 17: {
            Angle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive that describes a 2D velocity through it's linear and angular components.
  /// </summary>
  public sealed partial class SE2Velocity : pb::IMessage<SE2Velocity> {
    private static readonly pb::MessageParser<SE2Velocity> _parser = new pb::MessageParser<SE2Velocity>(() => new SE2Velocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE2Velocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Velocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Velocity(SE2Velocity other) : this() {
      linear_ = other.linear_ != null ? other.linear_.Clone() : null;
      angular_ = other.angular_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2Velocity Clone() {
      return new SE2Velocity(this);
    }

    /// <summary>Field number for the "linear" field.</summary>
    public const int LinearFieldNumber = 1;
    private global::Bosdyn.Api.Vec2 linear_;
    /// <summary>
    /// (m/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 Linear {
      get { return linear_; }
      set {
        linear_ = value;
      }
    }

    /// <summary>Field number for the "angular" field.</summary>
    public const int AngularFieldNumber = 2;
    private double angular_;
    /// <summary>
    /// (rad/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angular {
      get { return angular_; }
      set {
        angular_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE2Velocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE2Velocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Linear, other.Linear)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angular, other.Angular)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (linear_ != null) hash ^= Linear.GetHashCode();
      if (Angular != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angular);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linear_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Linear);
      }
      if (Angular != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Angular);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linear_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear);
      }
      if (Angular != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE2Velocity other) {
      if (other == null) {
        return;
      }
      if (other.linear_ != null) {
        if (linear_ == null) {
          Linear = new global::Bosdyn.Api.Vec2();
        }
        Linear.MergeFrom(other.Linear);
      }
      if (other.Angular != 0D) {
        Angular = other.Angular;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (linear_ == null) {
              Linear = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(Linear);
            break;
          }
          case 17: {
            Angular = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive to couple minimum and maximum SE2Velocities in a single message.
  /// </summary>
  public sealed partial class SE2VelocityLimit : pb::IMessage<SE2VelocityLimit> {
    private static readonly pb::MessageParser<SE2VelocityLimit> _parser = new pb::MessageParser<SE2VelocityLimit>(() => new SE2VelocityLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE2VelocityLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2VelocityLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2VelocityLimit(SE2VelocityLimit other) : this() {
      maxVel_ = other.maxVel_ != null ? other.maxVel_.Clone() : null;
      minVel_ = other.minVel_ != null ? other.minVel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE2VelocityLimit Clone() {
      return new SE2VelocityLimit(this);
    }

    /// <summary>Field number for the "max_vel" field.</summary>
    public const int MaxVelFieldNumber = 1;
    private global::Bosdyn.Api.SE2Velocity maxVel_;
    /// <summary>
    /// If set, limits the maximum velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE2Velocity MaxVel {
      get { return maxVel_; }
      set {
        maxVel_ = value;
      }
    }

    /// <summary>Field number for the "min_vel" field.</summary>
    public const int MinVelFieldNumber = 2;
    private global::Bosdyn.Api.SE2Velocity minVel_;
    /// <summary>
    /// If set, limits the minimum velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE2Velocity MinVel {
      get { return minVel_; }
      set {
        minVel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE2VelocityLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE2VelocityLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MaxVel, other.MaxVel)) return false;
      if (!object.Equals(MinVel, other.MinVel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (maxVel_ != null) hash ^= MaxVel.GetHashCode();
      if (minVel_ != null) hash ^= MinVel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (maxVel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MaxVel);
      }
      if (minVel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinVel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (maxVel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxVel);
      }
      if (minVel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinVel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE2VelocityLimit other) {
      if (other == null) {
        return;
      }
      if (other.maxVel_ != null) {
        if (maxVel_ == null) {
          MaxVel = new global::Bosdyn.Api.SE2Velocity();
        }
        MaxVel.MergeFrom(other.MaxVel);
      }
      if (other.minVel_ != null) {
        if (minVel_ == null) {
          MinVel = new global::Bosdyn.Api.SE2Velocity();
        }
        MinVel.MergeFrom(other.MinVel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (maxVel_ == null) {
              MaxVel = new global::Bosdyn.Api.SE2Velocity();
            }
            input.ReadMessage(MaxVel);
            break;
          }
          case 18: {
            if (minVel_ == null) {
              MinVel = new global::Bosdyn.Api.SE2Velocity();
            }
            input.ReadMessage(MinVel);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive to describe 3D position and rotation.
  /// </summary>
  public sealed partial class SE3Pose : pb::IMessage<SE3Pose> {
    private static readonly pb::MessageParser<SE3Pose> _parser = new pb::MessageParser<SE3Pose>(() => new SE3Pose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE3Pose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Pose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Pose(SE3Pose other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Pose Clone() {
      return new SE3Pose(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 position_;
    /// <summary>
    /// (m)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Bosdyn.Api.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE3Pose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE3Pose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE3Pose other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Bosdyn.Api.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::Bosdyn.Api.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive that describes a 3D velocity through it's linear and angular components.
  /// </summary>
  public sealed partial class SE3Velocity : pb::IMessage<SE3Velocity> {
    private static readonly pb::MessageParser<SE3Velocity> _parser = new pb::MessageParser<SE3Velocity>(() => new SE3Velocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE3Velocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Velocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Velocity(SE3Velocity other) : this() {
      linear_ = other.linear_ != null ? other.linear_.Clone() : null;
      angular_ = other.angular_ != null ? other.angular_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Velocity Clone() {
      return new SE3Velocity(this);
    }

    /// <summary>Field number for the "linear" field.</summary>
    public const int LinearFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 linear_;
    /// <summary>
    /// (m/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Linear {
      get { return linear_; }
      set {
        linear_ = value;
      }
    }

    /// <summary>Field number for the "angular" field.</summary>
    public const int AngularFieldNumber = 2;
    private global::Bosdyn.Api.Vec3 angular_;
    /// <summary>
    /// (rad/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Angular {
      get { return angular_; }
      set {
        angular_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE3Velocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE3Velocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Linear, other.Linear)) return false;
      if (!object.Equals(Angular, other.Angular)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (linear_ != null) hash ^= Linear.GetHashCode();
      if (angular_ != null) hash ^= Angular.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linear_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Linear);
      }
      if (angular_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angular);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linear_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear);
      }
      if (angular_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angular);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE3Velocity other) {
      if (other == null) {
        return;
      }
      if (other.linear_ != null) {
        if (linear_ == null) {
          Linear = new global::Bosdyn.Api.Vec3();
        }
        Linear.MergeFrom(other.Linear);
      }
      if (other.angular_ != null) {
        if (angular_ == null) {
          Angular = new global::Bosdyn.Api.Vec3();
        }
        Angular.MergeFrom(other.Angular);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (linear_ == null) {
              Linear = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Linear);
            break;
          }
          case 18: {
            if (angular_ == null) {
              Angular = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Angular);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive used to specify forces and torques.
  /// </summary>
  public sealed partial class Wrench : pb::IMessage<Wrench> {
    private static readonly pb::MessageParser<Wrench> _parser = new pb::MessageParser<Wrench>(() => new Wrench());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wrench> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrench() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrench(Wrench other) : this() {
      force_ = other.force_ != null ? other.force_.Clone() : null;
      torque_ = other.torque_ != null ? other.torque_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrench Clone() {
      return new Wrench(this);
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 force_;
    /// <summary>
    /// (N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "torque" field.</summary>
    public const int TorqueFieldNumber = 2;
    private global::Bosdyn.Api.Vec3 torque_;
    /// <summary>
    /// (Nm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Torque {
      get { return torque_; }
      set {
        torque_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wrench);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wrench other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Force, other.Force)) return false;
      if (!object.Equals(Torque, other.Torque)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (force_ != null) hash ^= Force.GetHashCode();
      if (torque_ != null) hash ^= Torque.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (force_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Force);
      }
      if (torque_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Torque);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (force_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Force);
      }
      if (torque_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Torque);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wrench other) {
      if (other == null) {
        return;
      }
      if (other.force_ != null) {
        if (force_ == null) {
          Force = new global::Bosdyn.Api.Vec3();
        }
        Force.MergeFrom(other.Force);
      }
      if (other.torque_ != null) {
        if (torque_ == null) {
          Torque = new global::Bosdyn.Api.Vec3();
        }
        Torque.MergeFrom(other.Torque);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (force_ == null) {
              Force = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Force);
            break;
          }
          case 18: {
            if (torque_ == null) {
              Torque = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Torque);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///   A frame is a named location in space. \
  /// For example, the following frames are defined by the API: \
  ///  - "body":   A frame centered on the robot's body. \
  ///  - "vision": A non-moving (inertial) frame that is the robot's best
  ///              estimate of a fixed location in the world. It is based on
  ///              both dead reckoning and visual analysis of the world. \
  ///  - "odom":   A non-moving (inertial) frame that is based on the kinematic
  ///              odometry of the robot only. \
  /// Additional frames are available for robot joints, sensors, and items
  /// detected in the world. \
  ///
  /// The FrameTreeSnapshot represents the relationships between the frames that the robot
  /// knows about at a particular point in time. For example, with the FrameTreeSnapshot,
  /// an API client can determine where the "body" is relative to the "vision". \
  ///
  /// To reduce data bandwidth, the FrameTreeSnapshot will typically contain
  /// a small subset of all known frames. By default, all services MUST
  /// include "vision", "body", and "odom" frames in the FrameTreeSnapshot, but
  /// additional frames can also be included. For example, an Image service
  /// would likely include the frame located at the base of the camera lens
  /// where the picture was taken. \
  ///
  /// Frame relationships are expressed as edges between "parent" frames and
  /// "child" frames, with an SE3Pose indicating the pose of the "child" frame
  /// expressed in the "child" frame. These edges are included in the edge_map
  /// field. For example, if frame "hand" is 1m in front of the frame "shoulder",
  /// then the FrameTreeSnapshot might contain: \
  ///  edge_map {                                    \
  ///     key: "hand"                                \
  ///     value: {                                   \
  ///         parent_frame_name: "shoulder"          \
  ///         parent_tform_child: {                  \
  ///            position: {                         \
  ///              x: 1.0                            \
  ///              y: 0.0                            \
  ///              z: 0.0                            \
  ///            }                                   \
  ///         }                                      \
  ///      }                                         \
  ///  }                                             \
  ///
  /// Frame relationships can be inverted. So, to find where the "shoulder"
  /// is in relationship the "hand", the parent_tform_child pose in the edge
  /// above can be inverted: \
  ///      hand_tform_shoulder = shoulder_tform_hand.inverse() \
  /// Frame relationships can also be concatenated. If there is an additional
  /// edge specifying the pose of the "shoulder" relative to the "body", then
  /// to find where the "hand" is relative to the "body" do: \
  ///      body_tform_hand = body_tform_shoulder * shoulder_tform_hand \
  ///
  /// The two properties above reduce data size. Instead of having to send N^2
  /// edge_map entries to represent all relationships between N frames,
  /// only N edge_map entries need to be sent. Clients will need to determine
  /// the chain of edges to follow to get from one frame to another frame,
  /// and then do inversion and concatentation to generate the appropriate pose. \
  ///
  /// Note that all FrameTreeSnapshots are expected to be a single rooted tree.
  /// The syntax for FrameTreeSnapshot could also support graphs with
  /// cycles, or forests of trees - but clients should treat those as invalid
  /// representations. \
  /// </summary>
  public sealed partial class FrameTreeSnapshot : pb::IMessage<FrameTreeSnapshot> {
    private static readonly pb::MessageParser<FrameTreeSnapshot> _parser = new pb::MessageParser<FrameTreeSnapshot>(() => new FrameTreeSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameTreeSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTreeSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTreeSnapshot(FrameTreeSnapshot other) : this() {
      childToParentEdgeMap_ = other.childToParentEdgeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTreeSnapshot Clone() {
      return new FrameTreeSnapshot(this);
    }

    /// <summary>Field number for the "child_to_parent_edge_map" field.</summary>
    public const int ChildToParentEdgeMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge>.Codec _map_childToParentEdgeMap_codec
        = new pbc::MapField<string, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge.Parser), 10);
    private readonly pbc::MapField<string, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge> childToParentEdgeMap_ = new pbc::MapField<string, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge>();
    /// <summary>
    /// child_to_parent_edge_map maps the child frame name to the ParentEdge.
    /// In aggregate, this forms the tree structure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bosdyn.Api.FrameTreeSnapshot.Types.ParentEdge> ChildToParentEdgeMap {
      get { return childToParentEdgeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameTreeSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameTreeSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ChildToParentEdgeMap.Equals(other.ChildToParentEdgeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ChildToParentEdgeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      childToParentEdgeMap_.WriteTo(output, _map_childToParentEdgeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += childToParentEdgeMap_.CalculateSize(_map_childToParentEdgeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameTreeSnapshot other) {
      if (other == null) {
        return;
      }
      childToParentEdgeMap_.Add(other.childToParentEdgeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            childToParentEdgeMap_.AddEntriesFrom(input, _map_childToParentEdgeMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FrameTreeSnapshot message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// ParentEdge represents the relationship from a child frame to a parent frame.
      /// </summary>
      public sealed partial class ParentEdge : pb::IMessage<ParentEdge> {
        private static readonly pb::MessageParser<ParentEdge> _parser = new pb::MessageParser<ParentEdge>(() => new ParentEdge());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParentEdge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.FrameTreeSnapshot.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParentEdge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParentEdge(ParentEdge other) : this() {
          parentFrameName_ = other.parentFrameName_;
          parentTformChild_ = other.parentTformChild_ != null ? other.parentTformChild_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParentEdge Clone() {
          return new ParentEdge(this);
        }

        /// <summary>Field number for the "parent_frame_name" field.</summary>
        public const int ParentFrameNameFieldNumber = 1;
        private string parentFrameName_ = "";
        /// <summary>
        /// The name of the parent frame. Must be non-empty. If parent_frame_name is
        /// not a key in edge_map, it is the root of the tree.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ParentFrameName {
          get { return parentFrameName_; }
          set {
            parentFrameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "parent_tform_child" field.</summary>
        public const int ParentTformChildFieldNumber = 2;
        private global::Bosdyn.Api.SE3Pose parentTformChild_;
        /// <summary>
        /// Transform representing the pose of the child frame in the parent's frame.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose ParentTformChild {
          get { return parentTformChild_; }
          set {
            parentTformChild_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ParentEdge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParentEdge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ParentFrameName != other.ParentFrameName) return false;
          if (!object.Equals(ParentTformChild, other.ParentTformChild)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ParentFrameName.Length != 0) hash ^= ParentFrameName.GetHashCode();
          if (parentTformChild_ != null) hash ^= ParentTformChild.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ParentFrameName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ParentFrameName);
          }
          if (parentTformChild_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ParentTformChild);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ParentFrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentFrameName);
          }
          if (parentTformChild_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentTformChild);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParentEdge other) {
          if (other == null) {
            return;
          }
          if (other.ParentFrameName.Length != 0) {
            ParentFrameName = other.ParentFrameName;
          }
          if (other.parentTformChild_ != null) {
            if (parentTformChild_ == null) {
              ParentTformChild = new global::Bosdyn.Api.SE3Pose();
            }
            ParentTformChild.MergeFrom(other.ParentTformChild);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ParentFrameName = input.ReadString();
                break;
              }
              case 18: {
                if (parentTformChild_ == null) {
                  ParentTformChild = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(ParentTformChild);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Geometric primitive describing a two-dimensional box.
  /// </summary>
  public sealed partial class Box2 : pb::IMessage<Box2> {
    private static readonly pb::MessageParser<Box2> _parser = new pb::MessageParser<Box2>(() => new Box2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2(Box2 other) : this() {
      size_ = other.size_ != null ? other.size_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2 Clone() {
      return new Box2(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::Bosdyn.Api.Vec2 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box2 other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Bosdyn.Api.Vec2();
        }
        Size.MergeFrom(other.Size);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (size_ == null) {
              Size = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(Size);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive to describe a 2D box in a specific frame.
  /// </summary>
  public sealed partial class Box2WithFrame : pb::IMessage<Box2WithFrame> {
    private static readonly pb::MessageParser<Box2WithFrame> _parser = new pb::MessageParser<Box2WithFrame>(() => new Box2WithFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box2WithFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2WithFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2WithFrame(Box2WithFrame other) : this() {
      box_ = other.box_ != null ? other.box_.Clone() : null;
      frameName_ = other.frameName_;
      frameNameTformBox_ = other.frameNameTformBox_ != null ? other.frameNameTformBox_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box2WithFrame Clone() {
      return new Box2WithFrame(this);
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    private global::Bosdyn.Api.Box2 box_;
    /// <summary>
    /// The box is specified with width (y) and length (x), and the full box is
    /// fixed at an origin, where it's sides are along the coordinate frame's
    /// axes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Box2 Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    /// <summary>Field number for the "frame_name" field.</summary>
    public const int FrameNameFieldNumber = 2;
    private string frameName_ = "";
    /// <summary>
    /// The pose of the axis-aligned box is in 'frame_name'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameName {
      get { return frameName_; }
      set {
        frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_name_tform_box" field.</summary>
    public const int FrameNameTformBoxFieldNumber = 3;
    private global::Bosdyn.Api.SE3Pose frameNameTformBox_;
    /// <summary>
    /// The transformation of the axis-aligned box into the desired frame
    /// (specified above).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose FrameNameTformBox {
      get { return frameNameTformBox_; }
      set {
        frameNameTformBox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box2WithFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box2WithFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (FrameName != other.FrameName) return false;
      if (!object.Equals(FrameNameTformBox, other.FrameNameTformBox)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (box_ != null) hash ^= Box.GetHashCode();
      if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
      if (frameNameTformBox_ != null) hash ^= FrameNameTformBox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (box_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (FrameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameName);
      }
      if (frameNameTformBox_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FrameNameTformBox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (box_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (FrameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
      }
      if (frameNameTformBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameNameTformBox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box2WithFrame other) {
      if (other == null) {
        return;
      }
      if (other.box_ != null) {
        if (box_ == null) {
          Box = new global::Bosdyn.Api.Box2();
        }
        Box.MergeFrom(other.Box);
      }
      if (other.FrameName.Length != 0) {
        FrameName = other.FrameName;
      }
      if (other.frameNameTformBox_ != null) {
        if (frameNameTformBox_ == null) {
          FrameNameTformBox = new global::Bosdyn.Api.SE3Pose();
        }
        FrameNameTformBox.MergeFrom(other.FrameNameTformBox);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (box_ == null) {
              Box = new global::Bosdyn.Api.Box2();
            }
            input.ReadMessage(Box);
            break;
          }
          case 18: {
            FrameName = input.ReadString();
            break;
          }
          case 26: {
            if (frameNameTformBox_ == null) {
              FrameNameTformBox = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(FrameNameTformBox);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive describing a three-dimensional box.
  /// </summary>
  public sealed partial class Box3 : pb::IMessage<Box3> {
    private static readonly pb::MessageParser<Box3> _parser = new pb::MessageParser<Box3>(() => new Box3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3(Box3 other) : this() {
      size_ = other.size_ != null ? other.size_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3 Clone() {
      return new Box3(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box3 other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Bosdyn.Api.Vec3();
        }
        Size.MergeFrom(other.Size);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (size_ == null) {
              Size = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Size);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Geometric primitive to describe a 3D box in a specific frame.
  /// </summary>
  public sealed partial class Box3WithFrame : pb::IMessage<Box3WithFrame> {
    private static readonly pb::MessageParser<Box3WithFrame> _parser = new pb::MessageParser<Box3WithFrame>(() => new Box3WithFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box3WithFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3WithFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3WithFrame(Box3WithFrame other) : this() {
      box_ = other.box_ != null ? other.box_.Clone() : null;
      frameName_ = other.frameName_;
      frameNameTformBox_ = other.frameNameTformBox_ != null ? other.frameNameTformBox_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box3WithFrame Clone() {
      return new Box3WithFrame(this);
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    private global::Bosdyn.Api.Box3 box_;
    /// <summary>
    /// The box width (y), length (x), and height (z) are interpreted in, and the
    /// full box is fixed at an origin, where it's sides are along the coordinate
    /// frame's axes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Box3 Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    /// <summary>Field number for the "frame_name" field.</summary>
    public const int FrameNameFieldNumber = 2;
    private string frameName_ = "";
    /// <summary>
    /// The pose of the axis-aligned box is in 'frame_name'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameName {
      get { return frameName_; }
      set {
        frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_name_tform_box" field.</summary>
    public const int FrameNameTformBoxFieldNumber = 3;
    private global::Bosdyn.Api.SE3Pose frameNameTformBox_;
    /// <summary>
    /// The transformation of the axis-aligned box into the desired frame
    /// (specified above).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose FrameNameTformBox {
      get { return frameNameTformBox_; }
      set {
        frameNameTformBox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box3WithFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box3WithFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (FrameName != other.FrameName) return false;
      if (!object.Equals(FrameNameTformBox, other.FrameNameTformBox)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (box_ != null) hash ^= Box.GetHashCode();
      if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
      if (frameNameTformBox_ != null) hash ^= FrameNameTformBox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (box_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (FrameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameName);
      }
      if (frameNameTformBox_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FrameNameTformBox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (box_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (FrameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
      }
      if (frameNameTformBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameNameTformBox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box3WithFrame other) {
      if (other == null) {
        return;
      }
      if (other.box_ != null) {
        if (box_ == null) {
          Box = new global::Bosdyn.Api.Box3();
        }
        Box.MergeFrom(other.Box);
      }
      if (other.FrameName.Length != 0) {
        FrameName = other.FrameName;
      }
      if (other.frameNameTformBox_ != null) {
        if (frameNameTformBox_ == null) {
          FrameNameTformBox = new global::Bosdyn.Api.SE3Pose();
        }
        FrameNameTformBox.MergeFrom(other.FrameNameTformBox);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (box_ == null) {
              Box = new global::Bosdyn.Api.Box3();
            }
            input.ReadMessage(Box);
            break;
          }
          case 18: {
            FrameName = input.ReadString();
            break;
          }
          case 26: {
            if (frameNameTformBox_ == null) {
              FrameNameTformBox = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(FrameNameTformBox);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a row-major order matrix of doubles.
  /// </summary>
  public sealed partial class Matrix : pb::IMessage<Matrix> {
    private static readonly pb::MessageParser<Matrix> _parser = new pb::MessageParser<Matrix>(() => new Matrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Matrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix(Matrix other) : this() {
      rows_ = other.rows_;
      cols_ = other.cols_;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Matrix Clone() {
      return new Matrix(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private int rows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rows {
      get { return rows_; }
      set {
        rows_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private int cols_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cols {
      get { return cols_; }
      set {
        cols_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Matrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Matrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rows != other.Rows) return false;
      if (Cols != other.Cols) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rows != 0) hash ^= Rows.GetHashCode();
      if (Cols != 0) hash ^= Cols.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rows != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rows);
      }
      if (Cols != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cols);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rows);
      }
      if (Cols != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cols);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Matrix other) {
      if (other == null) {
        return;
      }
      if (other.Rows != 0) {
        Rows = other.Rows;
      }
      if (other.Cols != 0) {
        Cols = other.Cols;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rows = input.ReadInt32();
            break;
          }
          case 16: {
            Cols = input.ReadInt32();
            break;
          }
          case 26:
          case 25: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the translation/rotation covariance of an SE3 Pose.
  /// The 6x6 matrix can be viewed as the covariance among 6 variables: \
  ///      rx     ry  rz    x    y    z                                 \
  /// rx rxrx  rxry rxrz  rxx  rxy  rxz                                 \
  /// ry ryrx  ryry ryrz  ryx  ryy  ryz                                 \
  /// rz rzrx  rzry rzrz  rzx  rzy  rzz                                 \
  /// x   xrx   xry  xrz   xx   xy   xz                                 \
  /// y   yrx   yry  yrz   yx   yy   yz                                 \
  /// z   zrx   zry  zrz   zx   zy   zz                                 \
  /// where x, y, z are translations in meters, and rx, ry, rz are rotations around
  /// the x, y and z axes in radians.                                   \
  /// The matrix is symmetric, so, for example, xy = yx.                \
  /// </summary>
  public sealed partial class SE3Covariance : pb::IMessage<SE3Covariance> {
    private static readonly pb::MessageParser<SE3Covariance> _parser = new pb::MessageParser<SE3Covariance>(() => new SE3Covariance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SE3Covariance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Covariance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Covariance(SE3Covariance other) : this() {
      matrix_ = other.matrix_ != null ? other.matrix_.Clone() : null;
      yawVariance_ = other.yawVariance_;
      covXx_ = other.covXx_;
      covXy_ = other.covXy_;
      covXz_ = other.covXz_;
      covYx_ = other.covYx_;
      covYy_ = other.covYy_;
      covYz_ = other.covYz_;
      covZx_ = other.covZx_;
      covZy_ = other.covZy_;
      covZz_ = other.covZz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SE3Covariance Clone() {
      return new SE3Covariance(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private global::Bosdyn.Api.Matrix matrix_;
    /// <summary>
    /// Row-major order representation of the covariance matrix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Matrix Matrix {
      get { return matrix_; }
      set {
        matrix_ = value;
      }
    }

    /// <summary>Field number for the "yaw_variance" field.</summary>
    public const int YawVarianceFieldNumber = 2;
    private double yawVariance_;
    /// <summary>
    /// Variance of the yaw component of the SE3 Pose.
    /// Warning: deprecated in 2.1. This should equal cov_rzrz, inside `matrix`.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawVariance {
      get { return yawVariance_; }
      set {
        yawVariance_ = value;
      }
    }

    /// <summary>Field number for the "cov_xx" field.</summary>
    public const int CovXxFieldNumber = 3;
    private double covXx_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovXx {
      get { return covXx_; }
      set {
        covXx_ = value;
      }
    }

    /// <summary>Field number for the "cov_xy" field.</summary>
    public const int CovXyFieldNumber = 4;
    private double covXy_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovXy {
      get { return covXy_; }
      set {
        covXy_ = value;
      }
    }

    /// <summary>Field number for the "cov_xz" field.</summary>
    public const int CovXzFieldNumber = 5;
    private double covXz_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovXz {
      get { return covXz_; }
      set {
        covXz_ = value;
      }
    }

    /// <summary>Field number for the "cov_yx" field.</summary>
    public const int CovYxFieldNumber = 6;
    private double covYx_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovYx {
      get { return covYx_; }
      set {
        covYx_ = value;
      }
    }

    /// <summary>Field number for the "cov_yy" field.</summary>
    public const int CovYyFieldNumber = 7;
    private double covYy_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovYy {
      get { return covYy_; }
      set {
        covYy_ = value;
      }
    }

    /// <summary>Field number for the "cov_yz" field.</summary>
    public const int CovYzFieldNumber = 8;
    private double covYz_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovYz {
      get { return covYz_; }
      set {
        covYz_ = value;
      }
    }

    /// <summary>Field number for the "cov_zx" field.</summary>
    public const int CovZxFieldNumber = 9;
    private double covZx_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovZx {
      get { return covZx_; }
      set {
        covZx_ = value;
      }
    }

    /// <summary>Field number for the "cov_zy" field.</summary>
    public const int CovZyFieldNumber = 10;
    private double covZy_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovZy {
      get { return covZy_; }
      set {
        covZy_ = value;
      }
    }

    /// <summary>Field number for the "cov_zz" field.</summary>
    public const int CovZzFieldNumber = 11;
    private double covZz_;
    /// <summary>
    /// Warning: deprecated in 2.1. Use 'matrix.'
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CovZz {
      get { return covZz_; }
      set {
        covZz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SE3Covariance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SE3Covariance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Matrix, other.Matrix)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawVariance, other.YawVariance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovXx, other.CovXx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovXy, other.CovXy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovXz, other.CovXz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovYx, other.CovYx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovYy, other.CovYy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovYz, other.CovYz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovZx, other.CovZx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovZy, other.CovZy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CovZz, other.CovZz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matrix_ != null) hash ^= Matrix.GetHashCode();
      if (YawVariance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawVariance);
      if (CovXx != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovXx);
      if (CovXy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovXy);
      if (CovXz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovXz);
      if (CovYx != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovYx);
      if (CovYy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovYy);
      if (CovYz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovYz);
      if (CovZx != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovZx);
      if (CovZy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovZy);
      if (CovZz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CovZz);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matrix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Matrix);
      }
      if (YawVariance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(YawVariance);
      }
      if (CovXx != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CovXx);
      }
      if (CovXy != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CovXy);
      }
      if (CovXz != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CovXz);
      }
      if (CovYx != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CovYx);
      }
      if (CovYy != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CovYy);
      }
      if (CovYz != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CovYz);
      }
      if (CovZx != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CovZx);
      }
      if (CovZy != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(CovZy);
      }
      if (CovZz != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(CovZz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Matrix);
      }
      if (YawVariance != 0D) {
        size += 1 + 8;
      }
      if (CovXx != 0D) {
        size += 1 + 8;
      }
      if (CovXy != 0D) {
        size += 1 + 8;
      }
      if (CovXz != 0D) {
        size += 1 + 8;
      }
      if (CovYx != 0D) {
        size += 1 + 8;
      }
      if (CovYy != 0D) {
        size += 1 + 8;
      }
      if (CovYz != 0D) {
        size += 1 + 8;
      }
      if (CovZx != 0D) {
        size += 1 + 8;
      }
      if (CovZy != 0D) {
        size += 1 + 8;
      }
      if (CovZz != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SE3Covariance other) {
      if (other == null) {
        return;
      }
      if (other.matrix_ != null) {
        if (matrix_ == null) {
          Matrix = new global::Bosdyn.Api.Matrix();
        }
        Matrix.MergeFrom(other.Matrix);
      }
      if (other.YawVariance != 0D) {
        YawVariance = other.YawVariance;
      }
      if (other.CovXx != 0D) {
        CovXx = other.CovXx;
      }
      if (other.CovXy != 0D) {
        CovXy = other.CovXy;
      }
      if (other.CovXz != 0D) {
        CovXz = other.CovXz;
      }
      if (other.CovYx != 0D) {
        CovYx = other.CovYx;
      }
      if (other.CovYy != 0D) {
        CovYy = other.CovYy;
      }
      if (other.CovYz != 0D) {
        CovYz = other.CovYz;
      }
      if (other.CovZx != 0D) {
        CovZx = other.CovZx;
      }
      if (other.CovZy != 0D) {
        CovZy = other.CovZy;
      }
      if (other.CovZz != 0D) {
        CovZz = other.CovZz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matrix_ == null) {
              Matrix = new global::Bosdyn.Api.Matrix();
            }
            input.ReadMessage(Matrix);
            break;
          }
          case 17: {
            YawVariance = input.ReadDouble();
            break;
          }
          case 25: {
            CovXx = input.ReadDouble();
            break;
          }
          case 33: {
            CovXy = input.ReadDouble();
            break;
          }
          case 41: {
            CovXz = input.ReadDouble();
            break;
          }
          case 49: {
            CovYx = input.ReadDouble();
            break;
          }
          case 57: {
            CovYy = input.ReadDouble();
            break;
          }
          case 65: {
            CovYz = input.ReadDouble();
            break;
          }
          case 73: {
            CovZx = input.ReadDouble();
            break;
          }
          case 81: {
            CovZy = input.ReadDouble();
            break;
          }
          case 89: {
            CovZz = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Multi-part, 1D line segments defined by a series of points.
  /// </summary>
  public sealed partial class PolyLine : pb::IMessage<PolyLine> {
    private static readonly pb::MessageParser<PolyLine> _parser = new pb::MessageParser<PolyLine>(() => new PolyLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolyLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyLine(PolyLine other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolyLine Clone() {
      return new PolyLine(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Vec2> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.Vec2.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Vec2> points_ = new pbc::RepeatedField<global::Bosdyn.Api.Vec2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Vec2> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolyLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolyLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolyLine other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Polygon in the XY plane.
  /// May be concave, but should not self-intersect. Vertices can be specified in either
  /// clockwise or counterclockwise orders.
  /// </summary>
  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      vertexes_ = other.vertexes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "vertexes" field.</summary>
    public const int VertexesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Vec2> _repeated_vertexes_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.Vec2.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Vec2> vertexes_ = new pbc::RepeatedField<global::Bosdyn.Api.Vec2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Vec2> Vertexes {
      get { return vertexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vertexes_.Equals(other.vertexes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vertexes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vertexes_.WriteTo(output, _repeated_vertexes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vertexes_.CalculateSize(_repeated_vertexes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      vertexes_.Add(other.vertexes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vertexes_.AddEntriesFrom(input, _repeated_vertexes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a region in the XY plane that consists of a single polygon
  /// from which polygons representing exclusion areas may be subtracted.
  ///
  /// A point is considered to be inside the region if it is inside the inclusion
  /// polygon and not inside any of the exclusion polygons.
  ///
  /// Note that while this can be used to represent a polygon with holes, that
  /// exclusions are not necessarily holes:  An exclusion polygon may not be
  /// completely inside the inclusion polygon.
  /// </summary>
  public sealed partial class PolygonWithExclusions : pb::IMessage<PolygonWithExclusions> {
    private static readonly pb::MessageParser<PolygonWithExclusions> _parser = new pb::MessageParser<PolygonWithExclusions>(() => new PolygonWithExclusions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolygonWithExclusions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonWithExclusions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonWithExclusions(PolygonWithExclusions other) : this() {
      inclusion_ = other.inclusion_ != null ? other.inclusion_.Clone() : null;
      exclusions_ = other.exclusions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolygonWithExclusions Clone() {
      return new PolygonWithExclusions(this);
    }

    /// <summary>Field number for the "inclusion" field.</summary>
    public const int InclusionFieldNumber = 5;
    private global::Bosdyn.Api.Polygon inclusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Polygon Inclusion {
      get { return inclusion_; }
      set {
        inclusion_ = value;
      }
    }

    /// <summary>Field number for the "exclusions" field.</summary>
    public const int ExclusionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Polygon> _repeated_exclusions_codec
        = pb::FieldCodec.ForMessage(50, global::Bosdyn.Api.Polygon.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Polygon> exclusions_ = new pbc::RepeatedField<global::Bosdyn.Api.Polygon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Polygon> Exclusions {
      get { return exclusions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolygonWithExclusions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolygonWithExclusions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Inclusion, other.Inclusion)) return false;
      if(!exclusions_.Equals(other.exclusions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inclusion_ != null) hash ^= Inclusion.GetHashCode();
      hash ^= exclusions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inclusion_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Inclusion);
      }
      exclusions_.WriteTo(output, _repeated_exclusions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inclusion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inclusion);
      }
      size += exclusions_.CalculateSize(_repeated_exclusions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolygonWithExclusions other) {
      if (other == null) {
        return;
      }
      if (other.inclusion_ != null) {
        if (inclusion_ == null) {
          Inclusion = new global::Bosdyn.Api.Polygon();
        }
        Inclusion.MergeFrom(other.Inclusion);
      }
      exclusions_.Add(other.exclusions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            if (inclusion_ == null) {
              Inclusion = new global::Bosdyn.Api.Polygon();
            }
            input.ReadMessage(Inclusion);
            break;
          }
          case 50: {
            exclusions_.AddEntriesFrom(input, _repeated_exclusions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a circular 2D area.
  /// </summary>
  public sealed partial class Circle : pb::IMessage<Circle> {
    private static readonly pb::MessageParser<Circle> _parser = new pb::MessageParser<Circle>(() => new Circle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Circle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle(Circle other) : this() {
      centerPt_ = other.centerPt_ != null ? other.centerPt_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle Clone() {
      return new Circle(this);
    }

    /// <summary>Field number for the "center_pt" field.</summary>
    public const int CenterPtFieldNumber = 1;
    private global::Bosdyn.Api.Vec2 centerPt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 CenterPt {
      get { return centerPt_; }
      set {
        centerPt_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    /// <summary>
    /// Dimensions in m from center_pt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Circle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Circle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CenterPt, other.CenterPt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (centerPt_ != null) hash ^= CenterPt.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (centerPt_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CenterPt);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (centerPt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterPt);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Circle other) {
      if (other == null) {
        return;
      }
      if (other.centerPt_ != null) {
        if (centerPt_ == null) {
          CenterPt = new global::Bosdyn.Api.Vec2();
        }
        CenterPt.MergeFrom(other.CenterPt);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (centerPt_ == null) {
              CenterPt = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(CenterPt);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents an area in the XY plane.
  /// </summary>
  public sealed partial class Area : pb::IMessage<Area> {
    private static readonly pb::MessageParser<Area> _parser = new pb::MessageParser<Area>(() => new Area());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Area> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Area() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Area(Area other) : this() {
      switch (other.GeometryCase) {
        case GeometryOneofCase.Polygon:
          Polygon = other.Polygon.Clone();
          break;
        case GeometryOneofCase.Circle:
          Circle = other.Circle.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Area Clone() {
      return new Area(this);
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Polygon Polygon {
      get { return geometryCase_ == GeometryOneofCase.Polygon ? (global::Bosdyn.Api.Polygon) geometry_ : null; }
      set {
        geometry_ = value;
        geometryCase_ = value == null ? GeometryOneofCase.None : GeometryOneofCase.Polygon;
      }
    }

    /// <summary>Field number for the "circle" field.</summary>
    public const int CircleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Circle Circle {
      get { return geometryCase_ == GeometryOneofCase.Circle ? (global::Bosdyn.Api.Circle) geometry_ : null; }
      set {
        geometry_ = value;
        geometryCase_ = value == null ? GeometryOneofCase.None : GeometryOneofCase.Circle;
      }
    }

    private object geometry_;
    /// <summary>Enum of possible cases for the "geometry" oneof.</summary>
    public enum GeometryOneofCase {
      None = 0,
      Polygon = 1,
      Circle = 2,
    }
    private GeometryOneofCase geometryCase_ = GeometryOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryOneofCase GeometryCase {
      get { return geometryCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGeometry() {
      geometryCase_ = GeometryOneofCase.None;
      geometry_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Area);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Area other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if (!object.Equals(Circle, other.Circle)) return false;
      if (GeometryCase != other.GeometryCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (geometryCase_ == GeometryOneofCase.Polygon) hash ^= Polygon.GetHashCode();
      if (geometryCase_ == GeometryOneofCase.Circle) hash ^= Circle.GetHashCode();
      hash ^= (int) geometryCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (geometryCase_ == GeometryOneofCase.Polygon) {
        output.WriteRawTag(10);
        output.WriteMessage(Polygon);
      }
      if (geometryCase_ == GeometryOneofCase.Circle) {
        output.WriteRawTag(18);
        output.WriteMessage(Circle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (geometryCase_ == GeometryOneofCase.Polygon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (geometryCase_ == GeometryOneofCase.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Circle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Area other) {
      if (other == null) {
        return;
      }
      switch (other.GeometryCase) {
        case GeometryOneofCase.Polygon:
          if (Polygon == null) {
            Polygon = new global::Bosdyn.Api.Polygon();
          }
          Polygon.MergeFrom(other.Polygon);
          break;
        case GeometryOneofCase.Circle:
          if (Circle == null) {
            Circle = new global::Bosdyn.Api.Circle();
          }
          Circle.MergeFrom(other.Circle);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bosdyn.Api.Polygon subBuilder = new global::Bosdyn.Api.Polygon();
            if (geometryCase_ == GeometryOneofCase.Polygon) {
              subBuilder.MergeFrom(Polygon);
            }
            input.ReadMessage(subBuilder);
            Polygon = subBuilder;
            break;
          }
          case 18: {
            global::Bosdyn.Api.Circle subBuilder = new global::Bosdyn.Api.Circle();
            if (geometryCase_ == GeometryOneofCase.Circle) {
              subBuilder.MergeFrom(Circle);
            }
            input.ReadMessage(subBuilder);
            Circle = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a volume of space in an unspecified frame.
  /// </summary>
  public sealed partial class Volume : pb::IMessage<Volume> {
    private static readonly pb::MessageParser<Volume> _parser = new pb::MessageParser<Volume>(() => new Volume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Volume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume(Volume other) : this() {
      switch (other.GeometryCase) {
        case GeometryOneofCase.Box:
          Box = other.Box.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Volume Clone() {
      return new Volume(this);
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    /// <summary>
    /// Dimensions in m, centered on frame origin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Box {
      get { return geometryCase_ == GeometryOneofCase.Box ? (global::Bosdyn.Api.Vec3) geometry_ : null; }
      set {
        geometry_ = value;
        geometryCase_ = value == null ? GeometryOneofCase.None : GeometryOneofCase.Box;
      }
    }

    private object geometry_;
    /// <summary>Enum of possible cases for the "geometry" oneof.</summary>
    public enum GeometryOneofCase {
      None = 0,
      Box = 1,
    }
    private GeometryOneofCase geometryCase_ = GeometryOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeometryOneofCase GeometryCase {
      get { return geometryCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGeometry() {
      geometryCase_ = GeometryOneofCase.None;
      geometry_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Volume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Volume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Box, other.Box)) return false;
      if (GeometryCase != other.GeometryCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (geometryCase_ == GeometryOneofCase.Box) hash ^= Box.GetHashCode();
      hash ^= (int) geometryCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (geometryCase_ == GeometryOneofCase.Box) {
        output.WriteRawTag(10);
        output.WriteMessage(Box);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (geometryCase_ == GeometryOneofCase.Box) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Volume other) {
      if (other == null) {
        return;
      }
      switch (other.GeometryCase) {
        case GeometryOneofCase.Box:
          if (Box == null) {
            Box = new global::Bosdyn.Api.Vec3();
          }
          Box.MergeFrom(other.Box);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bosdyn.Api.Vec3 subBuilder = new global::Bosdyn.Api.Vec3();
            if (geometryCase_ == GeometryOneofCase.Box) {
              subBuilder.MergeFrom(Box);
            }
            input.ReadMessage(subBuilder);
            Box = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents bounds on a value, such that lower &lt; value &lt; upper.
  /// If you do not want to specify one side of the bound, set it to
  /// an appropriately large (or small) number.
  /// </summary>
  public sealed partial class Bounds : pb::IMessage<Bounds> {
    private static readonly pb::MessageParser<Bounds> _parser = new pb::MessageParser<Bounds>(() => new Bounds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bounds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bounds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bounds(Bounds other) : this() {
      lower_ = other.lower_;
      upper_ = other.upper_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bounds Clone() {
      return new Bounds(this);
    }

    /// <summary>Field number for the "lower" field.</summary>
    public const int LowerFieldNumber = 1;
    private double lower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lower {
      get { return lower_; }
      set {
        lower_ = value;
      }
    }

    /// <summary>Field number for the "upper" field.</summary>
    public const int UpperFieldNumber = 2;
    private double upper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Upper {
      get { return upper_; }
      set {
        upper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bounds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bounds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lower, other.Lower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Upper, other.Upper)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lower != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lower);
      if (Upper != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Upper);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lower != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Lower);
      }
      if (Upper != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Upper);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lower != 0D) {
        size += 1 + 8;
      }
      if (Upper != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bounds other) {
      if (other == null) {
        return;
      }
      if (other.Lower != 0D) {
        Lower = other.Lower;
      }
      if (other.Upper != 0D) {
        Upper = other.Upper;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Lower = input.ReadDouble();
            break;
          }
          case 17: {
            Upper = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A 2D vector of doubles that uses wrapped values so we can tell which elements are set.
  /// </summary>
  public sealed partial class Vec2Value : pb::IMessage<Vec2Value> {
    private static readonly pb::MessageParser<Vec2Value> _parser = new pb::MessageParser<Vec2Value>(() => new Vec2Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec2Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2Value(Vec2Value other) : this() {
      X = other.X;
      Y = other.Y;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec2Value Clone() {
      return new Vec2Value(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_x_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? X {
      get { return x_; }
      set {
        x_ = value;
      }
    }


    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_y_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec2Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec2Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (x_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(X);
      if (y_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (x_ != null) {
        _single_x_codec.WriteTagAndValue(output, X);
      }
      if (y_ != null) {
        _single_y_codec.WriteTagAndValue(output, Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (x_ != null) {
        size += _single_x_codec.CalculateSizeWithTag(X);
      }
      if (y_ != null) {
        size += _single_y_codec.CalculateSizeWithTag(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec2Value other) {
      if (other == null) {
        return;
      }
      if (other.x_ != null) {
        if (x_ == null || other.X != 0D) {
          X = other.X;
        }
      }
      if (other.y_ != null) {
        if (y_ == null || other.Y != 0D) {
          Y = other.Y;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_x_codec.Read(input);
            if (x_ == null || value != 0D) {
              X = value;
            }
            break;
          }
          case 18: {
            double? value = _single_y_codec.Read(input);
            if (y_ == null || value != 0D) {
              Y = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A 3D vector of doubles that uses wrapped values so we can tell which elements are set.
  /// </summary>
  public sealed partial class Vec3Value : pb::IMessage<Vec3Value> {
    private static readonly pb::MessageParser<Vec3Value> _parser = new pb::MessageParser<Vec3Value>(() => new Vec3Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GeometryReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Value(Vec3Value other) : this() {
      X = other.X;
      Y = other.Y;
      Z = other.Z;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Value Clone() {
      return new Vec3Value(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_x_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? X {
      get { return x_; }
      set {
        x_ = value;
      }
    }


    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_y_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }


    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_z_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (x_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(X);
      if (y_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Y);
      if (z_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (x_ != null) {
        _single_x_codec.WriteTagAndValue(output, X);
      }
      if (y_ != null) {
        _single_y_codec.WriteTagAndValue(output, Y);
      }
      if (z_ != null) {
        _single_z_codec.WriteTagAndValue(output, Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (x_ != null) {
        size += _single_x_codec.CalculateSizeWithTag(X);
      }
      if (y_ != null) {
        size += _single_y_codec.CalculateSizeWithTag(Y);
      }
      if (z_ != null) {
        size += _single_z_codec.CalculateSizeWithTag(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3Value other) {
      if (other == null) {
        return;
      }
      if (other.x_ != null) {
        if (x_ == null || other.X != 0D) {
          X = other.X;
        }
      }
      if (other.y_ != null) {
        if (y_ == null || other.Y != 0D) {
          Y = other.Y;
        }
      }
      if (other.z_ != null) {
        if (z_ == null || other.Z != 0D) {
          Z = other.Z;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_x_codec.Read(input);
            if (x_ == null || value != 0D) {
              X = value;
            }
            break;
          }
          case 18: {
            double? value = _single_y_codec.Read(input);
            if (y_ == null || value != 0D) {
              Y = value;
            }
            break;
          }
          case 26: {
            double? value = _single_z_codec.Read(input);
            if (z_ == null || value != 0D) {
              Z = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
