// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/local_grid.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/local_grid.proto</summary>
  public static partial class LocalGridReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/local_grid.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalGridReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90b3MvbG9jYWxfZ3JpZC5wcm90bxIKYm9zZHluLmFwaRoVUHJvdG9z",
            "L2dlb21ldHJ5LnByb3RvGhNQcm90b3MvaGVhZGVyLnByb3RvGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvIh0KDUxvY2FsR3JpZFR5cGUSDAoE",
            "bmFtZRgBIAEoCSIwChBMb2NhbEdyaWRSZXF1ZXN0EhwKFGxvY2FsX2dyaWRf",
            "dHlwZV9uYW1lGAEgASgJIlQKD0xvY2FsR3JpZEV4dGVudBIRCgljZWxsX3Np",
            "emUYAiABKAESEwoLbnVtX2NlbGxzX3gYAyABKAUSEwoLbnVtX2NlbGxzX3kY",
            "BCABKAVKBAgBEAIiqAUKCUxvY2FsR3JpZBIcChRsb2NhbF9ncmlkX3R5cGVf",
            "bmFtZRgBIAEoCRI0ChBhY3F1aXNpdGlvbl90aW1lGB4gASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBI6ChN0cmFuc2Zvcm1zX3NuYXBzaG90GB8g",
            "ASgLMh0uYm9zZHluLmFwaS5GcmFtZVRyZWVTbmFwc2hvdBIiChpmcmFtZV9u",
            "YW1lX2xvY2FsX2dyaWRfZGF0YRgLIAEoCRIrCgZleHRlbnQYAyABKAsyGy5i",
            "b3NkeW4uYXBpLkxvY2FsR3JpZEV4dGVudBI1CgtjZWxsX2Zvcm1hdBgEIAEo",
            "DjIgLmJvc2R5bi5hcGkuTG9jYWxHcmlkLkNlbGxGb3JtYXQSMAoIZW5jb2Rp",
            "bmcYBSABKA4yHi5ib3NkeW4uYXBpLkxvY2FsR3JpZC5FbmNvZGluZxIMCgRk",
            "YXRhGAYgASgMEhIKCnJsZV9jb3VudHMYByADKAUSGAoQY2VsbF92YWx1ZV9z",
            "Y2FsZRgIIAEoARIZChFjZWxsX3ZhbHVlX29mZnNldBgJIAEoASKzAQoKQ2Vs",
            "bEZvcm1hdBIXChNDRUxMX0ZPUk1BVF9VTktOT1dOEAASFwoTQ0VMTF9GT1JN",
            "QVRfRkxPQVQzMhABEhcKE0NFTExfRk9STUFUX0ZMT0FUNjQQAhIUChBDRUxM",
            "X0ZPUk1BVF9JTlQ4EAMSFQoRQ0VMTF9GT1JNQVRfVUlOVDgQBBIVChFDRUxM",
            "X0ZPUk1BVF9JTlQxNhAFEhYKEkNFTExfRk9STUFUX1VJTlQxNhAGIkQKCEVu",
            "Y29kaW5nEhQKEEVOQ09ESU5HX1VOS05PV04QABIQCgxFTkNPRElOR19SQVcQ",
            "ARIQCgxFTkNPRElOR19STEUQAiKOAgoRTG9jYWxHcmlkUmVzcG9uc2USHAoU",
            "bG9jYWxfZ3JpZF90eXBlX25hbWUYASABKAkSNAoGc3RhdHVzGAIgASgOMiQu",
            "Ym9zZHluLmFwaS5Mb2NhbEdyaWRSZXNwb25zZS5TdGF0dXMSKQoKbG9jYWxf",
            "Z3JpZBgDIAEoCzIVLmJvc2R5bi5hcGkuTG9jYWxHcmlkInoKBlN0YXR1cxIS",
            "Cg5TVEFUVVNfVU5LTk9XThAAEg0KCVNUQVRVU19PSxABEhcKE1NUQVRVU19O",
            "T19TVUNIX0dSSUQQAhIbChdTVEFUVVNfREFUQV9VTkFWQUlMQUJMRRADEhcK",
            "E1NUQVRVU19EQVRBX0lOVkFMSUQQBCJFChhHZXRMb2NhbEdyaWRUeXBlc1Jl",
            "cXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVh",
            "ZGVyInsKGUdldExvY2FsR3JpZFR5cGVzUmVzcG9uc2USKgoGaGVhZGVyGAEg",
            "ASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlchIyCg9sb2NhbF9ncmlk",
            "X3R5cGUYAiADKAsyGS5ib3NkeW4uYXBpLkxvY2FsR3JpZFR5cGUifAoUR2V0",
            "TG9jYWxHcmlkc1JlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFw",
            "aS5SZXF1ZXN0SGVhZGVyEjkKE2xvY2FsX2dyaWRfcmVxdWVzdHMYAiADKAsy",
            "HC5ib3NkeW4uYXBpLkxvY2FsR3JpZFJlcXVlc3QinwEKFUdldExvY2FsR3Jp",
            "ZHNSZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3Bv",
            "bnNlSGVhZGVyEjsKFGxvY2FsX2dyaWRfcmVzcG9uc2VzGAIgAygLMh0uYm9z",
            "ZHluLmFwaS5Mb2NhbEdyaWRSZXNwb25zZRIdChVudW1fbG9jYWxfZ3JpZF9l",
            "cnJvcnMYAyABKAVCEEIOTG9jYWxHcmlkUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LocalGridType), global::Bosdyn.Api.LocalGridType.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LocalGridRequest), global::Bosdyn.Api.LocalGridRequest.Parser, new[]{ "LocalGridTypeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LocalGridExtent), global::Bosdyn.Api.LocalGridExtent.Parser, new[]{ "CellSize", "NumCellsX", "NumCellsY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LocalGrid), global::Bosdyn.Api.LocalGrid.Parser, new[]{ "LocalGridTypeName", "AcquisitionTime", "TransformsSnapshot", "FrameNameLocalGridData", "Extent", "CellFormat", "Encoding", "Data", "RleCounts", "CellValueScale", "CellValueOffset" }, null, new[]{ typeof(global::Bosdyn.Api.LocalGrid.Types.CellFormat), typeof(global::Bosdyn.Api.LocalGrid.Types.Encoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LocalGridResponse), global::Bosdyn.Api.LocalGridResponse.Parser, new[]{ "LocalGridTypeName", "Status", "LocalGrid" }, null, new[]{ typeof(global::Bosdyn.Api.LocalGridResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLocalGridTypesRequest), global::Bosdyn.Api.GetLocalGridTypesRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLocalGridTypesResponse), global::Bosdyn.Api.GetLocalGridTypesResponse.Parser, new[]{ "Header", "LocalGridType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLocalGridsRequest), global::Bosdyn.Api.GetLocalGridsRequest.Parser, new[]{ "Header", "LocalGridRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLocalGridsResponse), global::Bosdyn.Api.GetLocalGridsResponse.Parser, new[]{ "Header", "LocalGridResponses", "NumLocalGridErrors" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Representation of an available type of local grid.
  /// </summary>
  public sealed partial class LocalGridType : pb::IMessage<LocalGridType> {
    private static readonly pb::MessageParser<LocalGridType> _parser = new pb::MessageParser<LocalGridType>(() => new LocalGridType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalGridType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridType(LocalGridType other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridType Clone() {
      return new LocalGridType(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalGridType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalGridType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalGridType other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// LocalGrids are requested by LocalGridType string name.
  /// </summary>
  public sealed partial class LocalGridRequest : pb::IMessage<LocalGridRequest> {
    private static readonly pb::MessageParser<LocalGridRequest> _parser = new pb::MessageParser<LocalGridRequest>(() => new LocalGridRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalGridRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridRequest(LocalGridRequest other) : this() {
      localGridTypeName_ = other.localGridTypeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridRequest Clone() {
      return new LocalGridRequest(this);
    }

    /// <summary>Field number for the "local_grid_type_name" field.</summary>
    public const int LocalGridTypeNameFieldNumber = 1;
    private string localGridTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalGridTypeName {
      get { return localGridTypeName_; }
      set {
        localGridTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalGridRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalGridRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalGridTypeName != other.LocalGridTypeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalGridTypeName.Length != 0) hash ^= LocalGridTypeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalGridTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalGridTypeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalGridTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalGridTypeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalGridRequest other) {
      if (other == null) {
        return;
      }
      if (other.LocalGridTypeName.Length != 0) {
        LocalGridTypeName = other.LocalGridTypeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalGridTypeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information about the dimensions of the local grid, including the number of grid cells and
  /// the size of each cell.
  /// </summary>
  public sealed partial class LocalGridExtent : pb::IMessage<LocalGridExtent> {
    private static readonly pb::MessageParser<LocalGridExtent> _parser = new pb::MessageParser<LocalGridExtent>(() => new LocalGridExtent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalGridExtent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridExtent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridExtent(LocalGridExtent other) : this() {
      cellSize_ = other.cellSize_;
      numCellsX_ = other.numCellsX_;
      numCellsY_ = other.numCellsY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridExtent Clone() {
      return new LocalGridExtent(this);
    }

    /// <summary>Field number for the "cell_size" field.</summary>
    public const int CellSizeFieldNumber = 2;
    private double cellSize_;
    /// <summary>
    /// Size of each side of the individual cells in the local grid (in meters).
    /// The area of a grid cell will be (cell_size x cell_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CellSize {
      get { return cellSize_; }
      set {
        cellSize_ = value;
      }
    }

    /// <summary>Field number for the "num_cells_x" field.</summary>
    public const int NumCellsXFieldNumber = 3;
    private int numCellsX_;
    /// <summary>
    /// Number of cells along x extent of local grid (number of columns in local grid/ the local
    /// grid width). Note, that the (num_cells_x)x(num_cells_y) represents the total number of grid
    /// cells in the local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumCellsX {
      get { return numCellsX_; }
      set {
        numCellsX_ = value;
      }
    }

    /// <summary>Field number for the "num_cells_y" field.</summary>
    public const int NumCellsYFieldNumber = 4;
    private int numCellsY_;
    /// <summary>
    /// Number of cells along y extent of local grid (number of rows in local grid).
    /// Note, that the (num_cells_x)x(num_cells_y) represents the totla number of grid
    /// cells in the local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumCellsY {
      get { return numCellsY_; }
      set {
        numCellsY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalGridExtent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalGridExtent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CellSize, other.CellSize)) return false;
      if (NumCellsX != other.NumCellsX) return false;
      if (NumCellsY != other.NumCellsY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CellSize);
      if (NumCellsX != 0) hash ^= NumCellsX.GetHashCode();
      if (NumCellsY != 0) hash ^= NumCellsY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CellSize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CellSize);
      }
      if (NumCellsX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumCellsX);
      }
      if (NumCellsY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumCellsY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellSize != 0D) {
        size += 1 + 8;
      }
      if (NumCellsX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumCellsX);
      }
      if (NumCellsY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumCellsY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalGridExtent other) {
      if (other == null) {
        return;
      }
      if (other.CellSize != 0D) {
        CellSize = other.CellSize;
      }
      if (other.NumCellsX != 0) {
        NumCellsX = other.NumCellsX;
      }
      if (other.NumCellsY != 0) {
        NumCellsY = other.NumCellsY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 17: {
            CellSize = input.ReadDouble();
            break;
          }
          case 24: {
            NumCellsX = input.ReadInt32();
            break;
          }
          case 32: {
            NumCellsY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A grid-based local grid structure, which can represent different kinds of data, such as terrain
  /// or obstacle data.
  /// </summary>
  public sealed partial class LocalGrid : pb::IMessage<LocalGrid> {
    private static readonly pb::MessageParser<LocalGrid> _parser = new pb::MessageParser<LocalGrid>(() => new LocalGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGrid(LocalGrid other) : this() {
      localGridTypeName_ = other.localGridTypeName_;
      acquisitionTime_ = other.acquisitionTime_ != null ? other.acquisitionTime_.Clone() : null;
      transformsSnapshot_ = other.transformsSnapshot_ != null ? other.transformsSnapshot_.Clone() : null;
      frameNameLocalGridData_ = other.frameNameLocalGridData_;
      extent_ = other.extent_ != null ? other.extent_.Clone() : null;
      cellFormat_ = other.cellFormat_;
      encoding_ = other.encoding_;
      data_ = other.data_;
      rleCounts_ = other.rleCounts_.Clone();
      cellValueScale_ = other.cellValueScale_;
      cellValueOffset_ = other.cellValueOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGrid Clone() {
      return new LocalGrid(this);
    }

    /// <summary>Field number for the "local_grid_type_name" field.</summary>
    public const int LocalGridTypeNameFieldNumber = 1;
    private string localGridTypeName_ = "";
    /// <summary>
    /// The human readable string name that is used to identify the type of local grid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalGridTypeName {
      get { return localGridTypeName_; }
      set {
        localGridTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acquisition_time" field.</summary>
    public const int AcquisitionTimeFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp acquisitionTime_;
    /// <summary>
    /// The time at which the local grid data was computed and last valid at.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AcquisitionTime {
      get { return acquisitionTime_; }
      set {
        acquisitionTime_ = value;
      }
    }

    /// <summary>Field number for the "transforms_snapshot" field.</summary>
    public const int TransformsSnapshotFieldNumber = 31;
    private global::Bosdyn.Api.FrameTreeSnapshot transformsSnapshot_;
    /// <summary>
    /// A tree-based collection of transformations, which will include the transformations to each of
    /// the returned local grids in addition to transformations to the common frames ("vision", "body", "odom").
    /// All transforms within the snapshot are at the acquistion time of the local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FrameTreeSnapshot TransformsSnapshot {
      get { return transformsSnapshot_; }
      set {
        transformsSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_local_grid_data" field.</summary>
    public const int FrameNameLocalGridDataFieldNumber = 11;
    private string frameNameLocalGridData_ = "";
    /// <summary>
    /// The frame name for the local grid data. This frame refers to the corner of cell (0, 0), such that
    /// the map data is in the +x, +y quadrant.
    /// The cell data is packed in x-y order, so the cell at:
    ///   data[xi + extent.num_cells_x * yj]
    /// has its center at position:
    ///   {(xi + 0.5) * extent.cell_size, (yj + 0.5) * extent.cell_size}.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameLocalGridData {
      get { return frameNameLocalGridData_; }
      set {
        frameNameLocalGridData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extent" field.</summary>
    public const int ExtentFieldNumber = 3;
    private global::Bosdyn.Api.LocalGridExtent extent_;
    /// <summary>
    /// Location, size and resolution of the local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LocalGridExtent Extent {
      get { return extent_; }
      set {
        extent_ = value;
      }
    }

    /// <summary>Field number for the "cell_format" field.</summary>
    public const int CellFormatFieldNumber = 4;
    private global::Bosdyn.Api.LocalGrid.Types.CellFormat cellFormat_ = 0;
    /// <summary>
    /// The data type of all individual cells in the local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LocalGrid.Types.CellFormat CellFormat {
      get { return cellFormat_; }
      set {
        cellFormat_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 5;
    private global::Bosdyn.Api.LocalGrid.Types.Encoding encoding_ = 0;
    /// <summary>
    /// The encoding for the 'data' field of the local grid message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LocalGrid.Types.Encoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// The encoded local grid representation.
    /// Cells are encoded according to the encoding enum, and are stored in in row-major order (x-major).
    /// This means that the data field has data entered row by row. The grid cell located at (i, j) will be
    /// at the (index = i * num_cells_x + j) within the data array.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rle_counts" field.</summary>
    public const int RleCountsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_rleCounts_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> rleCounts_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// RLE pixel repetition counts: use data[i] repeated rle_counts[i] times when decoding the
    /// bytes data field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RleCounts {
      get { return rleCounts_; }
    }

    /// <summary>Field number for the "cell_value_scale" field.</summary>
    public const int CellValueScaleFieldNumber = 8;
    private double cellValueScale_;
    /// <summary>
    /// The scale for the cell value data; only valid if it is a non-zero number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CellValueScale {
      get { return cellValueScale_; }
      set {
        cellValueScale_ = value;
      }
    }

    /// <summary>Field number for the "cell_value_offset" field.</summary>
    public const int CellValueOffsetFieldNumber = 9;
    private double cellValueOffset_;
    /// <summary>
    /// A fixed value offset that is applied to each value of the cell data.
    /// Actual values in local grid are: (({value from data} * cell_value_scale) + cell_value_offset).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CellValueOffset {
      get { return cellValueOffset_; }
      set {
        cellValueOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalGridTypeName != other.LocalGridTypeName) return false;
      if (!object.Equals(AcquisitionTime, other.AcquisitionTime)) return false;
      if (!object.Equals(TransformsSnapshot, other.TransformsSnapshot)) return false;
      if (FrameNameLocalGridData != other.FrameNameLocalGridData) return false;
      if (!object.Equals(Extent, other.Extent)) return false;
      if (CellFormat != other.CellFormat) return false;
      if (Encoding != other.Encoding) return false;
      if (Data != other.Data) return false;
      if(!rleCounts_.Equals(other.rleCounts_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CellValueScale, other.CellValueScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CellValueOffset, other.CellValueOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalGridTypeName.Length != 0) hash ^= LocalGridTypeName.GetHashCode();
      if (acquisitionTime_ != null) hash ^= AcquisitionTime.GetHashCode();
      if (transformsSnapshot_ != null) hash ^= TransformsSnapshot.GetHashCode();
      if (FrameNameLocalGridData.Length != 0) hash ^= FrameNameLocalGridData.GetHashCode();
      if (extent_ != null) hash ^= Extent.GetHashCode();
      if (CellFormat != 0) hash ^= CellFormat.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= rleCounts_.GetHashCode();
      if (CellValueScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CellValueScale);
      if (CellValueOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CellValueOffset);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalGridTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalGridTypeName);
      }
      if (extent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Extent);
      }
      if (CellFormat != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CellFormat);
      }
      if (Encoding != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Encoding);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      rleCounts_.WriteTo(output, _repeated_rleCounts_codec);
      if (CellValueScale != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CellValueScale);
      }
      if (CellValueOffset != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CellValueOffset);
      }
      if (FrameNameLocalGridData.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FrameNameLocalGridData);
      }
      if (acquisitionTime_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransformsSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalGridTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalGridTypeName);
      }
      if (acquisitionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformsSnapshot);
      }
      if (FrameNameLocalGridData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameLocalGridData);
      }
      if (extent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extent);
      }
      if (CellFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CellFormat);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += rleCounts_.CalculateSize(_repeated_rleCounts_codec);
      if (CellValueScale != 0D) {
        size += 1 + 8;
      }
      if (CellValueOffset != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalGrid other) {
      if (other == null) {
        return;
      }
      if (other.LocalGridTypeName.Length != 0) {
        LocalGridTypeName = other.LocalGridTypeName;
      }
      if (other.acquisitionTime_ != null) {
        if (acquisitionTime_ == null) {
          AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AcquisitionTime.MergeFrom(other.AcquisitionTime);
      }
      if (other.transformsSnapshot_ != null) {
        if (transformsSnapshot_ == null) {
          TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
        }
        TransformsSnapshot.MergeFrom(other.TransformsSnapshot);
      }
      if (other.FrameNameLocalGridData.Length != 0) {
        FrameNameLocalGridData = other.FrameNameLocalGridData;
      }
      if (other.extent_ != null) {
        if (extent_ == null) {
          Extent = new global::Bosdyn.Api.LocalGridExtent();
        }
        Extent.MergeFrom(other.Extent);
      }
      if (other.CellFormat != 0) {
        CellFormat = other.CellFormat;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      rleCounts_.Add(other.rleCounts_);
      if (other.CellValueScale != 0D) {
        CellValueScale = other.CellValueScale;
      }
      if (other.CellValueOffset != 0D) {
        CellValueOffset = other.CellValueOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalGridTypeName = input.ReadString();
            break;
          }
          case 26: {
            if (extent_ == null) {
              Extent = new global::Bosdyn.Api.LocalGridExtent();
            }
            input.ReadMessage(Extent);
            break;
          }
          case 32: {
            CellFormat = (global::Bosdyn.Api.LocalGrid.Types.CellFormat) input.ReadEnum();
            break;
          }
          case 40: {
            Encoding = (global::Bosdyn.Api.LocalGrid.Types.Encoding) input.ReadEnum();
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
          case 58:
          case 56: {
            rleCounts_.AddEntriesFrom(input, _repeated_rleCounts_codec);
            break;
          }
          case 65: {
            CellValueScale = input.ReadDouble();
            break;
          }
          case 73: {
            CellValueOffset = input.ReadDouble();
            break;
          }
          case 90: {
            FrameNameLocalGridData = input.ReadString();
            break;
          }
          case 242: {
            if (acquisitionTime_ == null) {
              AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AcquisitionTime);
            break;
          }
          case 250: {
            if (transformsSnapshot_ == null) {
              TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
            }
            input.ReadMessage(TransformsSnapshot);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LocalGrid message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Describes the data type of a cell.
      /// </summary>
      public enum CellFormat {
        /// <summary>
        /// Not specified -- not a valid value.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Each cell of the local grid is encoded as a little-endian 32-bit floating point number.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_FLOAT32")] Float32 = 1,
        /// <summary>
        /// Each cell of the local grid is encoded as a little-endian 64-bit floating point number.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_FLOAT64")] Float64 = 2,
        /// <summary>
        /// Each cell of the local grid is encoded as a signed 8-bit integer.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_INT8")] Int8 = 3,
        /// <summary>
        /// Each cell of the local grid is encoded as an unsigned 8-bit integer.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_UINT8")] Uint8 = 4,
        /// <summary>
        /// Each cell of the local grid is encoded as a little-endian signed 16-bit integer.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_INT16")] Int16 = 5,
        /// <summary>
        /// Each cell of the local grid is encoded as a little-endian unsigned 16-bit integer.
        /// </summary>
        [pbr::OriginalName("CELL_FORMAT_UINT16")] Uint16 = 6,
      }

      /// <summary>
      /// Encoding used for storing the local grid.
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// Not specified -- not a valid value.
        /// </summary>
        [pbr::OriginalName("ENCODING_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cells are stored packed uncompressed.
        /// </summary>
        [pbr::OriginalName("ENCODING_RAW")] Raw = 1,
        /// <summary>
        /// Run-length encoding: repeat counts stored in rle_counts.
        /// </summary>
        [pbr::OriginalName("ENCODING_RLE")] Rle = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The local grid response message will contain either the local grid or an error status.
  /// </summary>
  public sealed partial class LocalGridResponse : pb::IMessage<LocalGridResponse> {
    private static readonly pb::MessageParser<LocalGridResponse> _parser = new pb::MessageParser<LocalGridResponse>(() => new LocalGridResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalGridResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridResponse(LocalGridResponse other) : this() {
      localGridTypeName_ = other.localGridTypeName_;
      status_ = other.status_;
      localGrid_ = other.localGrid_ != null ? other.localGrid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalGridResponse Clone() {
      return new LocalGridResponse(this);
    }

    /// <summary>Field number for the "local_grid_type_name" field.</summary>
    public const int LocalGridTypeNameFieldNumber = 1;
    private string localGridTypeName_ = "";
    /// <summary>
    /// The type name of the local grid included in this response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalGridTypeName {
      get { return localGridTypeName_; }
      set {
        localGridTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.LocalGridResponse.Types.Status status_ = 0;
    /// <summary>
    /// Status of the request for the individual local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LocalGridResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "local_grid" field.</summary>
    public const int LocalGridFieldNumber = 3;
    private global::Bosdyn.Api.LocalGrid localGrid_;
    /// <summary>
    /// The requested local grid data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LocalGrid LocalGrid {
      get { return localGrid_; }
      set {
        localGrid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalGridResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalGridResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalGridTypeName != other.LocalGridTypeName) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LocalGrid, other.LocalGrid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalGridTypeName.Length != 0) hash ^= LocalGridTypeName.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (localGrid_ != null) hash ^= LocalGrid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalGridTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalGridTypeName);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (localGrid_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalGrid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalGridTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalGridTypeName);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (localGrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalGrid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalGridResponse other) {
      if (other == null) {
        return;
      }
      if (other.LocalGridTypeName.Length != 0) {
        LocalGridTypeName = other.LocalGridTypeName;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.localGrid_ != null) {
        if (localGrid_ == null) {
          LocalGrid = new global::Bosdyn.Api.LocalGrid();
        }
        LocalGrid.MergeFrom(other.LocalGrid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalGridTypeName = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.LocalGridResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (localGrid_ == null) {
              LocalGrid = new global::Bosdyn.Api.LocalGrid();
            }
            input.ReadMessage(LocalGrid);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LocalGridResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// Not specified -- not a valid value.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// LocalGrid was returned successfully.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// The requested local grid-type is unknown.
        /// </summary>
        [pbr::OriginalName("STATUS_NO_SUCH_GRID")] NoSuchGrid = 2,
        /// <summary>
        /// The request local grid data is not available at this time.
        /// </summary>
        [pbr::OriginalName("STATUS_DATA_UNAVAILABLE")] DataUnavailable = 3,
        /// <summary>
        /// The local grid data was not valid for some reason.
        /// </summary>
        [pbr::OriginalName("STATUS_DATA_INVALID")] DataInvalid = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The GetLocalGridTypes request message asks to the local grid types.
  /// </summary>
  public sealed partial class GetLocalGridTypesRequest : pb::IMessage<GetLocalGridTypesRequest> {
    private static readonly pb::MessageParser<GetLocalGridTypesRequest> _parser = new pb::MessageParser<GetLocalGridTypesRequest>(() => new GetLocalGridTypesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocalGridTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesRequest(GetLocalGridTypesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesRequest Clone() {
      return new GetLocalGridTypesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocalGridTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocalGridTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocalGridTypesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetLocalGridTypes response message returns to get all known string names for local grid types.
  /// </summary>
  public sealed partial class GetLocalGridTypesResponse : pb::IMessage<GetLocalGridTypesResponse> {
    private static readonly pb::MessageParser<GetLocalGridTypesResponse> _parser = new pb::MessageParser<GetLocalGridTypesResponse>(() => new GetLocalGridTypesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocalGridTypesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesResponse(GetLocalGridTypesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      localGridType_ = other.localGridType_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridTypesResponse Clone() {
      return new GetLocalGridTypesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "local_grid_type" field.</summary>
    public const int LocalGridTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LocalGridType> _repeated_localGridType_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.LocalGridType.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LocalGridType> localGridType_ = new pbc::RepeatedField<global::Bosdyn.Api.LocalGridType>();
    /// <summary>
    /// The list of available local grid types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LocalGridType> LocalGridType {
      get { return localGridType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocalGridTypesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocalGridTypesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!localGridType_.Equals(other.localGridType_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= localGridType_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      localGridType_.WriteTo(output, _repeated_localGridType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += localGridType_.CalculateSize(_repeated_localGridType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocalGridTypesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      localGridType_.Add(other.localGridType_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            localGridType_.AddEntriesFrom(input, _repeated_localGridType_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetLocalGrid request message can request for multiple different types of local grids at one time.
  /// </summary>
  public sealed partial class GetLocalGridsRequest : pb::IMessage<GetLocalGridsRequest> {
    private static readonly pb::MessageParser<GetLocalGridsRequest> _parser = new pb::MessageParser<GetLocalGridsRequest>(() => new GetLocalGridsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocalGridsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsRequest(GetLocalGridsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      localGridRequests_ = other.localGridRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsRequest Clone() {
      return new GetLocalGridsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "local_grid_requests" field.</summary>
    public const int LocalGridRequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LocalGridRequest> _repeated_localGridRequests_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.LocalGridRequest.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LocalGridRequest> localGridRequests_ = new pbc::RepeatedField<global::Bosdyn.Api.LocalGridRequest>();
    /// <summary>
    /// Specifications of the requested local grids.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LocalGridRequest> LocalGridRequests {
      get { return localGridRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocalGridsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocalGridsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!localGridRequests_.Equals(other.localGridRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= localGridRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      localGridRequests_.WriteTo(output, _repeated_localGridRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += localGridRequests_.CalculateSize(_repeated_localGridRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocalGridsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      localGridRequests_.Add(other.localGridRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            localGridRequests_.AddEntriesFrom(input, _repeated_localGridRequests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetLocalGrid response message replies with all of the local grid data for the requested types, and
  /// a numerical count representing the amount of status errors that occurred when getting this data.
  /// </summary>
  public sealed partial class GetLocalGridsResponse : pb::IMessage<GetLocalGridsResponse> {
    private static readonly pb::MessageParser<GetLocalGridsResponse> _parser = new pb::MessageParser<GetLocalGridsResponse>(() => new GetLocalGridsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocalGridsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LocalGridReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsResponse(GetLocalGridsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      localGridResponses_ = other.localGridResponses_.Clone();
      numLocalGridErrors_ = other.numLocalGridErrors_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocalGridsResponse Clone() {
      return new GetLocalGridsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "local_grid_responses" field.</summary>
    public const int LocalGridResponsesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LocalGridResponse> _repeated_localGridResponses_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.LocalGridResponse.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LocalGridResponse> localGridResponses_ = new pbc::RepeatedField<global::Bosdyn.Api.LocalGridResponse>();
    /// <summary>
    /// Response of local grid or error status for each requested local grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LocalGridResponse> LocalGridResponses {
      get { return localGridResponses_; }
    }

    /// <summary>Field number for the "num_local_grid_errors" field.</summary>
    public const int NumLocalGridErrorsFieldNumber = 3;
    private int numLocalGridErrors_;
    /// <summary>
    /// The number of individual local grids requests which could not be satisfied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumLocalGridErrors {
      get { return numLocalGridErrors_; }
      set {
        numLocalGridErrors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocalGridsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocalGridsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!localGridResponses_.Equals(other.localGridResponses_)) return false;
      if (NumLocalGridErrors != other.NumLocalGridErrors) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= localGridResponses_.GetHashCode();
      if (NumLocalGridErrors != 0) hash ^= NumLocalGridErrors.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      localGridResponses_.WriteTo(output, _repeated_localGridResponses_codec);
      if (NumLocalGridErrors != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumLocalGridErrors);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += localGridResponses_.CalculateSize(_repeated_localGridResponses_codec);
      if (NumLocalGridErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLocalGridErrors);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocalGridsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      localGridResponses_.Add(other.localGridResponses_);
      if (other.NumLocalGridErrors != 0) {
        NumLocalGridErrors = other.NumLocalGridErrors;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            localGridResponses_.AddEntriesFrom(input, _repeated_localGridResponses_codec);
            break;
          }
          case 24: {
            NumLocalGridErrors = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
