// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/manipulation_api_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  public static partial class ManipulationApiService
  {
    static readonly string __ServiceName = "bosdyn.api.ManipulationApiService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.ManipulationApiRequest> __Marshaller_bosdyn_api_ManipulationApiRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ManipulationApiRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ManipulationApiResponse> __Marshaller_bosdyn_api_ManipulationApiResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ManipulationApiResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ManipulationApiFeedbackRequest> __Marshaller_bosdyn_api_ManipulationApiFeedbackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ManipulationApiFeedbackRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ManipulationApiFeedbackResponse> __Marshaller_bosdyn_api_ManipulationApiFeedbackResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ManipulationApiFeedbackResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ApiGraspOverrideRequest> __Marshaller_bosdyn_api_ApiGraspOverrideRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ApiGraspOverrideRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ApiGraspOverrideResponse> __Marshaller_bosdyn_api_ApiGraspOverrideResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ApiGraspOverrideResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.ManipulationApiRequest, global::Bosdyn.Api.ManipulationApiResponse> __Method_ManipulationApi = new grpc::Method<global::Bosdyn.Api.ManipulationApiRequest, global::Bosdyn.Api.ManipulationApiResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ManipulationApi",
        __Marshaller_bosdyn_api_ManipulationApiRequest,
        __Marshaller_bosdyn_api_ManipulationApiResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ManipulationApiFeedbackRequest, global::Bosdyn.Api.ManipulationApiFeedbackResponse> __Method_ManipulationApiFeedback = new grpc::Method<global::Bosdyn.Api.ManipulationApiFeedbackRequest, global::Bosdyn.Api.ManipulationApiFeedbackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ManipulationApiFeedback",
        __Marshaller_bosdyn_api_ManipulationApiFeedbackRequest,
        __Marshaller_bosdyn_api_ManipulationApiFeedbackResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ApiGraspOverrideRequest, global::Bosdyn.Api.ApiGraspOverrideResponse> __Method_OverrideGrasp = new grpc::Method<global::Bosdyn.Api.ApiGraspOverrideRequest, global::Bosdyn.Api.ApiGraspOverrideResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OverrideGrasp",
        __Marshaller_bosdyn_api_ApiGraspOverrideRequest,
        __Marshaller_bosdyn_api_ApiGraspOverrideResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.ManipulationApiServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ManipulationApiService</summary>
    [grpc::BindServiceMethod(typeof(ManipulationApiService), "BindService")]
    public abstract partial class ManipulationApiServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ManipulationApiResponse> ManipulationApi(global::Bosdyn.Api.ManipulationApiRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ManipulationApiFeedbackResponse> ManipulationApiFeedback(global::Bosdyn.Api.ManipulationApiFeedbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ApiGraspOverrideResponse> OverrideGrasp(global::Bosdyn.Api.ApiGraspOverrideRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ManipulationApiService</summary>
    public partial class ManipulationApiServiceClient : grpc::ClientBase<ManipulationApiServiceClient>
    {
      /// <summary>Creates a new client for ManipulationApiService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ManipulationApiServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ManipulationApiService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ManipulationApiServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ManipulationApiServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ManipulationApiServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Bosdyn.Api.ManipulationApiResponse ManipulationApi(global::Bosdyn.Api.ManipulationApiRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ManipulationApi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bosdyn.Api.ManipulationApiResponse ManipulationApi(global::Bosdyn.Api.ManipulationApiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ManipulationApi, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ManipulationApiResponse> ManipulationApiAsync(global::Bosdyn.Api.ManipulationApiRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ManipulationApiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ManipulationApiResponse> ManipulationApiAsync(global::Bosdyn.Api.ManipulationApiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ManipulationApi, null, options, request);
      }
      public virtual global::Bosdyn.Api.ManipulationApiFeedbackResponse ManipulationApiFeedback(global::Bosdyn.Api.ManipulationApiFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ManipulationApiFeedback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bosdyn.Api.ManipulationApiFeedbackResponse ManipulationApiFeedback(global::Bosdyn.Api.ManipulationApiFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ManipulationApiFeedback, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ManipulationApiFeedbackResponse> ManipulationApiFeedbackAsync(global::Bosdyn.Api.ManipulationApiFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ManipulationApiFeedbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ManipulationApiFeedbackResponse> ManipulationApiFeedbackAsync(global::Bosdyn.Api.ManipulationApiFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ManipulationApiFeedback, null, options, request);
      }
      public virtual global::Bosdyn.Api.ApiGraspOverrideResponse OverrideGrasp(global::Bosdyn.Api.ApiGraspOverrideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OverrideGrasp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bosdyn.Api.ApiGraspOverrideResponse OverrideGrasp(global::Bosdyn.Api.ApiGraspOverrideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OverrideGrasp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ApiGraspOverrideResponse> OverrideGraspAsync(global::Bosdyn.Api.ApiGraspOverrideRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OverrideGraspAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ApiGraspOverrideResponse> OverrideGraspAsync(global::Bosdyn.Api.ApiGraspOverrideRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OverrideGrasp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ManipulationApiServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ManipulationApiServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ManipulationApiServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ManipulationApi, serviceImpl.ManipulationApi)
          .AddMethod(__Method_ManipulationApiFeedback, serviceImpl.ManipulationApiFeedback)
          .AddMethod(__Method_OverrideGrasp, serviceImpl.OverrideGrasp).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ManipulationApiServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ManipulationApi, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ManipulationApiRequest, global::Bosdyn.Api.ManipulationApiResponse>(serviceImpl.ManipulationApi));
      serviceBinder.AddMethod(__Method_ManipulationApiFeedback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ManipulationApiFeedbackRequest, global::Bosdyn.Api.ManipulationApiFeedbackResponse>(serviceImpl.ManipulationApiFeedback));
      serviceBinder.AddMethod(__Method_OverrideGrasp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ApiGraspOverrideRequest, global::Bosdyn.Api.ApiGraspOverrideResponse>(serviceImpl.OverrideGrasp));
    }

  }
}
#endregion
