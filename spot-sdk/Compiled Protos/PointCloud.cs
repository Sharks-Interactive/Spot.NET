// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/point_cloud.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/point_cloud.proto</summary>
  public static partial class PointCloudReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/point_cloud.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PointCloudReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvcG9pbnRfY2xvdWQucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rv",
            "cy9oZWFkZXIucHJvdG8aFVByb3Rvcy9nZW9tZXRyeS5wcm90bxofZ29vZ2xl",
            "L3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKzAQoQUG9pbnRDbG91ZFNvdXJj",
            "ZRIMCgRuYW1lGAEgASgJEhkKEWZyYW1lX25hbWVfc2Vuc29yGAMgASgJEjQK",
            "EGFjcXVpc2l0aW9uX3RpbWUYHiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEjoKE3RyYW5zZm9ybXNfc25hcHNob3QYHyABKAsyHS5ib3NkeW4u",
            "YXBpLkZyYW1lVHJlZVNuYXBzaG90SgQIAhADItYDCgpQb2ludENsb3VkEiwK",
            "BnNvdXJjZRgBIAEoCzIcLmJvc2R5bi5hcGkuUG9pbnRDbG91ZFNvdXJjZRIS",
            "CgpudW1fcG9pbnRzGAIgASgFEjEKCGVuY29kaW5nGAMgASgOMh8uYm9zZHlu",
            "LmFwaS5Qb2ludENsb3VkLkVuY29kaW5nEkYKE2VuY29kaW5nX3BhcmFtZXRl",
            "cnMYBCABKAsyKS5ib3NkeW4uYXBpLlBvaW50Q2xvdWQuRW5jb2RpbmdQYXJh",
            "bWV0ZXJzEgwKBGRhdGEYBSABKAwajAEKEkVuY29kaW5nUGFyYW1ldGVycxIU",
            "CgxzY2FsZV9mYWN0b3IYASABKAUSDQoFbWF4X3gYAiABKAESDQoFbWF4X3kY",
            "AyABKAESDQoFbWF4X3oYBCABKAESGgoScmVtYXBwaW5nX2NvbnN0YW50GAUg",
            "ASgBEhcKD2J5dGVzX3Blcl9wb2ludBgGIAEoBSJiCghFbmNvZGluZxIUChBF",
            "TkNPRElOR19VTktOT1dOEAASFAoQRU5DT0RJTkdfWFlaXzMyRhABEhQKEEVO",
            "Q09ESU5HX1hZWl80U0MQAhIUChBFTkNPRElOR19YWVpfNVNDEANKBAgIEAlK",
            "BAgJEAoiSQocTGlzdFBvaW50Q2xvdWRTb3VyY2VzUmVxdWVzdBIpCgZoZWFk",
            "ZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVlc3RIZWFkZXIihgEKHUxpc3RQ",
            "b2ludENsb3VkU291cmNlc1Jlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJv",
            "c2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISOQoTcG9pbnRfY2xvdWRfc291cmNl",
            "cxgCIAMoCzIcLmJvc2R5bi5hcGkuUG9pbnRDbG91ZFNvdXJjZSI0ChFQb2lu",
            "dENsb3VkUmVxdWVzdBIfChdwb2ludF9jbG91ZF9zb3VyY2VfbmFtZRgBIAEo",
            "CSJ+ChRHZXRQb2ludENsb3VkUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5i",
            "b3NkeW4uYXBpLlJlcXVlc3RIZWFkZXISOwoUcG9pbnRfY2xvdWRfcmVxdWVz",
            "dHMYAiADKAsyHS5ib3NkeW4uYXBpLlBvaW50Q2xvdWRSZXF1ZXN0IoICChJQ",
            "b2ludENsb3VkUmVzcG9uc2USNQoGc3RhdHVzGAEgASgOMiUuYm9zZHluLmFw",
            "aS5Qb2ludENsb3VkUmVzcG9uc2UuU3RhdHVzEisKC3BvaW50X2Nsb3VkGAIg",
            "ASgLMhYuYm9zZHluLmFwaS5Qb2ludENsb3VkIocBCgZTdGF0dXMSEgoOU1RB",
            "VFVTX1VOS05PV04QABINCglTVEFUVVNfT0sQARIcChhTVEFUVVNfU09VUkNF",
            "X0RBVEFfRVJST1IQAhIhCh1TVEFUVVNfUE9JTlRfQ0xPVURfREFUQV9FUlJP",
            "UhADEhkKFVNUQVRVU19VTktOT1dOX1NPVVJDRRAEIoIBChVHZXRQb2ludENs",
            "b3VkUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNw",
            "b25zZUhlYWRlchI9ChVwb2ludF9jbG91ZF9yZXNwb25zZXMYBCADKAsyHi5i",
            "b3NkeW4uYXBpLlBvaW50Q2xvdWRSZXNwb25zZUIRQg9Qb2ludENsb3VkUHJv",
            "dG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PointCloudSource), global::Bosdyn.Api.PointCloudSource.Parser, new[]{ "Name", "FrameNameSensor", "AcquisitionTime", "TransformsSnapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PointCloud), global::Bosdyn.Api.PointCloud.Parser, new[]{ "Source", "NumPoints", "Encoding", "EncodingParameters", "Data" }, null, new[]{ typeof(global::Bosdyn.Api.PointCloud.Types.Encoding) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PointCloud.Types.EncodingParameters), global::Bosdyn.Api.PointCloud.Types.EncodingParameters.Parser, new[]{ "ScaleFactor", "MaxX", "MaxY", "MaxZ", "RemappingConstant", "BytesPerPoint" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListPointCloudSourcesRequest), global::Bosdyn.Api.ListPointCloudSourcesRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListPointCloudSourcesResponse), global::Bosdyn.Api.ListPointCloudSourcesResponse.Parser, new[]{ "Header", "PointCloudSources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PointCloudRequest), global::Bosdyn.Api.PointCloudRequest.Parser, new[]{ "PointCloudSourceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetPointCloudRequest), global::Bosdyn.Api.GetPointCloudRequest.Parser, new[]{ "Header", "PointCloudRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PointCloudResponse), global::Bosdyn.Api.PointCloudResponse.Parser, new[]{ "Status", "PointCloud" }, null, new[]{ typeof(global::Bosdyn.Api.PointCloudResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetPointCloudResponse), global::Bosdyn.Api.GetPointCloudResponse.Parser, new[]{ "Header", "PointCloudResponses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Information about a sensor or process that produces point clouds.
  /// </summary>
  public sealed partial class PointCloudSource : pb::IMessage<PointCloudSource> {
    private static readonly pb::MessageParser<PointCloudSource> _parser = new pb::MessageParser<PointCloudSource>(() => new PointCloudSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloudSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudSource(PointCloudSource other) : this() {
      name_ = other.name_;
      frameNameSensor_ = other.frameNameSensor_;
      acquisitionTime_ = other.acquisitionTime_ != null ? other.acquisitionTime_.Clone() : null;
      transformsSnapshot_ = other.transformsSnapshot_ != null ? other.transformsSnapshot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudSource Clone() {
      return new PointCloudSource(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the point cloud source. This is intended to be unique accross all point cloud sources,
    /// and should be human readable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_name_sensor" field.</summary>
    public const int FrameNameSensorFieldNumber = 3;
    private string frameNameSensor_ = "";
    /// <summary>
    /// The frame name of the sensor. The transformation from vision_tform_sensor can be computed
    /// by traversing the tree in the FrameTreeSnapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameSensor {
      get { return frameNameSensor_; }
      set {
        frameNameSensor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acquisition_time" field.</summary>
    public const int AcquisitionTimeFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp acquisitionTime_;
    /// <summary>
    /// Time that the data was produced on the sensor in the robot's clock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AcquisitionTime {
      get { return acquisitionTime_; }
      set {
        acquisitionTime_ = value;
      }
    }

    /// <summary>Field number for the "transforms_snapshot" field.</summary>
    public const int TransformsSnapshotFieldNumber = 31;
    private global::Bosdyn.Api.FrameTreeSnapshot transformsSnapshot_;
    /// <summary>
    /// A tree-based collection of transformations, which will include the transformations
    /// to the point cloud data frame and the point cloud sensor frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FrameTreeSnapshot TransformsSnapshot {
      get { return transformsSnapshot_; }
      set {
        transformsSnapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloudSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloudSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (FrameNameSensor != other.FrameNameSensor) return false;
      if (!object.Equals(AcquisitionTime, other.AcquisitionTime)) return false;
      if (!object.Equals(TransformsSnapshot, other.TransformsSnapshot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FrameNameSensor.Length != 0) hash ^= FrameNameSensor.GetHashCode();
      if (acquisitionTime_ != null) hash ^= AcquisitionTime.GetHashCode();
      if (transformsSnapshot_ != null) hash ^= TransformsSnapshot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (FrameNameSensor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrameNameSensor);
      }
      if (acquisitionTime_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransformsSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FrameNameSensor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameSensor);
      }
      if (acquisitionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformsSnapshot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloudSource other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FrameNameSensor.Length != 0) {
        FrameNameSensor = other.FrameNameSensor;
      }
      if (other.acquisitionTime_ != null) {
        if (acquisitionTime_ == null) {
          AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AcquisitionTime.MergeFrom(other.AcquisitionTime);
      }
      if (other.transformsSnapshot_ != null) {
        if (transformsSnapshot_ == null) {
          TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
        }
        TransformsSnapshot.MergeFrom(other.TransformsSnapshot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            FrameNameSensor = input.ReadString();
            break;
          }
          case 242: {
            if (acquisitionTime_ == null) {
              AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AcquisitionTime);
            break;
          }
          case 250: {
            if (transformsSnapshot_ == null) {
              TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
            }
            input.ReadMessage(TransformsSnapshot);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data from a point-cloud producing sensor or process.
  /// </summary>
  public sealed partial class PointCloud : pb::IMessage<PointCloud> {
    private static readonly pb::MessageParser<PointCloud> _parser = new pb::MessageParser<PointCloud>(() => new PointCloud());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloud> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud(PointCloud other) : this() {
      source_ = other.source_ != null ? other.source_.Clone() : null;
      numPoints_ = other.numPoints_;
      encoding_ = other.encoding_;
      encodingParameters_ = other.encodingParameters_ != null ? other.encodingParameters_.Clone() : null;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloud Clone() {
      return new PointCloud(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Bosdyn.Api.PointCloudSource source_;
    /// <summary>
    /// The sensor or process that produced the point cloud.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PointCloudSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "num_points" field.</summary>
    public const int NumPointsFieldNumber = 2;
    private int numPoints_;
    /// <summary>
    /// The number of points in the point cloud.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPoints {
      get { return numPoints_; }
      set {
        numPoints_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 3;
    private global::Bosdyn.Api.PointCloud.Types.Encoding encoding_ = 0;
    /// <summary>
    /// Representation of the underlying point cloud data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PointCloud.Types.Encoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "encoding_parameters" field.</summary>
    public const int EncodingParametersFieldNumber = 4;
    private global::Bosdyn.Api.PointCloud.Types.EncodingParameters encodingParameters_;
    /// <summary>
    /// Constants needed to decode the point cloud.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PointCloud.Types.EncodingParameters EncodingParameters {
      get { return encodingParameters_; }
      set {
        encodingParameters_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Raw byte data representing the points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloud);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloud other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (NumPoints != other.NumPoints) return false;
      if (Encoding != other.Encoding) return false;
      if (!object.Equals(EncodingParameters, other.EncodingParameters)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (NumPoints != 0) hash ^= NumPoints.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (encodingParameters_ != null) hash ^= EncodingParameters.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (NumPoints != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumPoints);
      }
      if (Encoding != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Encoding);
      }
      if (encodingParameters_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EncodingParameters);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (NumPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPoints);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (encodingParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncodingParameters);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloud other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::Bosdyn.Api.PointCloudSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.NumPoints != 0) {
        NumPoints = other.NumPoints;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.encodingParameters_ != null) {
        if (encodingParameters_ == null) {
          EncodingParameters = new global::Bosdyn.Api.PointCloud.Types.EncodingParameters();
        }
        EncodingParameters.MergeFrom(other.EncodingParameters);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (source_ == null) {
              Source = new global::Bosdyn.Api.PointCloudSource();
            }
            input.ReadMessage(Source);
            break;
          }
          case 16: {
            NumPoints = input.ReadInt32();
            break;
          }
          case 24: {
            Encoding = (global::Bosdyn.Api.PointCloud.Types.Encoding) input.ReadEnum();
            break;
          }
          case 34: {
            if (encodingParameters_ == null) {
              EncodingParameters = new global::Bosdyn.Api.PointCloud.Types.EncodingParameters();
            }
            input.ReadMessage(EncodingParameters);
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PointCloud message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Point clouds may be encoded in different ways to preserve bandwidth or disk space.
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// The point cloud has an unknown encoding.
        /// </summary>
        [pbr::OriginalName("ENCODING_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Each point is x,y,z float32 value (12 bytes, little-endian) stored sequentially. This allows
        /// the point cloud to be expressed in any range and resolution represented by floating point
        /// numbers, but the point cloud will be larger than if one of the other encodings is used.
        /// </summary>
        [pbr::OriginalName("ENCODING_XYZ_32F")] Xyz32F = 1,
        /// <summary>
        /// Each point is 3 signed int8s plus an extra shared signed int8s (4 byte).
        /// byte layout: [..., p1_x, p1_y, p1_z, x, ...]
        /// Each coordinate is mapped to a value between -1 and +1 (corresponding to a
        /// minimum and maximum range).
        /// The resulting point is:
        ///   P = remap(p1 * f + p2, c * f, m)
        /// Where:
        ///   p1 = the highest byte in each dimension of the point.
        ///   p2 = a vector of "extra" bytes converted to metric units.
        ///     = [mod (x, f), mod(x/f, f), mod(x/(f^2), f)] - f/2
        ///   x = the "extra" byte for each point.
        ///   f = An integer scale factor.
        ///   m = [max_x, max_y, max_z], the point cloud max bounds in meters.
        ///   c = a remapping constant.
        /// And:
        ///  remap(a, b, c) = (a + b)/(2 * b) - c
        /// Point clouds use 1/3 the memory of XYZ_32F, but have limits on resolution
        /// and range. Points must not lie outside of the box of size [-m, m]. Within that box,
        /// the resolution of the point cloud will depend on the encoding parameters.
        /// For example if m = [10, 10, 10], and f = 5 with c = 127 the resolution is
        /// approximately 1.5 cm per point.
        /// </summary>
        [pbr::OriginalName("ENCODING_XYZ_4SC")] Xyz4Sc = 2,
        /// <summary>
        /// Each point is 3 signed int8s plus two extra shared signed int8s (5 byte).
        /// The encoding is the same as XYZ_4SC, except the "extra" value x is a 16 bit integer.
        /// This encoding has roughly double the resolution of XYZ_4SC, but takes up
        /// an additional byte for each point.
        /// </summary>
        [pbr::OriginalName("ENCODING_XYZ_5SC")] Xyz5Sc = 3,
      }

      /// <summary>
      /// Parameters needed to decode the point cloud.
      /// </summary>
      public sealed partial class EncodingParameters : pb::IMessage<EncodingParameters> {
        private static readonly pb::MessageParser<EncodingParameters> _parser = new pb::MessageParser<EncodingParameters>(() => new EncodingParameters());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncodingParameters> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.PointCloud.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodingParameters() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodingParameters(EncodingParameters other) : this() {
          scaleFactor_ = other.scaleFactor_;
          maxX_ = other.maxX_;
          maxY_ = other.maxY_;
          maxZ_ = other.maxZ_;
          remappingConstant_ = other.remappingConstant_;
          bytesPerPoint_ = other.bytesPerPoint_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncodingParameters Clone() {
          return new EncodingParameters(this);
        }

        /// <summary>Field number for the "scale_factor" field.</summary>
        public const int ScaleFactorFieldNumber = 1;
        private int scaleFactor_;
        /// <summary>
        /// Used in the remapping process from bytes to metric units. (unitless)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ScaleFactor {
          get { return scaleFactor_; }
          set {
            scaleFactor_ = value;
          }
        }

        /// <summary>Field number for the "max_x" field.</summary>
        public const int MaxXFieldNumber = 2;
        private double maxX_;
        /// <summary>
        /// In XYZ_4SC and XYZ_5SC, the point cloud is assumed to lie inside a box
        /// centered in the data frame. max_x, max_y, max_z are half the dimensions
        /// of that box. These dimensions should be assumed to be meters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxX {
          get { return maxX_; }
          set {
            maxX_ = value;
          }
        }

        /// <summary>Field number for the "max_y" field.</summary>
        public const int MaxYFieldNumber = 3;
        private double maxY_;
        /// <summary>
        /// max_y is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
        /// dimensions should be assumed to be meters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxY {
          get { return maxY_; }
          set {
            maxY_ = value;
          }
        }

        /// <summary>Field number for the "max_z" field.</summary>
        public const int MaxZFieldNumber = 4;
        private double maxZ_;
        /// <summary>
        /// max_z is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
        /// dimensions should be assumed to be meters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxZ {
          get { return maxZ_; }
          set {
            maxZ_ = value;
          }
        }

        /// <summary>Field number for the "remapping_constant" field.</summary>
        public const int RemappingConstantFieldNumber = 5;
        private double remappingConstant_;
        /// <summary>
        /// Used in the remapping process from bytes to metric units. (unitless)
        /// For XYZ_4SC and XYZ_5C, this should equal 127.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double RemappingConstant {
          get { return remappingConstant_; }
          set {
            remappingConstant_ = value;
          }
        }

        /// <summary>Field number for the "bytes_per_point" field.</summary>
        public const int BytesPerPointFieldNumber = 6;
        private int bytesPerPoint_;
        /// <summary>
        /// Number of bytes in each point in this encoding.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BytesPerPoint {
          get { return bytesPerPoint_; }
          set {
            bytesPerPoint_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EncodingParameters);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncodingParameters other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ScaleFactor != other.ScaleFactor) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxX, other.MaxX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxY, other.MaxY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxZ, other.MaxZ)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RemappingConstant, other.RemappingConstant)) return false;
          if (BytesPerPoint != other.BytesPerPoint) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ScaleFactor != 0) hash ^= ScaleFactor.GetHashCode();
          if (MaxX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxX);
          if (MaxY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxY);
          if (MaxZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxZ);
          if (RemappingConstant != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RemappingConstant);
          if (BytesPerPoint != 0) hash ^= BytesPerPoint.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ScaleFactor != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ScaleFactor);
          }
          if (MaxX != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MaxX);
          }
          if (MaxY != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MaxY);
          }
          if (MaxZ != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(MaxZ);
          }
          if (RemappingConstant != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(RemappingConstant);
          }
          if (BytesPerPoint != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(BytesPerPoint);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ScaleFactor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScaleFactor);
          }
          if (MaxX != 0D) {
            size += 1 + 8;
          }
          if (MaxY != 0D) {
            size += 1 + 8;
          }
          if (MaxZ != 0D) {
            size += 1 + 8;
          }
          if (RemappingConstant != 0D) {
            size += 1 + 8;
          }
          if (BytesPerPoint != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BytesPerPoint);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncodingParameters other) {
          if (other == null) {
            return;
          }
          if (other.ScaleFactor != 0) {
            ScaleFactor = other.ScaleFactor;
          }
          if (other.MaxX != 0D) {
            MaxX = other.MaxX;
          }
          if (other.MaxY != 0D) {
            MaxY = other.MaxY;
          }
          if (other.MaxZ != 0D) {
            MaxZ = other.MaxZ;
          }
          if (other.RemappingConstant != 0D) {
            RemappingConstant = other.RemappingConstant;
          }
          if (other.BytesPerPoint != 0) {
            BytesPerPoint = other.BytesPerPoint;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ScaleFactor = input.ReadInt32();
                break;
              }
              case 17: {
                MaxX = input.ReadDouble();
                break;
              }
              case 25: {
                MaxY = input.ReadDouble();
                break;
              }
              case 33: {
                MaxZ = input.ReadDouble();
                break;
              }
              case 41: {
                RemappingConstant = input.ReadDouble();
                break;
              }
              case 48: {
                BytesPerPoint = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ListPointCloudSourcesRequest : pb::IMessage<ListPointCloudSourcesRequest> {
    private static readonly pb::MessageParser<ListPointCloudSourcesRequest> _parser = new pb::MessageParser<ListPointCloudSourcesRequest>(() => new ListPointCloudSourcesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPointCloudSourcesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesRequest(ListPointCloudSourcesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesRequest Clone() {
      return new ListPointCloudSourcesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPointCloudSourcesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPointCloudSourcesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPointCloudSourcesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetPointCloud response message which returns any point cloud data associated with that service.
  /// </summary>
  public sealed partial class ListPointCloudSourcesResponse : pb::IMessage<ListPointCloudSourcesResponse> {
    private static readonly pb::MessageParser<ListPointCloudSourcesResponse> _parser = new pb::MessageParser<ListPointCloudSourcesResponse>(() => new ListPointCloudSourcesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPointCloudSourcesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesResponse(ListPointCloudSourcesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      pointCloudSources_ = other.pointCloudSources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPointCloudSourcesResponse Clone() {
      return new ListPointCloudSourcesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response Header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point_cloud_sources" field.</summary>
    public const int PointCloudSourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.PointCloudSource> _repeated_pointCloudSources_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.PointCloudSource.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.PointCloudSource> pointCloudSources_ = new pbc::RepeatedField<global::Bosdyn.Api.PointCloudSource>();
    /// <summary>
    /// The set of PointCloudSources available from this service.
    /// May be empty if the service serves no point clouds (e.g., if no sensors were found on startup).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.PointCloudSource> PointCloudSources {
      get { return pointCloudSources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPointCloudSourcesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPointCloudSourcesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!pointCloudSources_.Equals(other.pointCloudSources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= pointCloudSources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      pointCloudSources_.WriteTo(output, _repeated_pointCloudSources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += pointCloudSources_.CalculateSize(_repeated_pointCloudSources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPointCloudSourcesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      pointCloudSources_.Add(other.pointCloudSources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            pointCloudSources_.AddEntriesFrom(input, _repeated_pointCloudSources_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointCloudRequest : pb::IMessage<PointCloudRequest> {
    private static readonly pb::MessageParser<PointCloudRequest> _parser = new pb::MessageParser<PointCloudRequest>(() => new PointCloudRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloudRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudRequest(PointCloudRequest other) : this() {
      pointCloudSourceName_ = other.pointCloudSourceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudRequest Clone() {
      return new PointCloudRequest(this);
    }

    /// <summary>Field number for the "point_cloud_source_name" field.</summary>
    public const int PointCloudSourceNameFieldNumber = 1;
    private string pointCloudSourceName_ = "";
    /// <summary>
    /// Name of the point cloud source to request from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PointCloudSourceName {
      get { return pointCloudSourceName_; }
      set {
        pointCloudSourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloudRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloudRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointCloudSourceName != other.PointCloudSourceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PointCloudSourceName.Length != 0) hash ^= PointCloudSourceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PointCloudSourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PointCloudSourceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PointCloudSourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PointCloudSourceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloudRequest other) {
      if (other == null) {
        return;
      }
      if (other.PointCloudSourceName.Length != 0) {
        PointCloudSourceName = other.PointCloudSourceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PointCloudSourceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetPointCloud request message to ask a specific point cloud service for data.
  /// </summary>
  public sealed partial class GetPointCloudRequest : pb::IMessage<GetPointCloudRequest> {
    private static readonly pb::MessageParser<GetPointCloudRequest> _parser = new pb::MessageParser<GetPointCloudRequest>(() => new GetPointCloudRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPointCloudRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudRequest(GetPointCloudRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      pointCloudRequests_ = other.pointCloudRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudRequest Clone() {
      return new GetPointCloudRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point_cloud_requests" field.</summary>
    public const int PointCloudRequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.PointCloudRequest> _repeated_pointCloudRequests_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.PointCloudRequest.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.PointCloudRequest> pointCloudRequests_ = new pbc::RepeatedField<global::Bosdyn.Api.PointCloudRequest>();
    /// <summary>
    /// Sources to retrieve from. The service will return a response for each PointCloudRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.PointCloudRequest> PointCloudRequests {
      get { return pointCloudRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPointCloudRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPointCloudRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!pointCloudRequests_.Equals(other.pointCloudRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= pointCloudRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      pointCloudRequests_.WriteTo(output, _repeated_pointCloudRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += pointCloudRequests_.CalculateSize(_repeated_pointCloudRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPointCloudRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      pointCloudRequests_.Add(other.pointCloudRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            pointCloudRequests_.AddEntriesFrom(input, _repeated_pointCloudRequests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PointCloudResponse : pb::IMessage<PointCloudResponse> {
    private static readonly pb::MessageParser<PointCloudResponse> _parser = new pb::MessageParser<PointCloudResponse>(() => new PointCloudResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointCloudResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudResponse(PointCloudResponse other) : this() {
      status_ = other.status_;
      pointCloud_ = other.pointCloud_ != null ? other.pointCloud_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointCloudResponse Clone() {
      return new PointCloudResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Bosdyn.Api.PointCloudResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PointCloudResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "point_cloud" field.</summary>
    public const int PointCloudFieldNumber = 2;
    private global::Bosdyn.Api.PointCloud pointCloud_;
    /// <summary>
    /// The current point cloud from the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PointCloud PointCloud {
      get { return pointCloud_; }
      set {
        pointCloud_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointCloudResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointCloudResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(PointCloud, other.PointCloud)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (pointCloud_ != null) hash ^= PointCloud.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (pointCloud_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PointCloud);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (pointCloud_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointCloud);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointCloudResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.pointCloud_ != null) {
        if (pointCloud_ == null) {
          PointCloud = new global::Bosdyn.Api.PointCloud();
        }
        PointCloud.MergeFrom(other.PointCloud);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Bosdyn.Api.PointCloudResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (pointCloud_ == null) {
              PointCloud = new global::Bosdyn.Api.PointCloud();
            }
            input.ReadMessage(PointCloud);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PointCloudResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used.
        /// An internal PointCloudService issue has happened if UNKNOWN is set.
        /// None of the other fields are filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Call succeeded at filling out all the fields.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// Failed to fill out PointCloudSource. All the other fields are not filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_SOURCE_DATA_ERROR")] SourceDataError = 2,
        /// <summary>
        /// There was a problem with the point cloud data.  Only the PointCloudSource is filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_POINT_CLOUD_DATA_ERROR")] PointCloudDataError = 3,
        /// <summary>
        /// Provided point cloud source was not found. One
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN_SOURCE")] UnknownSource = 4,
      }

    }
    #endregion

  }

  public sealed partial class GetPointCloudResponse : pb::IMessage<GetPointCloudResponse> {
    private static readonly pb::MessageParser<GetPointCloudResponse> _parser = new pb::MessageParser<GetPointCloudResponse>(() => new GetPointCloudResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPointCloudResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PointCloudReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudResponse(GetPointCloudResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      pointCloudResponses_ = other.pointCloudResponses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPointCloudResponse Clone() {
      return new GetPointCloudResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point_cloud_responses" field.</summary>
    public const int PointCloudResponsesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.PointCloudResponse> _repeated_pointCloudResponses_codec
        = pb::FieldCodec.ForMessage(34, global::Bosdyn.Api.PointCloudResponse.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.PointCloudResponse> pointCloudResponses_ = new pbc::RepeatedField<global::Bosdyn.Api.PointCloudResponse>();
    /// <summary>
    /// The resulting point clouds for each requested source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.PointCloudResponse> PointCloudResponses {
      get { return pointCloudResponses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPointCloudResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPointCloudResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!pointCloudResponses_.Equals(other.pointCloudResponses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= pointCloudResponses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      pointCloudResponses_.WriteTo(output, _repeated_pointCloudResponses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += pointCloudResponses_.CalculateSize(_repeated_pointCloudResponses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPointCloudResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      pointCloudResponses_.Add(other.pointCloudResponses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 34: {
            pointCloudResponses_.AddEntriesFrom(input, _repeated_pointCloudResponses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
