// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/data_buffer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/data_buffer.proto</summary>
  public static partial class DataBufferReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/data_buffer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataBufferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvZGF0YV9idWZmZXIucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rv",
            "cy9oZWFkZXIucHJvdG8aFlByb3Rvcy9wYXJhbWV0ZXIucHJvdG8aH2dvb2ds",
            "ZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8idgoZUmVjb3JkVGV4dE1lc3Nh",
            "Z2VzUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVl",
            "c3RIZWFkZXISLgoNdGV4dF9tZXNzYWdlcxgCIAMoCzIXLmJvc2R5bi5hcGku",
            "VGV4dE1lc3NhZ2UiggEKHVJlY29yZE9wZXJhdG9yQ29tbWVudHNSZXF1ZXN0",
            "EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchI2",
            "ChFvcGVyYXRvcl9jb21tZW50cxgCIAMoCzIbLmJvc2R5bi5hcGkuT3BlcmF0",
            "b3JDb21tZW50InoKFlJlY29yZERhdGFCbG9ic1JlcXVlc3QSKQoGaGVhZGVy",
            "GAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEicKCWJsb2JfZGF0",
            "YRgCIAMoCzIULmJvc2R5bi5hcGkuRGF0YUJsb2ISDAoEc3luYxgDIAEoCCJw",
            "ChhSZWNvcmRTaWduYWxUaWNrc1JlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhku",
            "Ym9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEikKCXRpY2tfZGF0YRgCIAMoCzIW",
            "LmJvc2R5bi5hcGkuU2lnbmFsVGljayJjChNSZWNvcmRFdmVudHNSZXF1ZXN0",
            "EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchIh",
            "CgZldmVudHMYAiADKAsyES5ib3NkeW4uYXBpLkV2ZW50Ip0CCgtUZXh0TWVz",
            "c2FnZRIPCgdtZXNzYWdlGAEgASgJEi0KCXRpbWVzdGFtcBgCIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDgoGc291cmNlGAMgASgJEiwKBWxl",
            "dmVsGAQgASgOMh0uYm9zZHluLmFwaS5UZXh0TWVzc2FnZS5MZXZlbBILCgN0",
            "YWcYBSABKAkSEAoIZmlsZW5hbWUYBiABKAkSEwoLbGluZV9udW1iZXIYByAB",
            "KAUiXAoFTGV2ZWwSEQoNTEVWRUxfVU5LTk9XThAAEg8KC0xFVkVMX0RFQlVH",
            "EAESDgoKTEVWRUxfSU5GTxACEg4KCkxFVkVMX1dBUk4QAxIPCgtMRVZFTF9F",
            "UlJPUhAEIlEKD09wZXJhdG9yQ29tbWVudBIPCgdtZXNzYWdlGAEgASgJEi0K",
            "CXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAi",
            "aQoIRGF0YUJsb2ISLQoJdGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIPCgdjaGFubmVsGAIgASgJEg8KB3R5cGVfaWQYAyAB",
            "KAkSDAoEZGF0YRgEIAEoDCL3AgoMU2lnbmFsU2NoZW1hEi8KBHZhcnMYASAD",
            "KAsyIS5ib3NkeW4uYXBpLlNpZ25hbFNjaGVtYS5WYXJpYWJsZRITCgtzY2hl",
            "bWFfbmFtZRgCIAEoCRqgAgoIVmFyaWFibGUSDAoEbmFtZRgBIAEoCRI0CgR0",
            "eXBlGAIgASgOMiYuYm9zZHluLmFwaS5TaWduYWxTY2hlbWEuVmFyaWFibGUu",
            "VHlwZRIPCgdpc190aW1lGAMgASgIIr4BCgRUeXBlEhAKDFRZUEVfVU5LTk9X",
            "ThAAEg0KCVRZUEVfSU5UOBABEg4KClRZUEVfSU5UMTYQAhIOCgpUWVBFX0lO",
            "VDMyEAMSDgoKVFlQRV9JTlQ2NBAEEg4KClRZUEVfVUlOVDgQBRIPCgtUWVBF",
            "X1VJTlQxNhAGEg8KC1RZUEVfVUlOVDMyEAcSDwoLVFlQRV9VSU5UNjQQCBIQ",
            "CgxUWVBFX0ZMT0FUMzIQCRIQCgxUWVBFX0ZMT0FUNjQQCiJNCg5TaWduYWxT",
            "Y2hlbWFJZBIRCglzY2hlbWFfaWQYASABKAQSKAoGc2NoZW1hGAIgASgLMhgu",
            "Ym9zZHluLmFwaS5TaWduYWxTY2hlbWEi6AEKClNpZ25hbFRpY2sSEwoLc2Vx",
            "dWVuY2VfaWQYASABKAMSLQoJdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIOCgZzb3VyY2UYAyABKAkSEQoJc2NoZW1hX2lk",
            "GAQgASgEEjEKCGVuY29kaW5nGAUgASgOMh8uYm9zZHluLmFwaS5TaWduYWxU",
            "aWNrLkVuY29kaW5nEgwKBGRhdGEYBiABKAwiMgoIRW5jb2RpbmcSFAoQRU5D",
            "T0RJTkdfVU5LTk9XThAAEhAKDEVOQ09ESU5HX1JBVxABIqYECgVFdmVudBIM",
            "CgR0eXBlGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEg4KBnNvdXJjZRgD",
            "IAEoCRIKCgJpZBgEIAEoCRIuCgpzdGFydF90aW1lGAUgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgGIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASJgoFbGV2ZWwYByABKA4yFy5ib3NkeW4u",
            "YXBpLkV2ZW50LkxldmVsEikKCnBhcmFtZXRlcnMYCCADKAsyFS5ib3NkeW4u",
            "YXBpLlBhcmFtZXRlchI8ChFsb2dfcHJlc2VydmVfaGludBgJIAEoDjIhLmJv",
            "c2R5bi5hcGkuRXZlbnQuTG9nUHJlc2VydmVIaW50IoABCgVMZXZlbBIPCgtM",
            "RVZFTF9VTlNFVBAAEg0KCUxFVkVMX0xPVxABEhAKDExFVkVMX01FRElVTRAC",
            "Eg4KCkxFVkVMX0hJR0gQAxIaChZMRVZFTF9NSVNTSU9OX0NSSVRJQ0FMEAQS",
            "GQoVTEVWRUxfU1lTVEVNX0NSSVRJQ0FMEAUibAoPTG9nUHJlc2VydmVIaW50",
            "EhsKF0xPR19QUkVTRVJWRV9ISU5UX1VOU0VUEAASHAoYTE9HX1BSRVNFUlZF",
            "X0hJTlRfTk9STUFMEAESHgoaTE9HX1BSRVNFUlZFX0hJTlRfUFJFU0VSVkUQ",
            "AiKnAgoaUmVjb3JkVGV4dE1lc3NhZ2VzUmVzcG9uc2USKgoGaGVhZGVyGAEg",
            "ASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlchI8CgZlcnJvcnMYAiAD",
            "KAsyLC5ib3NkeW4uYXBpLlJlY29yZFRleHRNZXNzYWdlc1Jlc3BvbnNlLkVy",
            "cm9yGp4BCgVFcnJvchI/CgR0eXBlGAEgASgOMjEuYm9zZHluLmFwaS5SZWNv",
            "cmRUZXh0TWVzc2FnZXNSZXNwb25zZS5FcnJvci5UeXBlEg8KB21lc3NhZ2UY",
            "AiABKAkSDQoFaW5kZXgYAyABKA0iNAoEVHlwZRIICgROT05FEAASEAoMQ0xJ",
            "RU5UX0VSUk9SEAESEAoMU0VSVkVSX0VSUk9SEAIiswIKHlJlY29yZE9wZXJh",
            "dG9yQ29tbWVudHNSZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4u",
            "YXBpLlJlc3BvbnNlSGVhZGVyEkAKBmVycm9ycxgCIAMoCzIwLmJvc2R5bi5h",
            "cGkuUmVjb3JkT3BlcmF0b3JDb21tZW50c1Jlc3BvbnNlLkVycm9yGqIBCgVF",
            "cnJvchJDCgR0eXBlGAEgASgOMjUuYm9zZHluLmFwaS5SZWNvcmRPcGVyYXRv",
            "ckNvbW1lbnRzUmVzcG9uc2UuRXJyb3IuVHlwZRIPCgdtZXNzYWdlGAIgASgJ",
            "Eg0KBWluZGV4GAMgASgNIjQKBFR5cGUSCAoETk9ORRAAEhAKDENMSUVOVF9F",
            "UlJPUhABEhAKDFNFUlZFUl9FUlJPUhACIp4CChdSZWNvcmREYXRhQmxvYnNS",
            "ZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNl",
            "SGVhZGVyEjkKBmVycm9ycxgCIAMoCzIpLmJvc2R5bi5hcGkuUmVjb3JkRGF0",
            "YUJsb2JzUmVzcG9uc2UuRXJyb3IamwEKBUVycm9yEjwKBHR5cGUYASABKA4y",
            "Li5ib3NkeW4uYXBpLlJlY29yZERhdGFCbG9ic1Jlc3BvbnNlLkVycm9yLlR5",
            "cGUSDwoHbWVzc2FnZRgCIAEoCRINCgVpbmRleBgDIAEoDSI0CgRUeXBlEggK",
            "BE5PTkUQABIQCgxDTElFTlRfRVJST1IQARIQCgxTRVJWRVJfRVJST1IQAiK7",
            "AgoZUmVjb3JkU2lnbmFsVGlja3NSZXNwb25zZRIqCgZoZWFkZXIYASABKAsy",
            "Gi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEjsKBmVycm9ycxgCIAMoCzIr",
            "LmJvc2R5bi5hcGkuUmVjb3JkU2lnbmFsVGlja3NSZXNwb25zZS5FcnJvchq0",
            "AQoFRXJyb3ISPgoEdHlwZRgBIAEoDjIwLmJvc2R5bi5hcGkuUmVjb3JkU2ln",
            "bmFsVGlja3NSZXNwb25zZS5FcnJvci5UeXBlEg8KB21lc3NhZ2UYAiABKAkS",
            "DQoFaW5kZXgYAyABKA0iSwoEVHlwZRIICgROT05FEAASEAoMQ0xJRU5UX0VS",
            "Uk9SEAESEAoMU0VSVkVSX0VSUk9SEAISFQoRSU5WQUxJRF9TQ0hFTUFfSUQQ",
            "AyKVAgoUUmVjb3JkRXZlbnRzUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhou",
            "Ym9zZHluLmFwaS5SZXNwb25zZUhlYWRlchI2CgZlcnJvcnMYAiADKAsyJi5i",
            "b3NkeW4uYXBpLlJlY29yZEV2ZW50c1Jlc3BvbnNlLkVycm9yGpgBCgVFcnJv",
            "chI5CgR0eXBlGAEgASgOMisuYm9zZHluLmFwaS5SZWNvcmRFdmVudHNSZXNw",
            "b25zZS5FcnJvci5UeXBlEg8KB21lc3NhZ2UYAiABKAkSDQoFaW5kZXgYAyAB",
            "KA0iNAoEVHlwZRIICgROT05FEAASEAoMQ0xJRU5UX0VSUk9SEAESEAoMU0VS",
            "VkVSX0VSUk9SEAIicgobUmVnaXN0ZXJTaWduYWxTY2hlbWFSZXF1ZXN0EikK",
            "BmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchIoCgZz",
            "Y2hlbWEYAiABKAsyGC5ib3NkeW4uYXBpLlNpZ25hbFNjaGVtYSJdChxSZWdp",
            "c3RlclNpZ25hbFNjaGVtYVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJv",
            "c2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISEQoJc2NoZW1hX2lkGAIgASgEQhFC",
            "D0RhdGFCdWZmZXJQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.ParameterReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordTextMessagesRequest), global::Bosdyn.Api.RecordTextMessagesRequest.Parser, new[]{ "Header", "TextMessages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordOperatorCommentsRequest), global::Bosdyn.Api.RecordOperatorCommentsRequest.Parser, new[]{ "Header", "OperatorComments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordDataBlobsRequest), global::Bosdyn.Api.RecordDataBlobsRequest.Parser, new[]{ "Header", "BlobData", "Sync" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordSignalTicksRequest), global::Bosdyn.Api.RecordSignalTicksRequest.Parser, new[]{ "Header", "TickData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordEventsRequest), global::Bosdyn.Api.RecordEventsRequest.Parser, new[]{ "Header", "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TextMessage), global::Bosdyn.Api.TextMessage.Parser, new[]{ "Message", "Timestamp", "Source", "Level", "Tag", "Filename", "LineNumber" }, null, new[]{ typeof(global::Bosdyn.Api.TextMessage.Types.Level) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.OperatorComment), global::Bosdyn.Api.OperatorComment.Parser, new[]{ "Message", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DataBlob), global::Bosdyn.Api.DataBlob.Parser, new[]{ "Timestamp", "Channel", "TypeId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SignalSchema), global::Bosdyn.Api.SignalSchema.Parser, new[]{ "Vars", "SchemaName" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SignalSchema.Types.Variable), global::Bosdyn.Api.SignalSchema.Types.Variable.Parser, new[]{ "Name", "Type", "IsTime" }, null, new[]{ typeof(global::Bosdyn.Api.SignalSchema.Types.Variable.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SignalSchemaId), global::Bosdyn.Api.SignalSchemaId.Parser, new[]{ "SchemaId", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SignalTick), global::Bosdyn.Api.SignalTick.Parser, new[]{ "SequenceId", "Timestamp", "Source", "SchemaId", "Encoding", "Data" }, null, new[]{ typeof(global::Bosdyn.Api.SignalTick.Types.Encoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Event), global::Bosdyn.Api.Event.Parser, new[]{ "Type", "Description", "Source", "Id", "StartTime", "EndTime", "Level", "Parameters", "LogPreserveHint" }, null, new[]{ typeof(global::Bosdyn.Api.Event.Types.Level), typeof(global::Bosdyn.Api.Event.Types.LogPreserveHint) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordTextMessagesResponse), global::Bosdyn.Api.RecordTextMessagesResponse.Parser, new[]{ "Header", "Errors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error), global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Parser, new[]{ "Type", "Message", "Index" }, null, new[]{ typeof(global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordOperatorCommentsResponse), global::Bosdyn.Api.RecordOperatorCommentsResponse.Parser, new[]{ "Header", "Errors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error), global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Parser, new[]{ "Type", "Message", "Index" }, null, new[]{ typeof(global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordDataBlobsResponse), global::Bosdyn.Api.RecordDataBlobsResponse.Parser, new[]{ "Header", "Errors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error), global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Parser, new[]{ "Type", "Message", "Index" }, null, new[]{ typeof(global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordSignalTicksResponse), global::Bosdyn.Api.RecordSignalTicksResponse.Parser, new[]{ "Header", "Errors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error), global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Parser, new[]{ "Type", "Message", "Index" }, null, new[]{ typeof(global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordEventsResponse), global::Bosdyn.Api.RecordEventsResponse.Parser, new[]{ "Header", "Errors" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RecordEventsResponse.Types.Error), global::Bosdyn.Api.RecordEventsResponse.Types.Error.Parser, new[]{ "Type", "Message", "Index" }, null, new[]{ typeof(global::Bosdyn.Api.RecordEventsResponse.Types.Error.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RegisterSignalSchemaRequest), global::Bosdyn.Api.RegisterSignalSchemaRequest.Parser, new[]{ "Header", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RegisterSignalSchemaResponse), global::Bosdyn.Api.RegisterSignalSchemaResponse.Parser, new[]{ "Header", "SchemaId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RecordTextMessagesRequest : pb::IMessage<RecordTextMessagesRequest> {
    private static readonly pb::MessageParser<RecordTextMessagesRequest> _parser = new pb::MessageParser<RecordTextMessagesRequest>(() => new RecordTextMessagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordTextMessagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesRequest(RecordTextMessagesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      textMessages_ = other.textMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesRequest Clone() {
      return new RecordTextMessagesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "text_messages" field.</summary>
    public const int TextMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.TextMessage> _repeated_textMessages_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.TextMessage.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.TextMessage> textMessages_ = new pbc::RepeatedField<global::Bosdyn.Api.TextMessage>();
    /// <summary>
    /// The text messages to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.TextMessage> TextMessages {
      get { return textMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordTextMessagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordTextMessagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!textMessages_.Equals(other.textMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= textMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      textMessages_.WriteTo(output, _repeated_textMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += textMessages_.CalculateSize(_repeated_textMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordTextMessagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      textMessages_.Add(other.textMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            textMessages_.AddEntriesFrom(input, _repeated_textMessages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordOperatorCommentsRequest : pb::IMessage<RecordOperatorCommentsRequest> {
    private static readonly pb::MessageParser<RecordOperatorCommentsRequest> _parser = new pb::MessageParser<RecordOperatorCommentsRequest>(() => new RecordOperatorCommentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordOperatorCommentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsRequest(RecordOperatorCommentsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      operatorComments_ = other.operatorComments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsRequest Clone() {
      return new RecordOperatorCommentsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "operator_comments" field.</summary>
    public const int OperatorCommentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.OperatorComment> _repeated_operatorComments_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.OperatorComment.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.OperatorComment> operatorComments_ = new pbc::RepeatedField<global::Bosdyn.Api.OperatorComment>();
    /// <summary>
    /// The operator comments to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.OperatorComment> OperatorComments {
      get { return operatorComments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordOperatorCommentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordOperatorCommentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!operatorComments_.Equals(other.operatorComments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= operatorComments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      operatorComments_.WriteTo(output, _repeated_operatorComments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += operatorComments_.CalculateSize(_repeated_operatorComments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordOperatorCommentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      operatorComments_.Add(other.operatorComments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            operatorComments_.AddEntriesFrom(input, _repeated_operatorComments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordDataBlobsRequest : pb::IMessage<RecordDataBlobsRequest> {
    private static readonly pb::MessageParser<RecordDataBlobsRequest> _parser = new pb::MessageParser<RecordDataBlobsRequest>(() => new RecordDataBlobsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordDataBlobsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsRequest(RecordDataBlobsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      blobData_ = other.blobData_.Clone();
      sync_ = other.sync_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsRequest Clone() {
      return new RecordDataBlobsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "blob_data" field.</summary>
    public const int BlobDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataBlob> _repeated_blobData_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.DataBlob.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataBlob> blobData_ = new pbc::RepeatedField<global::Bosdyn.Api.DataBlob>();
    /// <summary>
    /// The data blobs to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataBlob> BlobData {
      get { return blobData_; }
    }

    /// <summary>Field number for the "sync" field.</summary>
    public const int SyncFieldNumber = 3;
    private bool sync_;
    /// <summary>
    /// When set, the data blob is committed to the log synchronously. The RPC does not return until
    /// the data is written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sync {
      get { return sync_; }
      set {
        sync_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordDataBlobsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordDataBlobsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!blobData_.Equals(other.blobData_)) return false;
      if (Sync != other.Sync) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= blobData_.GetHashCode();
      if (Sync != false) hash ^= Sync.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      blobData_.WriteTo(output, _repeated_blobData_codec);
      if (Sync != false) {
        output.WriteRawTag(24);
        output.WriteBool(Sync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += blobData_.CalculateSize(_repeated_blobData_codec);
      if (Sync != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordDataBlobsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      blobData_.Add(other.blobData_);
      if (other.Sync != false) {
        Sync = other.Sync;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            blobData_.AddEntriesFrom(input, _repeated_blobData_codec);
            break;
          }
          case 24: {
            Sync = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordSignalTicksRequest : pb::IMessage<RecordSignalTicksRequest> {
    private static readonly pb::MessageParser<RecordSignalTicksRequest> _parser = new pb::MessageParser<RecordSignalTicksRequest>(() => new RecordSignalTicksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordSignalTicksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksRequest(RecordSignalTicksRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      tickData_ = other.tickData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksRequest Clone() {
      return new RecordSignalTicksRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "tick_data" field.</summary>
    public const int TickDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SignalTick> _repeated_tickData_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SignalTick.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SignalTick> tickData_ = new pbc::RepeatedField<global::Bosdyn.Api.SignalTick>();
    /// <summary>
    /// The signals data to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SignalTick> TickData {
      get { return tickData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordSignalTicksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordSignalTicksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!tickData_.Equals(other.tickData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= tickData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      tickData_.WriteTo(output, _repeated_tickData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += tickData_.CalculateSize(_repeated_tickData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordSignalTicksRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      tickData_.Add(other.tickData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            tickData_.AddEntriesFrom(input, _repeated_tickData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordEventsRequest : pb::IMessage<RecordEventsRequest> {
    private static readonly pb::MessageParser<RecordEventsRequest> _parser = new pb::MessageParser<RecordEventsRequest>(() => new RecordEventsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordEventsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsRequest(RecordEventsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsRequest Clone() {
      return new RecordEventsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.Event.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Event> events_ = new pbc::RepeatedField<global::Bosdyn.Api.Event>();
    /// <summary>
    /// The events to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Event> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordEventsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordEventsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordEventsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A text message to add to the log.
  /// These could be internal text-log messages from a client for use in debugging, for example.
  /// </summary>
  public sealed partial class TextMessage : pb::IMessage<TextMessage> {
    private static readonly pb::MessageParser<TextMessage> _parser = new pb::MessageParser<TextMessage>(() => new TextMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage(TextMessage other) : this() {
      message_ = other.message_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      source_ = other.source_;
      level_ = other.level_;
      tag_ = other.tag_;
      filename_ = other.filename_;
      lineNumber_ = other.lineNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage Clone() {
      return new TextMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// String annotation message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// The timestamp of the annotation.  This must be in robot time.
    /// If this is not specified, this will default to the time the server received the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// The client name.
    /// This may be used to segregate data for the same variables to different parts of the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private global::Bosdyn.Api.TextMessage.Types.Level level_ = 0;
    /// <summary>
    /// The relative importance of the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TextMessage.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 5;
    private string tag_ = "";
    /// <summary>
    /// Optional tag to identify from what code/module this message originated from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 6;
    private string filename_ = "";
    /// <summary>
    /// Optional source file name originating the log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line_number" field.</summary>
    public const int LineNumberFieldNumber = 7;
    private int lineNumber_;
    /// <summary>
    /// Optional source file line number originating the log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Source != other.Source) return false;
      if (Level != other.Level) return false;
      if (Tag != other.Tag) return false;
      if (Filename != other.Filename) return false;
      if (LineNumber != other.LineNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Level);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tag);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Filename);
      }
      if (LineNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LineNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (LineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.LineNumber != 0) {
        LineNumber = other.LineNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            Level = (global::Bosdyn.Api.TextMessage.Types.Level) input.ReadEnum();
            break;
          }
          case 42: {
            Tag = input.ReadString();
            break;
          }
          case 50: {
            Filename = input.ReadString();
            break;
          }
          case 56: {
            LineNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TextMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Level {
        /// <summary>
        /// Invalid, do not use.
        /// </summary>
        [pbr::OriginalName("LEVEL_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Events likely of interest only in a debugging context.
        /// </summary>
        [pbr::OriginalName("LEVEL_DEBUG")] Debug = 1,
        /// <summary>
        /// Informational message during normal operation.
        /// </summary>
        [pbr::OriginalName("LEVEL_INFO")] Info = 2,
        /// <summary>
        /// Information about an unexpected but recoverable condition.
        /// </summary>
        [pbr::OriginalName("LEVEL_WARN")] Warn = 3,
        /// <summary>
        /// Information about an operation which did not succeed.
        /// </summary>
        [pbr::OriginalName("LEVEL_ERROR")] Error = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// An operator comment to be added to the log.
  /// These are notes especially intended to mark when logs should be preserved and reviewed
  ///  to ensure that robot hardware and/or software is working as intended.
  /// </summary>
  public sealed partial class OperatorComment : pb::IMessage<OperatorComment> {
    private static readonly pb::MessageParser<OperatorComment> _parser = new pb::MessageParser<OperatorComment>(() => new OperatorComment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperatorComment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatorComment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatorComment(OperatorComment other) : this() {
      message_ = other.message_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatorComment Clone() {
      return new OperatorComment(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// String annotation message to add to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// The timestamp of the annotation.  This must be in robot time.
    /// If this is not specified, this will default to the time the server received the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperatorComment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperatorComment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperatorComment other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message-style data to add to the log.
  /// </summary>
  public sealed partial class DataBlob : pb::IMessage<DataBlob> {
    private static readonly pb::MessageParser<DataBlob> _parser = new pb::MessageParser<DataBlob>(() => new DataBlob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataBlob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlob(DataBlob other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      channel_ = other.channel_;
      typeId_ = other.typeId_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataBlob Clone() {
      return new DataBlob(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Timestamp of data in robot clock time.  This is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    /// A general label for this blob.
    /// This is distinct from type_id, which identifies how the blob is to be parsed.
    /// In practice, this is often the same as the type_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private string typeId_ = "";
    /// <summary>
    /// A description of the data's content and its encoding.  This is required.
    /// This should be sufficient for deciding how to deserialize the data.
    /// For example, this could be the full name of a protobuf message type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeId {
      get { return typeId_; }
      set {
        typeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Raw data.
    /// For example, jpeg data or a serialized protobuf.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataBlob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataBlob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Channel != other.Channel) return false;
      if (TypeId != other.TypeId) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (TypeId.Length != 0) hash ^= TypeId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (TypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TypeId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (TypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataBlob other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.TypeId.Length != 0) {
        TypeId = other.TypeId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            TypeId = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A description of a set of signals-style variables to log together as timestamped samples.
  /// </summary>
  public sealed partial class SignalSchema : pb::IMessage<SignalSchema> {
    private static readonly pb::MessageParser<SignalSchema> _parser = new pb::MessageParser<SignalSchema>(() => new SignalSchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignalSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchema(SignalSchema other) : this() {
      vars_ = other.vars_.Clone();
      schemaName_ = other.schemaName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchema Clone() {
      return new SignalSchema(this);
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SignalSchema.Types.Variable> _repeated_vars_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.SignalSchema.Types.Variable.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SignalSchema.Types.Variable> vars_ = new pbc::RepeatedField<global::Bosdyn.Api.SignalSchema.Types.Variable>();
    /// <summary>
    /// A SignalTick using this schema contains the values of this ordered list of variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SignalSchema.Types.Variable> Vars {
      get { return vars_; }
    }

    /// <summary>Field number for the "schema_name" field.</summary>
    public const int SchemaNameFieldNumber = 2;
    private string schemaName_ = "";
    /// <summary>
    /// The name of the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignalSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignalSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vars_.Equals(other.vars_)) return false;
      if (SchemaName != other.SchemaName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vars_.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vars_.WriteTo(output, _repeated_vars_codec);
      if (SchemaName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SchemaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vars_.CalculateSize(_repeated_vars_codec);
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignalSchema other) {
      if (other == null) {
        return;
      }
      vars_.Add(other.vars_);
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vars_.AddEntriesFrom(input, _repeated_vars_codec);
            break;
          }
          case 18: {
            SchemaName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SignalSchema message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A variable of signals-style data, which will be sampled in time.
      /// </summary>
      public sealed partial class Variable : pb::IMessage<Variable> {
        private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Variable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SignalSchema.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variable(Variable other) : this() {
          name_ = other.name_;
          type_ = other.type_;
          isTime_ = other.isTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Variable Clone() {
          return new Variable(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// The name of the variable.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Bosdyn.Api.SignalSchema.Types.Variable.Types.Type type_ = 0;
        /// <summary>
        /// The type of the data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SignalSchema.Types.Variable.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "is_time" field.</summary>
        public const int IsTimeFieldNumber = 3;
        private bool isTime_;
        /// <summary>
        /// Zero or one variable in 'vars' may be specified as a time variable.
        /// A time variable must have type TYPE_FLOAT64.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsTime {
          get { return isTime_; }
          set {
            isTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Variable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Variable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (IsTime != other.IsTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (IsTime != false) hash ^= IsTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (IsTime != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (IsTime != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Variable other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.IsTime != false) {
            IsTime = other.IsTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Bosdyn.Api.SignalSchema.Types.Variable.Types.Type) input.ReadEnum();
                break;
              }
              case 24: {
                IsTime = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Variable message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("TYPE_INT8")] Int8 = 1,
            [pbr::OriginalName("TYPE_INT16")] Int16 = 2,
            [pbr::OriginalName("TYPE_INT32")] Int32 = 3,
            [pbr::OriginalName("TYPE_INT64")] Int64 = 4,
            [pbr::OriginalName("TYPE_UINT8")] Uint8 = 5,
            [pbr::OriginalName("TYPE_UINT16")] Uint16 = 6,
            [pbr::OriginalName("TYPE_UINT32")] Uint32 = 7,
            [pbr::OriginalName("TYPE_UINT64")] Uint64 = 8,
            [pbr::OriginalName("TYPE_FLOAT32")] Float32 = 9,
            [pbr::OriginalName("TYPE_FLOAT64")] Float64 = 10,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class SignalSchemaId : pb::IMessage<SignalSchemaId> {
    private static readonly pb::MessageParser<SignalSchemaId> _parser = new pb::MessageParser<SignalSchemaId>(() => new SignalSchemaId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignalSchemaId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchemaId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchemaId(SignalSchemaId other) : this() {
      schemaId_ = other.schemaId_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalSchemaId Clone() {
      return new SignalSchemaId(this);
    }

    /// <summary>Field number for the "schema_id" field.</summary>
    public const int SchemaIdFieldNumber = 1;
    private ulong schemaId_;
    /// <summary>
    /// {schema, id} pair
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SchemaId {
      get { return schemaId_; }
      set {
        schemaId_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Bosdyn.Api.SignalSchema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SignalSchema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignalSchemaId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignalSchemaId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SchemaId != other.SchemaId) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SchemaId != 0UL) hash ^= SchemaId.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SchemaId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SchemaId);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SchemaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SchemaId);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignalSchemaId other) {
      if (other == null) {
        return;
      }
      if (other.SchemaId != 0UL) {
        SchemaId = other.SchemaId;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Bosdyn.Api.SignalSchema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SchemaId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (schema_ == null) {
              Schema = new global::Bosdyn.Api.SignalSchema();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A timestamped set of signals variable values.
  /// </summary>
  public sealed partial class SignalTick : pb::IMessage<SignalTick> {
    private static readonly pb::MessageParser<SignalTick> _parser = new pb::MessageParser<SignalTick>(() => new SignalTick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignalTick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalTick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalTick(SignalTick other) : this() {
      sequenceId_ = other.sequenceId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      source_ = other.source_;
      schemaId_ = other.schemaId_;
      encoding_ = other.encoding_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalTick Clone() {
      return new SignalTick(this);
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 1;
    private long sequenceId_;
    /// <summary>
    /// Successive ticks should have successive sequence_id's.
    /// The robot uses this to determine if a tick was somehow lost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Timestamp at which the variable values were sampled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// The client name.
    /// This may be used to segregate data for the same variables to different parts of the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema_id" field.</summary>
    public const int SchemaIdFieldNumber = 4;
    private ulong schemaId_;
    /// <summary>
    /// This specifies the SignalSchema to be used in interpreting the |data| field.
    /// This value was returned by the server when the schema was registered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SchemaId {
      get { return schemaId_; }
      set {
        schemaId_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 5;
    private global::Bosdyn.Api.SignalTick.Types.Encoding encoding_ = 0;
    /// <summary>
    /// Format describing how the data bytes array is encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SignalTick.Types.Encoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// The encoded data representing a tick of multiple values of signal-styles data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignalTick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignalTick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceId != other.SequenceId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Source != other.Source) return false;
      if (SchemaId != other.SchemaId) return false;
      if (Encoding != other.Encoding) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceId != 0L) hash ^= SequenceId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (SchemaId != 0UL) hash ^= SchemaId.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SequenceId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (SchemaId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SchemaId);
      }
      if (Encoding != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Encoding);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (SchemaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SchemaId);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignalTick other) {
      if (other == null) {
        return;
      }
      if (other.SequenceId != 0L) {
        SequenceId = other.SequenceId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.SchemaId != 0UL) {
        SchemaId = other.SchemaId;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SequenceId = input.ReadInt64();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            SchemaId = input.ReadUInt64();
            break;
          }
          case 40: {
            Encoding = (global::Bosdyn.Api.SignalTick.Types.Encoding) input.ReadEnum();
            break;
          }
          case 50: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SignalTick message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Encoding {
        [pbr::OriginalName("ENCODING_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Bytes array is a concatination of little-endian machine representations of
        ///  the variables from the SignalSchema, in order listed in that schema.
        /// </summary>
        [pbr::OriginalName("ENCODING_RAW")] Raw = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// This message contains event data for logging to the public timeline.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      type_ = other.type_;
      description_ = other.description_;
      source_ = other.source_;
      id_ = other.id_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      level_ = other.level_;
      parameters_ = other.parameters_.Clone();
      logPreserveHint_ = other.logPreserveHint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of event, typically prefixed with a project or organization, e.g. "bosdyn:startup"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Event description.
    /// This is optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// A description of the source of this event. May be the client name.
    /// - Not required to be unique.
    /// - Disambiguates the source of similar event types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    /// Unique identifier to link start and end messages for events with a duration.
    /// - Long running events may have separate messages at the start and end, in case the message
    ///    for the end of the event is lost.
    /// - For events without a separate start and end message (in which case both start_time and
    ///    end time should be specified), the 'id' field should not be set.
    /// - This id is not tracked internally by the service. It is only used to consume the event
    ///    timeline.
    /// - To be effective, the id value should be generated randomly by the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Start and end times for the event:
    /// - Some events are instantaneous. For these, set start_timestamp and end_timestamp to the
    ///    same value and send a single message (without an id).
    /// - Some events take time. At the onset, send a message with a unique id, the start time, and
    ///    type. The end message should include all data from the start message, any
    ///    additional data, and an end time.  If you have the end message, you should not need
    ///    the start message since it is a strict subset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private global::Bosdyn.Api.Event.Types.Level level_ = 0;
    /// <summary>
    /// The relative importance of the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Event.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(66, global::Bosdyn.Api.Parameter.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Parameter> parameters_ = new pbc::RepeatedField<global::Bosdyn.Api.Parameter>();
    /// <summary>
    /// Optional set of event parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Parameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "log_preserve_hint" field.</summary>
    public const int LogPreserveHintFieldNumber = 9;
    private global::Bosdyn.Api.Event.Types.LogPreserveHint logPreserveHint_ = 0;
    /// <summary>
    /// Optionally request that the robot try to preserve data near this time for a service log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Event.Types.LogPreserveHint LogPreserveHint {
      get { return logPreserveHint_; }
      set {
        logPreserveHint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Description != other.Description) return false;
      if (Source != other.Source) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Level != other.Level) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (LogPreserveHint != other.LogPreserveHint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (LogPreserveHint != 0) hash ^= LogPreserveHint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Level);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (LogPreserveHint != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) LogPreserveHint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (LogPreserveHint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogPreserveHint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      parameters_.Add(other.parameters_);
      if (other.LogPreserveHint != 0) {
        LogPreserveHint = other.LogPreserveHint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
          case 42: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 56: {
            Level = (global::Bosdyn.Api.Event.Types.Level) input.ReadEnum();
            break;
          }
          case 66: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 72: {
            LogPreserveHint = (global::Bosdyn.Api.Event.Types.LogPreserveHint) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Level, or similarly "visibility," "importance," or "weight" of event.
      ///  - Higher level events will increase the visibility on the event timeline, relative to other
      ///    events.
      ///  - In general, higher level events should be more consequential with respect to the robot
      ///    operation on a per-occurence basis.
      ///  - Lower level events should be less consequential on a per occurence basis.
      ///  - Non-critical events may be one of LOW, MEDIUM, or HIGH.  UNSET is logically equivalent to
      ///    LOW level.
      ///  - Critical events may be either mission or system critical.
      ///  - System-critical is quasi-reserved for internal robot use, and is used to identify events
      ///    that directly affect robot status or capability, such as the onset of a critical fault or
      ///    start of an enabling capability.
      ///  - Mission-critical is quasi-reserved client use, and is intended for events that directly
      ///    affect the ability of the robot to "do what the user wants," such as the onset of a
      ///    service fault or start of an enabling capability.
      /// </summary>
      public enum Level {
        /// <summary>
        /// Non-critical events
        /// </summary>
        [pbr::OriginalName("LEVEL_UNSET")] Unset = 0,
        [pbr::OriginalName("LEVEL_LOW")] Low = 1,
        [pbr::OriginalName("LEVEL_MEDIUM")] Medium = 2,
        [pbr::OriginalName("LEVEL_HIGH")] High = 3,
        /// <summary>
        /// Critical events
        /// </summary>
        [pbr::OriginalName("LEVEL_MISSION_CRITICAL")] MissionCritical = 4,
        [pbr::OriginalName("LEVEL_SYSTEM_CRITICAL")] SystemCritical = 5,
      }

      /// <summary>
      /// LogPreserveHint may encode a hint to the robot's logging system for whether to preserve
      /// internal log data near the time of this event.  This could be useful in saving data
      /// to be used in a service log to send to Boston Dynamics.
      /// </summary>
      public enum LogPreserveHint {
        /// <summary>
        /// If this this is unset, it is equivalent to LOG_PRESERVE_HINT_NORMAL.
        /// </summary>
        [pbr::OriginalName("LOG_PRESERVE_HINT_UNSET")] Unset = 0,
        /// <summary>
        /// Do not change the robot's default log data preservation behavior in response to this
        /// event.
        /// </summary>
        [pbr::OriginalName("LOG_PRESERVE_HINT_NORMAL")] Normal = 1,
        /// <summary>
        /// Request that the robot try to preserve data near the time of this event.
        /// Log space on the robot is limited, so this does not guarentee that the data will be
        /// preserved.
        /// </summary>
        [pbr::OriginalName("LOG_PRESERVE_HINT_PRESERVE")] Preserve = 2,
      }

    }
    #endregion

  }

  public sealed partial class RecordTextMessagesResponse : pb::IMessage<RecordTextMessagesResponse> {
    private static readonly pb::MessageParser<RecordTextMessagesResponse> _parser = new pb::MessageParser<RecordTextMessagesResponse>(() => new RecordTextMessagesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordTextMessagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesResponse(RecordTextMessagesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordTextMessagesResponse Clone() {
      return new RecordTextMessagesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error> errors_ = new pbc::RepeatedField<global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error>();
    /// <summary>
    /// Errors which occurred when logging text message data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordTextMessagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordTextMessagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordTextMessagesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordTextMessagesResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Text message recording error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.RecordTextMessagesResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          type_ = other.type_;
          message_ = other.message_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Types.Type type_ = 0;
        /// <summary>
        /// The type of error: if it was caused by the client or the service.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        /// An error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private uint index_;
        /// <summary>
        /// The index to identify the data being stored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Message != other.Message) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Bosdyn.Api.RecordTextMessagesResponse.Types.Error.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Error message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("CLIENT_ERROR")] ClientError = 1,
            [pbr::OriginalName("SERVER_ERROR")] ServerError = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class RecordOperatorCommentsResponse : pb::IMessage<RecordOperatorCommentsResponse> {
    private static readonly pb::MessageParser<RecordOperatorCommentsResponse> _parser = new pb::MessageParser<RecordOperatorCommentsResponse>(() => new RecordOperatorCommentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordOperatorCommentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsResponse(RecordOperatorCommentsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordOperatorCommentsResponse Clone() {
      return new RecordOperatorCommentsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error> errors_ = new pbc::RepeatedField<global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error>();
    /// <summary>
    /// Errors which occurred when logging operator comments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordOperatorCommentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordOperatorCommentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordOperatorCommentsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordOperatorCommentsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Operator comment recording error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.RecordOperatorCommentsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          type_ = other.type_;
          message_ = other.message_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Types.Type type_ = 0;
        /// <summary>
        /// The type of error: if it was caused by the client or the service.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        /// An error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private uint index_;
        /// <summary>
        /// The index to identify the data being stored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Message != other.Message) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Bosdyn.Api.RecordOperatorCommentsResponse.Types.Error.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Error message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("CLIENT_ERROR")] ClientError = 1,
            [pbr::OriginalName("SERVER_ERROR")] ServerError = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class RecordDataBlobsResponse : pb::IMessage<RecordDataBlobsResponse> {
    private static readonly pb::MessageParser<RecordDataBlobsResponse> _parser = new pb::MessageParser<RecordDataBlobsResponse>(() => new RecordDataBlobsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordDataBlobsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsResponse(RecordDataBlobsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordDataBlobsResponse Clone() {
      return new RecordDataBlobsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error> errors_ = new pbc::RepeatedField<global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error>();
    /// <summary>
    /// Errors which occurred when logging data blobs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordDataBlobsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordDataBlobsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordDataBlobsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordDataBlobsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// DataBlob recording error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.RecordDataBlobsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          type_ = other.type_;
          message_ = other.message_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Types.Type type_ = 0;
        /// <summary>
        /// The type of error: if it was caused by the client or the service.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        /// An error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private uint index_;
        /// <summary>
        /// The index to identify the data being stored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Message != other.Message) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Bosdyn.Api.RecordDataBlobsResponse.Types.Error.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Error message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("CLIENT_ERROR")] ClientError = 1,
            [pbr::OriginalName("SERVER_ERROR")] ServerError = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class RecordSignalTicksResponse : pb::IMessage<RecordSignalTicksResponse> {
    private static readonly pb::MessageParser<RecordSignalTicksResponse> _parser = new pb::MessageParser<RecordSignalTicksResponse>(() => new RecordSignalTicksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordSignalTicksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksResponse(RecordSignalTicksResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordSignalTicksResponse Clone() {
      return new RecordSignalTicksResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error> errors_ = new pbc::RepeatedField<global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error>();
    /// <summary>
    /// Errors which occurred when logging signal ticks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordSignalTicksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordSignalTicksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordSignalTicksResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordSignalTicksResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Signal tick recording error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.RecordSignalTicksResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          type_ = other.type_;
          message_ = other.message_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Types.Type type_ = 0;
        /// <summary>
        /// The type of error: if it was caused by the client, the service, or something else.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        /// An error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private uint index_;
        /// <summary>
        /// The index to identify the data being stored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Message != other.Message) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Bosdyn.Api.RecordSignalTicksResponse.Types.Error.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Error message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("CLIENT_ERROR")] ClientError = 1,
            [pbr::OriginalName("SERVER_ERROR")] ServerError = 2,
            [pbr::OriginalName("INVALID_SCHEMA_ID")] InvalidSchemaId = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class RecordEventsResponse : pb::IMessage<RecordEventsResponse> {
    private static readonly pb::MessageParser<RecordEventsResponse> _parser = new pb::MessageParser<RecordEventsResponse>(() => new RecordEventsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordEventsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsResponse(RecordEventsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordEventsResponse Clone() {
      return new RecordEventsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.RecordEventsResponse.Types.Error> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.RecordEventsResponse.Types.Error.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.RecordEventsResponse.Types.Error> errors_ = new pbc::RepeatedField<global::Bosdyn.Api.RecordEventsResponse.Types.Error>();
    /// <summary>
    /// Errors which occurred when logging events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.RecordEventsResponse.Types.Error> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordEventsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordEventsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordEventsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RecordEventsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Event recording error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.RecordEventsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          type_ = other.type_;
          message_ = other.message_;
          index_ = other.index_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Bosdyn.Api.RecordEventsResponse.Types.Error.Types.Type type_ = 0;
        /// <summary>
        /// The type of error: if it was caused by the client, the service, or something else.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RecordEventsResponse.Types.Error.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        /// An error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private uint index_;
        /// <summary>
        /// The index to identify the data being stored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (Message != other.Message) return false;
          if (Index != other.Index) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Index);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Bosdyn.Api.RecordEventsResponse.Types.Error.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Error message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("NONE")] None = 0,
            [pbr::OriginalName("CLIENT_ERROR")] ClientError = 1,
            [pbr::OriginalName("SERVER_ERROR")] ServerError = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class RegisterSignalSchemaRequest : pb::IMessage<RegisterSignalSchemaRequest> {
    private static readonly pb::MessageParser<RegisterSignalSchemaRequest> _parser = new pb::MessageParser<RegisterSignalSchemaRequest>(() => new RegisterSignalSchemaRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterSignalSchemaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaRequest(RegisterSignalSchemaRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaRequest Clone() {
      return new RegisterSignalSchemaRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Bosdyn.Api.SignalSchema schema_;
    /// <summary>
    /// Defines a schema for interpreting SignalTick data containing packed signals-type data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SignalSchema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterSignalSchemaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterSignalSchemaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterSignalSchemaRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Bosdyn.Api.SignalSchema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (schema_ == null) {
              Schema = new global::Bosdyn.Api.SignalSchema();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterSignalSchemaResponse : pb::IMessage<RegisterSignalSchemaResponse> {
    private static readonly pb::MessageParser<RegisterSignalSchemaResponse> _parser = new pb::MessageParser<RegisterSignalSchemaResponse>(() => new RegisterSignalSchemaResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterSignalSchemaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataBufferReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaResponse(RegisterSignalSchemaResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      schemaId_ = other.schemaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSignalSchemaResponse Clone() {
      return new RegisterSignalSchemaResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "schema_id" field.</summary>
    public const int SchemaIdFieldNumber = 2;
    private ulong schemaId_;
    /// <summary>
    /// Server returns a unique ID based on the client ID and schema definition.
    /// Always greater than zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SchemaId {
      get { return schemaId_; }
      set {
        schemaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterSignalSchemaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterSignalSchemaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (SchemaId != other.SchemaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (SchemaId != 0UL) hash ^= SchemaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (SchemaId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SchemaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (SchemaId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SchemaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterSignalSchemaResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.SchemaId != 0UL) {
        SchemaId = other.SchemaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            SchemaId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
