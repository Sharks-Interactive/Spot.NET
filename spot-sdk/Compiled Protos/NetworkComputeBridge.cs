// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/network_compute_bridge.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/network_compute_bridge.proto</summary>
  public static partial class NetworkComputeBridgeReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/network_compute_bridge.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkComputeBridgeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNQcm90b3MvbmV0d29ya19jb21wdXRlX2JyaWRnZS5wcm90bxIKYm9zZHlu",
            "LmFwaRoTUHJvdG9zL2hlYWRlci5wcm90bxoSUHJvdG9zL2ltYWdlLnByb3Rv",
            "GhlQcm90b3Mvd29ybGRfb2JqZWN0LnByb3RvGhlnb29nbGUvcHJvdG9idWYv",
            "YW55LnByb3RvIo0BChpMaXN0QXZhaWxhYmxlTW9kZWxzUmVxdWVzdBIpCgZo",
            "ZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVlc3RIZWFkZXISRAoNc2Vy",
            "dmVyX2NvbmZpZxgCIAEoCzItLmJvc2R5bi5hcGkuTmV0d29ya0NvbXB1dGVT",
            "ZXJ2ZXJDb25maWd1cmF0aW9uIsMBChtMaXN0QXZhaWxhYmxlTW9kZWxzUmVz",
            "cG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhl",
            "YWRlchIYChBhdmFpbGFibGVfbW9kZWxzGAIgAygJEicKBmxhYmVscxgGIAMo",
            "CzIXLmJvc2R5bi5hcGkuTW9kZWxMYWJlbHMSNQoGc3RhdHVzGAUgASgOMiUu",
            "Ym9zZHluLmFwaS5MaXN0QXZhaWxhYmxlTW9kZWxzU3RhdHVzIjsKC01vZGVs",
            "TGFiZWxzEhIKCm1vZGVsX25hbWUYASABKAkSGAoQYXZhaWxhYmxlX2xhYmVs",
            "cxgCIAMoCSLBAQoVTmV0d29ya0NvbXB1dGVSZXF1ZXN0EikKBmhlYWRlchgB",
            "IAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchI3CgppbnB1dF9kYXRh",
            "GAIgASgLMiMuYm9zZHluLmFwaS5OZXR3b3JrQ29tcHV0ZUlucHV0RGF0YRJE",
            "Cg1zZXJ2ZXJfY29uZmlnGAMgASgLMi0uYm9zZHluLmFwaS5OZXR3b3JrQ29t",
            "cHV0ZVNlcnZlckNvbmZpZ3VyYXRpb24iRAoVSW1hZ2VTb3VyY2VBbmRTZXJ2",
            "aWNlEhQKDGltYWdlX3NvdXJjZRgBIAEoCRIVCg1pbWFnZV9zZXJ2aWNlGAIg",
            "ASgJIr0DChdOZXR3b3JrQ29tcHV0ZUlucHV0RGF0YRJFChhpbWFnZV9zb3Vy",
            "Y2VfYW5kX3NlcnZpY2UYByABKAsyIS5ib3NkeW4uYXBpLkltYWdlU291cmNl",
            "QW5kU2VydmljZUgAEiIKBWltYWdlGAIgASgLMhEuYm9zZHluLmFwaS5JbWFn",
            "ZUgAEigKCm90aGVyX2RhdGEYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55",
            "EhIKCm1vZGVsX25hbWUYBCABKAkSFgoObWluX2NvbmZpZGVuY2UYBSABKAIS",
            "RQoMcm90YXRlX2ltYWdlGAYgASgOMi8uYm9zZHluLmFwaS5OZXR3b3JrQ29t",
            "cHV0ZUlucHV0RGF0YS5Sb3RhdGVJbWFnZSKKAQoLUm90YXRlSW1hZ2USGAoU",
            "Uk9UQVRFX0lNQUdFX1VOS05PV04QABIcChhST1RBVEVfSU1BR0VfTk9fUk9U",
            "QVRJT04QAxIhCh1ST1RBVEVfSU1BR0VfQUxJR05fSE9SSVpPTlRBTBABEiAK",
            "HFJPVEFURV9JTUFHRV9BTElHTl9XSVRIX0JPRFkQAkIHCgVpbnB1dEoECAEQ",
            "AiJFCiFOZXR3b3JrQ29tcHV0ZVNlcnZlckNvbmZpZ3VyYXRpb24SFAoMc2Vy",
            "dmljZV9uYW1lGAMgASgJSgQIARACSgQIAhADIqMCChZOZXR3b3JrQ29tcHV0",
            "ZVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9u",
            "c2VIZWFkZXISMAoPb2JqZWN0X2luX2ltYWdlGAIgAygLMhcuYm9zZHluLmFw",
            "aS5Xb3JsZE9iamVjdBIxCg5pbWFnZV9yZXNwb25zZRgDIAEoCzIZLmJvc2R5",
            "bi5hcGkuSW1hZ2VSZXNwb25zZRIcChRpbWFnZV9yb3RhdGlvbl9hbmdsZRgG",
            "IAEoARIoCgpvdGhlcl9kYXRhGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFu",
            "eRIwCgZzdGF0dXMYBSABKA4yIC5ib3NkeW4uYXBpLk5ldHdvcmtDb21wdXRl",
            "U3RhdHVzKvIBChROZXR3b3JrQ29tcHV0ZVN0YXR1cxIiCh5ORVRXT1JLX0NP",
            "TVBVVEVfU1RBVFVTX1VOS05PV04QABIiCh5ORVRXT1JLX0NPTVBVVEVfU1RB",
            "VFVTX1NVQ0NFU1MQARI1CjFORVRXT1JLX0NPTVBVVEVfU1RBVFVTX0VYVEVS",
            "TkFMX1NFUlZJQ0VfTk9UX0ZPVU5EEAISMAosTkVUV09SS19DT01QVVRFX1NU",
            "QVRVU19FWFRFUk5BTF9TRVJWRVJfRVJST1IQAxIpCiVORVRXT1JLX0NPTVBV",
            "VEVfU1RBVFVTX1JPVEFUSU9OX0VSUk9SEAQq5AEKGUxpc3RBdmFpbGFibGVN",
            "b2RlbHNTdGF0dXMSKAokTElTVF9BVkFJTEFCTEVfTU9ERUxTX1NUQVRVU19V",
            "TktOT1dOEAASKAokTElTVF9BVkFJTEFCTEVfTU9ERUxTX1NUQVRVU19TVUND",
            "RVNTEAESOwo3TElTVF9BVkFJTEFCTEVfTU9ERUxTX1NUQVRVU19FWFRFUk5B",
            "TF9TRVJWSUNFX05PVF9GT1VORBACEjYKMkxJU1RfQVZBSUxBQkxFX01PREVM",
            "U19TVEFUVVNfRVhURVJOQUxfU0VSVkVSX0VSUk9SEANCG0IZTmV0d29ya0Nv",
            "bXB1dGVCcmlkZ2VQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.ImageReflection.Descriptor, global::Bosdyn.Api.WorldObjectReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bosdyn.Api.NetworkComputeStatus), typeof(global::Bosdyn.Api.ListAvailableModelsStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListAvailableModelsRequest), global::Bosdyn.Api.ListAvailableModelsRequest.Parser, new[]{ "Header", "ServerConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListAvailableModelsResponse), global::Bosdyn.Api.ListAvailableModelsResponse.Parser, new[]{ "Header", "AvailableModels", "Labels", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ModelLabels), global::Bosdyn.Api.ModelLabels.Parser, new[]{ "ModelName", "AvailableLabels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NetworkComputeRequest), global::Bosdyn.Api.NetworkComputeRequest.Parser, new[]{ "Header", "InputData", "ServerConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageSourceAndService), global::Bosdyn.Api.ImageSourceAndService.Parser, new[]{ "ImageSource", "ImageService" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NetworkComputeInputData), global::Bosdyn.Api.NetworkComputeInputData.Parser, new[]{ "ImageSourceAndService", "Image", "OtherData", "ModelName", "MinConfidence", "RotateImage" }, new[]{ "Input" }, new[]{ typeof(global::Bosdyn.Api.NetworkComputeInputData.Types.RotateImage) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NetworkComputeServerConfiguration), global::Bosdyn.Api.NetworkComputeServerConfiguration.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NetworkComputeResponse), global::Bosdyn.Api.NetworkComputeResponse.Parser, new[]{ "Header", "ObjectInImage", "ImageResponse", "ImageRotationAngle", "OtherData", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NetworkComputeStatus {
    /// <summary>
    /// Status is not specified.
    /// </summary>
    [pbr::OriginalName("NETWORK_COMPUTE_STATUS_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Succeeded.
    /// </summary>
    [pbr::OriginalName("NETWORK_COMPUTE_STATUS_SUCCESS")] Success = 1,
    /// <summary>
    /// External service not found in the robot's directory.
    /// </summary>
    [pbr::OriginalName("NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND")] ExternalServiceNotFound = 2,
    /// <summary>
    /// The call to the external server did not succeed.
    /// </summary>
    [pbr::OriginalName("NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR")] ExternalServerError = 3,
    /// <summary>
    /// The robot failed to rotate the image as requested.
    /// </summary>
    [pbr::OriginalName("NETWORK_COMPUTE_STATUS_ROTATION_ERROR")] RotationError = 4,
  }

  public enum ListAvailableModelsStatus {
    /// <summary>
    /// Status is not specified.
    /// </summary>
    [pbr::OriginalName("LIST_AVAILABLE_MODELS_STATUS_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Succeeded.
    /// </summary>
    [pbr::OriginalName("LIST_AVAILABLE_MODELS_STATUS_SUCCESS")] Success = 1,
    /// <summary>
    /// External service not found in the robot's directory.
    /// </summary>
    [pbr::OriginalName("LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND")] ExternalServiceNotFound = 2,
    /// <summary>
    /// The call to the external server did not succeed.
    /// </summary>
    [pbr::OriginalName("LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR")] ExternalServerError = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ListAvailableModelsRequest : pb::IMessage<ListAvailableModelsRequest> {
    private static readonly pb::MessageParser<ListAvailableModelsRequest> _parser = new pb::MessageParser<ListAvailableModelsRequest>(() => new ListAvailableModelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAvailableModelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsRequest(ListAvailableModelsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      serverConfig_ = other.serverConfig_ != null ? other.serverConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsRequest Clone() {
      return new ListAvailableModelsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "server_config" field.</summary>
    public const int ServerConfigFieldNumber = 2;
    private global::Bosdyn.Api.NetworkComputeServerConfiguration serverConfig_;
    /// <summary>
    /// Configuration about which server to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.NetworkComputeServerConfiguration ServerConfig {
      get { return serverConfig_; }
      set {
        serverConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAvailableModelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAvailableModelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(ServerConfig, other.ServerConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (serverConfig_ != null) hash ^= ServerConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (serverConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (serverConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAvailableModelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.serverConfig_ != null) {
        if (serverConfig_ == null) {
          ServerConfig = new global::Bosdyn.Api.NetworkComputeServerConfiguration();
        }
        ServerConfig.MergeFrom(other.ServerConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (serverConfig_ == null) {
              ServerConfig = new global::Bosdyn.Api.NetworkComputeServerConfiguration();
            }
            input.ReadMessage(ServerConfig);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListAvailableModelsResponse : pb::IMessage<ListAvailableModelsResponse> {
    private static readonly pb::MessageParser<ListAvailableModelsResponse> _parser = new pb::MessageParser<ListAvailableModelsResponse>(() => new ListAvailableModelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAvailableModelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsResponse(ListAvailableModelsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      availableModels_ = other.availableModels_.Clone();
      labels_ = other.labels_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAvailableModelsResponse Clone() {
      return new ListAvailableModelsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "available_models" field.</summary>
    public const int AvailableModelsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_availableModels_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> availableModels_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Provide list of available models
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AvailableModels {
      get { return availableModels_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ModelLabels> _repeated_labels_codec
        = pb::FieldCodec.ForMessage(50, global::Bosdyn.Api.ModelLabels.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ModelLabels> labels_ = new pbc::RepeatedField<global::Bosdyn.Api.ModelLabels>();
    /// <summary>
    /// Optional information about available classes for each model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ModelLabels> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Bosdyn.Api.ListAvailableModelsStatus status_ = 0;
    /// <summary>
    /// Command status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ListAvailableModelsStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAvailableModelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAvailableModelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!availableModels_.Equals(other.availableModels_)) return false;
      if(!labels_.Equals(other.labels_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= availableModels_.GetHashCode();
      hash ^= labels_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      availableModels_.WriteTo(output, _repeated_availableModels_codec);
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      labels_.WriteTo(output, _repeated_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += availableModels_.CalculateSize(_repeated_availableModels_codec);
      size += labels_.CalculateSize(_repeated_labels_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAvailableModelsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      availableModels_.Add(other.availableModels_);
      labels_.Add(other.labels_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            availableModels_.AddEntriesFrom(input, _repeated_availableModels_codec);
            break;
          }
          case 40: {
            Status = (global::Bosdyn.Api.ListAvailableModelsStatus) input.ReadEnum();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelLabels : pb::IMessage<ModelLabels> {
    private static readonly pb::MessageParser<ModelLabels> _parser = new pb::MessageParser<ModelLabels>(() => new ModelLabels());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelLabels> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelLabels() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelLabels(ModelLabels other) : this() {
      modelName_ = other.modelName_;
      availableLabels_ = other.availableLabels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelLabels Clone() {
      return new ModelLabels(this);
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 1;
    private string modelName_ = "";
    /// <summary>
    /// Model name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "available_labels" field.</summary>
    public const int AvailableLabelsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_availableLabels_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> availableLabels_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of class labels returned by this model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AvailableLabels {
      get { return availableLabels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelLabels);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelLabels other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelName != other.ModelName) return false;
      if(!availableLabels_.Equals(other.availableLabels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      hash ^= availableLabels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ModelName);
      }
      availableLabels_.WriteTo(output, _repeated_availableLabels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      size += availableLabels_.CalculateSize(_repeated_availableLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelLabels other) {
      if (other == null) {
        return;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      availableLabels_.Add(other.availableLabels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelName = input.ReadString();
            break;
          }
          case 18: {
            availableLabels_.AddEntriesFrom(input, _repeated_availableLabels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkComputeRequest : pb::IMessage<NetworkComputeRequest> {
    private static readonly pb::MessageParser<NetworkComputeRequest> _parser = new pb::MessageParser<NetworkComputeRequest>(() => new NetworkComputeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkComputeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeRequest(NetworkComputeRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      inputData_ = other.inputData_ != null ? other.inputData_.Clone() : null;
      serverConfig_ = other.serverConfig_ != null ? other.serverConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeRequest Clone() {
      return new NetworkComputeRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "input_data" field.</summary>
    public const int InputDataFieldNumber = 2;
    private global::Bosdyn.Api.NetworkComputeInputData inputData_;
    /// <summary>
    /// Input data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.NetworkComputeInputData InputData {
      get { return inputData_; }
      set {
        inputData_ = value;
      }
    }

    /// <summary>Field number for the "server_config" field.</summary>
    public const int ServerConfigFieldNumber = 3;
    private global::Bosdyn.Api.NetworkComputeServerConfiguration serverConfig_;
    /// <summary>
    /// Configuration about which server to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.NetworkComputeServerConfiguration ServerConfig {
      get { return serverConfig_; }
      set {
        serverConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkComputeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkComputeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(InputData, other.InputData)) return false;
      if (!object.Equals(ServerConfig, other.ServerConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (inputData_ != null) hash ^= InputData.GetHashCode();
      if (serverConfig_ != null) hash ^= ServerConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (inputData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InputData);
      }
      if (serverConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (inputData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputData);
      }
      if (serverConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkComputeRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.inputData_ != null) {
        if (inputData_ == null) {
          InputData = new global::Bosdyn.Api.NetworkComputeInputData();
        }
        InputData.MergeFrom(other.InputData);
      }
      if (other.serverConfig_ != null) {
        if (serverConfig_ == null) {
          ServerConfig = new global::Bosdyn.Api.NetworkComputeServerConfiguration();
        }
        ServerConfig.MergeFrom(other.ServerConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (inputData_ == null) {
              InputData = new global::Bosdyn.Api.NetworkComputeInputData();
            }
            input.ReadMessage(InputData);
            break;
          }
          case 26: {
            if (serverConfig_ == null) {
              ServerConfig = new global::Bosdyn.Api.NetworkComputeServerConfiguration();
            }
            input.ReadMessage(ServerConfig);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageSourceAndService : pb::IMessage<ImageSourceAndService> {
    private static readonly pb::MessageParser<ImageSourceAndService> _parser = new pb::MessageParser<ImageSourceAndService>(() => new ImageSourceAndService());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSourceAndService> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceAndService() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceAndService(ImageSourceAndService other) : this() {
      imageSource_ = other.imageSource_;
      imageService_ = other.imageService_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceAndService Clone() {
      return new ImageSourceAndService(this);
    }

    /// <summary>Field number for the "image_source" field.</summary>
    public const int ImageSourceFieldNumber = 1;
    private string imageSource_ = "";
    /// <summary>
    /// Image source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageSource {
      get { return imageSource_; }
      set {
        imageSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_service" field.</summary>
    public const int ImageServiceFieldNumber = 2;
    private string imageService_ = "";
    /// <summary>
    /// Image service.  If blank, it is assumed to be the robot's default image service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageService {
      get { return imageService_; }
      set {
        imageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSourceAndService);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSourceAndService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageSource != other.ImageSource) return false;
      if (ImageService != other.ImageService) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageSource.Length != 0) hash ^= ImageSource.GetHashCode();
      if (ImageService.Length != 0) hash ^= ImageService.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageSource.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageSource);
      }
      if (ImageService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImageService);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageSource);
      }
      if (ImageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageService);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSourceAndService other) {
      if (other == null) {
        return;
      }
      if (other.ImageSource.Length != 0) {
        ImageSource = other.ImageSource;
      }
      if (other.ImageService.Length != 0) {
        ImageService = other.ImageService;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageSource = input.ReadString();
            break;
          }
          case 18: {
            ImageService = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkComputeInputData : pb::IMessage<NetworkComputeInputData> {
    private static readonly pb::MessageParser<NetworkComputeInputData> _parser = new pb::MessageParser<NetworkComputeInputData>(() => new NetworkComputeInputData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkComputeInputData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeInputData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeInputData(NetworkComputeInputData other) : this() {
      otherData_ = other.otherData_ != null ? other.otherData_.Clone() : null;
      modelName_ = other.modelName_;
      minConfidence_ = other.minConfidence_;
      rotateImage_ = other.rotateImage_;
      switch (other.InputCase) {
        case InputOneofCase.ImageSourceAndService:
          ImageSourceAndService = other.ImageSourceAndService.Clone();
          break;
        case InputOneofCase.Image:
          Image = other.Image.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeInputData Clone() {
      return new NetworkComputeInputData(this);
    }

    /// <summary>Field number for the "image_source_and_service" field.</summary>
    public const int ImageSourceAndServiceFieldNumber = 7;
    /// <summary>
    /// Image source to collect an image from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageSourceAndService ImageSourceAndService {
      get { return inputCase_ == InputOneofCase.ImageSourceAndService ? (global::Bosdyn.Api.ImageSourceAndService) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.ImageSourceAndService;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    /// <summary>
    /// Image to process, if you are not using an image source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Image Image {
      get { return inputCase_ == InputOneofCase.Image ? (global::Bosdyn.Api.Image) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Image;
      }
    }

    /// <summary>Field number for the "other_data" field.</summary>
    public const int OtherDataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any otherData_;
    /// <summary>
    /// Other data that isn't an image.  NetworkComputeBridge service will pass it through
    /// to the remote server so you can do computation on arbitrary data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any OtherData {
      get { return otherData_; }
      set {
        otherData_ = value;
      }
    }

    /// <summary>Field number for the "model_name" field.</summary>
    public const int ModelNameFieldNumber = 4;
    private string modelName_ = "";
    /// <summary>
    /// Name of the model to be run on the input data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_confidence" field.</summary>
    public const int MinConfidenceFieldNumber = 5;
    private float minConfidence_;
    /// <summary>
    /// Minimum confidence [0.0 - 1.0] an object must have to be returned. Detections below this
    /// confidence threshold will be suppressed in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinConfidence {
      get { return minConfidence_; }
      set {
        minConfidence_ = value;
      }
    }

    /// <summary>Field number for the "rotate_image" field.</summary>
    public const int RotateImageFieldNumber = 6;
    private global::Bosdyn.Api.NetworkComputeInputData.Types.RotateImage rotateImage_ = 0;
    /// <summary>
    /// Options for rotating the image before processing. When unset, no rotation is applied.
    /// Rotation is supported for data from image services that provide a FrameTreeSnapshot
    /// defining the sensor's frame with respect to Spot's body and vision frames.
    /// Field is ignored for non-image input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.NetworkComputeInputData.Types.RotateImage RotateImage {
      get { return rotateImage_; }
      set {
        rotateImage_ = value;
      }
    }

    private object input_;
    /// <summary>Enum of possible cases for the "input" oneof.</summary>
    public enum InputOneofCase {
      None = 0,
      ImageSourceAndService = 7,
      Image = 2,
    }
    private InputOneofCase inputCase_ = InputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputOneofCase InputCase {
      get { return inputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInput() {
      inputCase_ = InputOneofCase.None;
      input_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkComputeInputData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkComputeInputData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ImageSourceAndService, other.ImageSourceAndService)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(OtherData, other.OtherData)) return false;
      if (ModelName != other.ModelName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinConfidence, other.MinConfidence)) return false;
      if (RotateImage != other.RotateImage) return false;
      if (InputCase != other.InputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inputCase_ == InputOneofCase.ImageSourceAndService) hash ^= ImageSourceAndService.GetHashCode();
      if (inputCase_ == InputOneofCase.Image) hash ^= Image.GetHashCode();
      if (otherData_ != null) hash ^= OtherData.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (MinConfidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinConfidence);
      if (RotateImage != 0) hash ^= RotateImage.GetHashCode();
      hash ^= (int) inputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inputCase_ == InputOneofCase.Image) {
        output.WriteRawTag(18);
        output.WriteMessage(Image);
      }
      if (otherData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OtherData);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelName);
      }
      if (MinConfidence != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MinConfidence);
      }
      if (RotateImage != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RotateImage);
      }
      if (inputCase_ == InputOneofCase.ImageSourceAndService) {
        output.WriteRawTag(58);
        output.WriteMessage(ImageSourceAndService);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inputCase_ == InputOneofCase.ImageSourceAndService) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageSourceAndService);
      }
      if (inputCase_ == InputOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (otherData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherData);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (MinConfidence != 0F) {
        size += 1 + 4;
      }
      if (RotateImage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RotateImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkComputeInputData other) {
      if (other == null) {
        return;
      }
      if (other.otherData_ != null) {
        if (otherData_ == null) {
          OtherData = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        OtherData.MergeFrom(other.OtherData);
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.MinConfidence != 0F) {
        MinConfidence = other.MinConfidence;
      }
      if (other.RotateImage != 0) {
        RotateImage = other.RotateImage;
      }
      switch (other.InputCase) {
        case InputOneofCase.ImageSourceAndService:
          if (ImageSourceAndService == null) {
            ImageSourceAndService = new global::Bosdyn.Api.ImageSourceAndService();
          }
          ImageSourceAndService.MergeFrom(other.ImageSourceAndService);
          break;
        case InputOneofCase.Image:
          if (Image == null) {
            Image = new global::Bosdyn.Api.Image();
          }
          Image.MergeFrom(other.Image);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Bosdyn.Api.Image subBuilder = new global::Bosdyn.Api.Image();
            if (inputCase_ == InputOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
          case 26: {
            if (otherData_ == null) {
              OtherData = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(OtherData);
            break;
          }
          case 34: {
            ModelName = input.ReadString();
            break;
          }
          case 45: {
            MinConfidence = input.ReadFloat();
            break;
          }
          case 48: {
            RotateImage = (global::Bosdyn.Api.NetworkComputeInputData.Types.RotateImage) input.ReadEnum();
            break;
          }
          case 58: {
            global::Bosdyn.Api.ImageSourceAndService subBuilder = new global::Bosdyn.Api.ImageSourceAndService();
            if (inputCase_ == InputOneofCase.ImageSourceAndService) {
              subBuilder.MergeFrom(ImageSourceAndService);
            }
            input.ReadMessage(subBuilder);
            ImageSourceAndService = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetworkComputeInputData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RotateImage {
        /// <summary>
        /// Unspecified rotation method. Do not use.
        /// </summary>
        [pbr::OriginalName("ROTATE_IMAGE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// No rotation applied.
        /// </summary>
        [pbr::OriginalName("ROTATE_IMAGE_NO_ROTATION")] NoRotation = 3,
        /// <summary>
        /// Rotate the images so the horizon is not rolled with respect to gravity.
        /// </summary>
        [pbr::OriginalName("ROTATE_IMAGE_ALIGN_HORIZONTAL")] AlignHorizontal = 1,
        /// <summary>
        /// Rotate the images so that the horizon in the image is aligned with the inclination of
        /// the body. For example, when applied to the left body camera this option rotates the image
        /// so that the world does not appear upside down when the robot is standing upright, but if the
        /// body is pitched up, the image will appear rotated.
        /// </summary>
        [pbr::OriginalName("ROTATE_IMAGE_ALIGN_WITH_BODY")] AlignWithBody = 2,
      }

    }
    #endregion

  }

  public sealed partial class NetworkComputeServerConfiguration : pb::IMessage<NetworkComputeServerConfiguration> {
    private static readonly pb::MessageParser<NetworkComputeServerConfiguration> _parser = new pb::MessageParser<NetworkComputeServerConfiguration>(() => new NetworkComputeServerConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkComputeServerConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeServerConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeServerConfiguration(NetworkComputeServerConfiguration other) : this() {
      serviceName_ = other.serviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeServerConfiguration Clone() {
      return new NetworkComputeServerConfiguration(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 3;
    private string serviceName_ = "";
    /// <summary>
    /// Service name in the robot's Directory for the worker that will process the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkComputeServerConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkComputeServerConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkComputeServerConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkComputeResponse : pb::IMessage<NetworkComputeResponse> {
    private static readonly pb::MessageParser<NetworkComputeResponse> _parser = new pb::MessageParser<NetworkComputeResponse>(() => new NetworkComputeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkComputeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.NetworkComputeBridgeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeResponse(NetworkComputeResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      objectInImage_ = other.objectInImage_.Clone();
      imageResponse_ = other.imageResponse_ != null ? other.imageResponse_.Clone() : null;
      imageRotationAngle_ = other.imageRotationAngle_;
      otherData_ = other.otherData_ != null ? other.otherData_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkComputeResponse Clone() {
      return new NetworkComputeResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "object_in_image" field.</summary>
    public const int ObjectInImageFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.WorldObject> _repeated_objectInImage_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.WorldObject.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.WorldObject> objectInImage_ = new pbc::RepeatedField<global::Bosdyn.Api.WorldObject>();
    /// <summary>
    /// Detection information. May include bounding boxes, image coordinates, 3D pose information, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.WorldObject> ObjectInImage {
      get { return objectInImage_; }
    }

    /// <summary>Field number for the "image_response" field.</summary>
    public const int ImageResponseFieldNumber = 3;
    private global::Bosdyn.Api.ImageResponse imageResponse_;
    /// <summary>
    /// The image we computed the data on. If the input image itself was provided in the request,
    /// this field is not populated.  This field is not set for non-image input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageResponse ImageResponse {
      get { return imageResponse_; }
      set {
        imageResponse_ = value;
      }
    }

    /// <summary>Field number for the "image_rotation_angle" field.</summary>
    public const int ImageRotationAngleFieldNumber = 6;
    private double imageRotationAngle_;
    /// <summary>
    /// If the image was rotated for processing, this field will contain the amount it was rotated by
    /// (counter-clockwise, in radians).
    ///
    /// Note that the image returned is *not* rotated, regardless of if it was rotated
    /// for processing.  This ensures that all other calibration and metadata remains valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ImageRotationAngle {
      get { return imageRotationAngle_; }
      set {
        imageRotationAngle_ = value;
      }
    }

    /// <summary>Field number for the "other_data" field.</summary>
    public const int OtherDataFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any otherData_;
    /// <summary>
    /// Non image-type data that can optionally be returned by a remote server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any OtherData {
      get { return otherData_; }
      set {
        otherData_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Bosdyn.Api.NetworkComputeStatus status_ = 0;
    /// <summary>
    /// Command status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.NetworkComputeStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkComputeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkComputeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!objectInImage_.Equals(other.objectInImage_)) return false;
      if (!object.Equals(ImageResponse, other.ImageResponse)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImageRotationAngle, other.ImageRotationAngle)) return false;
      if (!object.Equals(OtherData, other.OtherData)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= objectInImage_.GetHashCode();
      if (imageResponse_ != null) hash ^= ImageResponse.GetHashCode();
      if (ImageRotationAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImageRotationAngle);
      if (otherData_ != null) hash ^= OtherData.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      objectInImage_.WriteTo(output, _repeated_objectInImage_codec);
      if (imageResponse_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ImageResponse);
      }
      if (otherData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OtherData);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (ImageRotationAngle != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ImageRotationAngle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += objectInImage_.CalculateSize(_repeated_objectInImage_codec);
      if (imageResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageResponse);
      }
      if (ImageRotationAngle != 0D) {
        size += 1 + 8;
      }
      if (otherData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherData);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkComputeResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      objectInImage_.Add(other.objectInImage_);
      if (other.imageResponse_ != null) {
        if (imageResponse_ == null) {
          ImageResponse = new global::Bosdyn.Api.ImageResponse();
        }
        ImageResponse.MergeFrom(other.ImageResponse);
      }
      if (other.ImageRotationAngle != 0D) {
        ImageRotationAngle = other.ImageRotationAngle;
      }
      if (other.otherData_ != null) {
        if (otherData_ == null) {
          OtherData = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        OtherData.MergeFrom(other.OtherData);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            objectInImage_.AddEntriesFrom(input, _repeated_objectInImage_codec);
            break;
          }
          case 26: {
            if (imageResponse_ == null) {
              ImageResponse = new global::Bosdyn.Api.ImageResponse();
            }
            input.ReadMessage(ImageResponse);
            break;
          }
          case 34: {
            if (otherData_ == null) {
              OtherData = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(OtherData);
            break;
          }
          case 40: {
            Status = (global::Bosdyn.Api.NetworkComputeStatus) input.ReadEnum();
            break;
          }
          case 49: {
            ImageRotationAngle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
