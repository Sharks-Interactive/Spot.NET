// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/mobility_command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/mobility_command.proto</summary>
  public static partial class MobilityCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/mobility_command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MobilityCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90b3MvbW9iaWxpdHlfY29tbWFuZC5wcm90bxIKYm9zZHluLmFwaRoa",
            "UHJvdG9zL2Jhc2ljX2NvbW1hbmQucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9h",
            "bnkucHJvdG8itAgKD01vYmlsaXR5Q29tbWFuZBr6AwoHUmVxdWVzdBJKChZz",
            "ZTJfdHJhamVjdG9yeV9yZXF1ZXN0GAEgASgLMiguYm9zZHluLmFwaS5TRTJU",
            "cmFqZWN0b3J5Q29tbWFuZC5SZXF1ZXN0SAASRgoUc2UyX3ZlbG9jaXR5X3Jl",
            "cXVlc3QYAiABKAsyJi5ib3NkeW4uYXBpLlNFMlZlbG9jaXR5Q29tbWFuZC5S",
            "ZXF1ZXN0SAASNQoLc2l0X3JlcXVlc3QYAyABKAsyHi5ib3NkeW4uYXBpLlNp",
            "dENvbW1hbmQuUmVxdWVzdEgAEjkKDXN0YW5kX3JlcXVlc3QYBCABKAsyIC5i",
            "b3NkeW4uYXBpLlN0YW5kQ29tbWFuZC5SZXF1ZXN0SAASOwoOc3RhbmNlX3Jl",
            "cXVlc3QYBSABKAsyIS5ib3NkeW4uYXBpLlN0YW5jZUNvbW1hbmQuUmVxdWVz",
            "dEgAEjcKDHN0b3BfcmVxdWVzdBgGIAEoCzIfLmJvc2R5bi5hcGkuU3RvcENv",
            "bW1hbmQuUmVxdWVzdEgAEkIKEmZvbGxvd19hcm1fcmVxdWVzdBgHIAEoCzIk",
            "LmJvc2R5bi5hcGkuRm9sbG93QXJtQ29tbWFuZC5SZXF1ZXN0SAASJAoGcGFy",
            "YW1zGGQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIJCgdjb21tYW5kGqME",
            "CghGZWVkYmFjaxJMChdzZTJfdHJhamVjdG9yeV9mZWVkYmFjaxgBIAEoCzIp",
            "LmJvc2R5bi5hcGkuU0UyVHJhamVjdG9yeUNvbW1hbmQuRmVlZGJhY2tIABJI",
            "ChVzZTJfdmVsb2NpdHlfZmVlZGJhY2sYAiABKAsyJy5ib3NkeW4uYXBpLlNF",
            "MlZlbG9jaXR5Q29tbWFuZC5GZWVkYmFja0gAEjcKDHNpdF9mZWVkYmFjaxgD",
            "IAEoCzIfLmJvc2R5bi5hcGkuU2l0Q29tbWFuZC5GZWVkYmFja0gAEjsKDnN0",
            "YW5kX2ZlZWRiYWNrGAQgASgLMiEuYm9zZHluLmFwaS5TdGFuZENvbW1hbmQu",
            "RmVlZGJhY2tIABI9Cg9zdGFuY2VfZmVlZGJhY2sYBSABKAsyIi5ib3NkeW4u",
            "YXBpLlN0YW5jZUNvbW1hbmQuRmVlZGJhY2tIABI5Cg1zdG9wX2ZlZWRiYWNr",
            "GAYgASgLMiAuYm9zZHluLmFwaS5TdG9wQ29tbWFuZC5GZWVkYmFja0gAEkQK",
            "E2ZvbGxvd19hcm1fZmVlZGJhY2sYByABKAsyJS5ib3NkeW4uYXBpLkZvbGxv",
            "d0FybUNvbW1hbmQuRmVlZGJhY2tIABI9CgZzdGF0dXMYZCABKA4yLS5ib3Nk",
            "eW4uYXBpLlJvYm90Q29tbWFuZEZlZWRiYWNrU3RhdHVzLlN0YXR1c0IKCghm",
            "ZWVkYmFja0IWQhRNb2JpbGl0eUNvbW1hbmRQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.BasicCommandReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MobilityCommand), global::Bosdyn.Api.MobilityCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MobilityCommand.Types.Request), global::Bosdyn.Api.MobilityCommand.Types.Request.Parser, new[]{ "Se2TrajectoryRequest", "Se2VelocityRequest", "SitRequest", "StandRequest", "StanceRequest", "StopRequest", "FollowArmRequest", "Params" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MobilityCommand.Types.Feedback), global::Bosdyn.Api.MobilityCommand.Types.Feedback.Parser, new[]{ "Se2TrajectoryFeedback", "Se2VelocityFeedback", "SitFeedback", "StandFeedback", "StanceFeedback", "StopFeedback", "FollowArmFeedback", "Status" }, new[]{ "Feedback" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The robot command message to specify a basic command that moves the robot.
  /// </summary>
  public sealed partial class MobilityCommand : pb::IMessage<MobilityCommand> {
    private static readonly pb::MessageParser<MobilityCommand> _parser = new pb::MessageParser<MobilityCommand>(() => new MobilityCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MobilityCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.MobilityCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MobilityCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MobilityCommand(MobilityCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MobilityCommand Clone() {
      return new MobilityCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MobilityCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MobilityCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MobilityCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MobilityCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The mobility request must be one of the basic command primitives.
      /// </summary>
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.MobilityCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          params_ = other.params_ != null ? other.params_.Clone() : null;
          switch (other.CommandCase) {
            case CommandOneofCase.Se2TrajectoryRequest:
              Se2TrajectoryRequest = other.Se2TrajectoryRequest.Clone();
              break;
            case CommandOneofCase.Se2VelocityRequest:
              Se2VelocityRequest = other.Se2VelocityRequest.Clone();
              break;
            case CommandOneofCase.SitRequest:
              SitRequest = other.SitRequest.Clone();
              break;
            case CommandOneofCase.StandRequest:
              StandRequest = other.StandRequest.Clone();
              break;
            case CommandOneofCase.StanceRequest:
              StanceRequest = other.StanceRequest.Clone();
              break;
            case CommandOneofCase.StopRequest:
              StopRequest = other.StopRequest.Clone();
              break;
            case CommandOneofCase.FollowArmRequest:
              FollowArmRequest = other.FollowArmRequest.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "se2_trajectory_request" field.</summary>
        public const int Se2TrajectoryRequestFieldNumber = 1;
        /// <summary>
        /// Command to move the robot along a trajectory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE2TrajectoryCommand.Types.Request Se2TrajectoryRequest {
          get { return commandCase_ == CommandOneofCase.Se2TrajectoryRequest ? (global::Bosdyn.Api.SE2TrajectoryCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Se2TrajectoryRequest;
          }
        }

        /// <summary>Field number for the "se2_velocity_request" field.</summary>
        public const int Se2VelocityRequestFieldNumber = 2;
        /// <summary>
        /// Command to move the robot at a fixed velocity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE2VelocityCommand.Types.Request Se2VelocityRequest {
          get { return commandCase_ == CommandOneofCase.Se2VelocityRequest ? (global::Bosdyn.Api.SE2VelocityCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Se2VelocityRequest;
          }
        }

        /// <summary>Field number for the "sit_request" field.</summary>
        public const int SitRequestFieldNumber = 3;
        /// <summary>
        /// Command to sit the robot down.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SitCommand.Types.Request SitRequest {
          get { return commandCase_ == CommandOneofCase.SitRequest ? (global::Bosdyn.Api.SitCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SitRequest;
          }
        }

        /// <summary>Field number for the "stand_request" field.</summary>
        public const int StandRequestFieldNumber = 4;
        /// <summary>
        /// Command to stand up the robot.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StandCommand.Types.Request StandRequest {
          get { return commandCase_ == CommandOneofCase.StandRequest ? (global::Bosdyn.Api.StandCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.StandRequest;
          }
        }

        /// <summary>Field number for the "stance_request" field.</summary>
        public const int StanceRequestFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StanceCommand.Types.Request StanceRequest {
          get { return commandCase_ == CommandOneofCase.StanceRequest ? (global::Bosdyn.Api.StanceCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.StanceRequest;
          }
        }

        /// <summary>Field number for the "stop_request" field.</summary>
        public const int StopRequestFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StopCommand.Types.Request StopRequest {
          get { return commandCase_ == CommandOneofCase.StopRequest ? (global::Bosdyn.Api.StopCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.StopRequest;
          }
        }

        /// <summary>Field number for the "follow_arm_request" field.</summary>
        public const int FollowArmRequestFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.FollowArmCommand.Types.Request FollowArmRequest {
          get { return commandCase_ == CommandOneofCase.FollowArmRequest ? (global::Bosdyn.Api.FollowArmCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.FollowArmRequest;
          }
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 100;
        private global::Google.Protobuf.WellKnownTypes.Any params_;
        /// <summary>
        /// Robot specific command parameters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Any Params {
          get { return params_; }
          set {
            params_ = value;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          Se2TrajectoryRequest = 1,
          Se2VelocityRequest = 2,
          SitRequest = 3,
          StandRequest = 4,
          StanceRequest = 5,
          StopRequest = 6,
          FollowArmRequest = 7,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Se2TrajectoryRequest, other.Se2TrajectoryRequest)) return false;
          if (!object.Equals(Se2VelocityRequest, other.Se2VelocityRequest)) return false;
          if (!object.Equals(SitRequest, other.SitRequest)) return false;
          if (!object.Equals(StandRequest, other.StandRequest)) return false;
          if (!object.Equals(StanceRequest, other.StanceRequest)) return false;
          if (!object.Equals(StopRequest, other.StopRequest)) return false;
          if (!object.Equals(FollowArmRequest, other.FollowArmRequest)) return false;
          if (!object.Equals(Params, other.Params)) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.Se2TrajectoryRequest) hash ^= Se2TrajectoryRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.Se2VelocityRequest) hash ^= Se2VelocityRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.SitRequest) hash ^= SitRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.StandRequest) hash ^= StandRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.StanceRequest) hash ^= StanceRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.StopRequest) hash ^= StopRequest.GetHashCode();
          if (commandCase_ == CommandOneofCase.FollowArmRequest) hash ^= FollowArmRequest.GetHashCode();
          if (params_ != null) hash ^= Params.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.Se2TrajectoryRequest) {
            output.WriteRawTag(10);
            output.WriteMessage(Se2TrajectoryRequest);
          }
          if (commandCase_ == CommandOneofCase.Se2VelocityRequest) {
            output.WriteRawTag(18);
            output.WriteMessage(Se2VelocityRequest);
          }
          if (commandCase_ == CommandOneofCase.SitRequest) {
            output.WriteRawTag(26);
            output.WriteMessage(SitRequest);
          }
          if (commandCase_ == CommandOneofCase.StandRequest) {
            output.WriteRawTag(34);
            output.WriteMessage(StandRequest);
          }
          if (commandCase_ == CommandOneofCase.StanceRequest) {
            output.WriteRawTag(42);
            output.WriteMessage(StanceRequest);
          }
          if (commandCase_ == CommandOneofCase.StopRequest) {
            output.WriteRawTag(50);
            output.WriteMessage(StopRequest);
          }
          if (commandCase_ == CommandOneofCase.FollowArmRequest) {
            output.WriteRawTag(58);
            output.WriteMessage(FollowArmRequest);
          }
          if (params_ != null) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Params);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.Se2TrajectoryRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Se2TrajectoryRequest);
          }
          if (commandCase_ == CommandOneofCase.Se2VelocityRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Se2VelocityRequest);
          }
          if (commandCase_ == CommandOneofCase.SitRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SitRequest);
          }
          if (commandCase_ == CommandOneofCase.StandRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandRequest);
          }
          if (commandCase_ == CommandOneofCase.StanceRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StanceRequest);
          }
          if (commandCase_ == CommandOneofCase.StopRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopRequest);
          }
          if (commandCase_ == CommandOneofCase.FollowArmRequest) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FollowArmRequest);
          }
          if (params_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Params);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.params_ != null) {
            if (params_ == null) {
              Params = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            Params.MergeFrom(other.Params);
          }
          switch (other.CommandCase) {
            case CommandOneofCase.Se2TrajectoryRequest:
              if (Se2TrajectoryRequest == null) {
                Se2TrajectoryRequest = new global::Bosdyn.Api.SE2TrajectoryCommand.Types.Request();
              }
              Se2TrajectoryRequest.MergeFrom(other.Se2TrajectoryRequest);
              break;
            case CommandOneofCase.Se2VelocityRequest:
              if (Se2VelocityRequest == null) {
                Se2VelocityRequest = new global::Bosdyn.Api.SE2VelocityCommand.Types.Request();
              }
              Se2VelocityRequest.MergeFrom(other.Se2VelocityRequest);
              break;
            case CommandOneofCase.SitRequest:
              if (SitRequest == null) {
                SitRequest = new global::Bosdyn.Api.SitCommand.Types.Request();
              }
              SitRequest.MergeFrom(other.SitRequest);
              break;
            case CommandOneofCase.StandRequest:
              if (StandRequest == null) {
                StandRequest = new global::Bosdyn.Api.StandCommand.Types.Request();
              }
              StandRequest.MergeFrom(other.StandRequest);
              break;
            case CommandOneofCase.StanceRequest:
              if (StanceRequest == null) {
                StanceRequest = new global::Bosdyn.Api.StanceCommand.Types.Request();
              }
              StanceRequest.MergeFrom(other.StanceRequest);
              break;
            case CommandOneofCase.StopRequest:
              if (StopRequest == null) {
                StopRequest = new global::Bosdyn.Api.StopCommand.Types.Request();
              }
              StopRequest.MergeFrom(other.StopRequest);
              break;
            case CommandOneofCase.FollowArmRequest:
              if (FollowArmRequest == null) {
                FollowArmRequest = new global::Bosdyn.Api.FollowArmCommand.Types.Request();
              }
              FollowArmRequest.MergeFrom(other.FollowArmRequest);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Bosdyn.Api.SE2TrajectoryCommand.Types.Request subBuilder = new global::Bosdyn.Api.SE2TrajectoryCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.Se2TrajectoryRequest) {
                  subBuilder.MergeFrom(Se2TrajectoryRequest);
                }
                input.ReadMessage(subBuilder);
                Se2TrajectoryRequest = subBuilder;
                break;
              }
              case 18: {
                global::Bosdyn.Api.SE2VelocityCommand.Types.Request subBuilder = new global::Bosdyn.Api.SE2VelocityCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.Se2VelocityRequest) {
                  subBuilder.MergeFrom(Se2VelocityRequest);
                }
                input.ReadMessage(subBuilder);
                Se2VelocityRequest = subBuilder;
                break;
              }
              case 26: {
                global::Bosdyn.Api.SitCommand.Types.Request subBuilder = new global::Bosdyn.Api.SitCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.SitRequest) {
                  subBuilder.MergeFrom(SitRequest);
                }
                input.ReadMessage(subBuilder);
                SitRequest = subBuilder;
                break;
              }
              case 34: {
                global::Bosdyn.Api.StandCommand.Types.Request subBuilder = new global::Bosdyn.Api.StandCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.StandRequest) {
                  subBuilder.MergeFrom(StandRequest);
                }
                input.ReadMessage(subBuilder);
                StandRequest = subBuilder;
                break;
              }
              case 42: {
                global::Bosdyn.Api.StanceCommand.Types.Request subBuilder = new global::Bosdyn.Api.StanceCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.StanceRequest) {
                  subBuilder.MergeFrom(StanceRequest);
                }
                input.ReadMessage(subBuilder);
                StanceRequest = subBuilder;
                break;
              }
              case 50: {
                global::Bosdyn.Api.StopCommand.Types.Request subBuilder = new global::Bosdyn.Api.StopCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.StopRequest) {
                  subBuilder.MergeFrom(StopRequest);
                }
                input.ReadMessage(subBuilder);
                StopRequest = subBuilder;
                break;
              }
              case 58: {
                global::Bosdyn.Api.FollowArmCommand.Types.Request subBuilder = new global::Bosdyn.Api.FollowArmCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.FollowArmRequest) {
                  subBuilder.MergeFrom(FollowArmRequest);
                }
                input.ReadMessage(subBuilder);
                FollowArmRequest = subBuilder;
                break;
              }
              case 802: {
                if (params_ == null) {
                  Params = new global::Google.Protobuf.WellKnownTypes.Any();
                }
                input.ReadMessage(Params);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The feedback for the mobility command that will provide information on the progress
      /// of the robot command.
      /// </summary>
      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.MobilityCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          switch (other.FeedbackCase) {
            case FeedbackOneofCase.Se2TrajectoryFeedback:
              Se2TrajectoryFeedback = other.Se2TrajectoryFeedback.Clone();
              break;
            case FeedbackOneofCase.Se2VelocityFeedback:
              Se2VelocityFeedback = other.Se2VelocityFeedback.Clone();
              break;
            case FeedbackOneofCase.SitFeedback:
              SitFeedback = other.SitFeedback.Clone();
              break;
            case FeedbackOneofCase.StandFeedback:
              StandFeedback = other.StandFeedback.Clone();
              break;
            case FeedbackOneofCase.StanceFeedback:
              StanceFeedback = other.StanceFeedback.Clone();
              break;
            case FeedbackOneofCase.StopFeedback:
              StopFeedback = other.StopFeedback.Clone();
              break;
            case FeedbackOneofCase.FollowArmFeedback:
              FollowArmFeedback = other.FollowArmFeedback.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "se2_trajectory_feedback" field.</summary>
        public const int Se2TrajectoryFeedbackFieldNumber = 1;
        /// <summary>
        /// Feedback for the trajectory command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE2TrajectoryCommand.Types.Feedback Se2TrajectoryFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.Se2TrajectoryFeedback ? (global::Bosdyn.Api.SE2TrajectoryCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.Se2TrajectoryFeedback;
          }
        }

        /// <summary>Field number for the "se2_velocity_feedback" field.</summary>
        public const int Se2VelocityFeedbackFieldNumber = 2;
        /// <summary>
        /// Feedback for the velocity command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE2VelocityCommand.Types.Feedback Se2VelocityFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.Se2VelocityFeedback ? (global::Bosdyn.Api.SE2VelocityCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.Se2VelocityFeedback;
          }
        }

        /// <summary>Field number for the "sit_feedback" field.</summary>
        public const int SitFeedbackFieldNumber = 3;
        /// <summary>
        /// Feedback for the sit command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SitCommand.Types.Feedback SitFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.SitFeedback ? (global::Bosdyn.Api.SitCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.SitFeedback;
          }
        }

        /// <summary>Field number for the "stand_feedback" field.</summary>
        public const int StandFeedbackFieldNumber = 4;
        /// <summary>
        /// Feedback for the stand command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StandCommand.Types.Feedback StandFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.StandFeedback ? (global::Bosdyn.Api.StandCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.StandFeedback;
          }
        }

        /// <summary>Field number for the "stance_feedback" field.</summary>
        public const int StanceFeedbackFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StanceCommand.Types.Feedback StanceFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.StanceFeedback ? (global::Bosdyn.Api.StanceCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.StanceFeedback;
          }
        }

        /// <summary>Field number for the "stop_feedback" field.</summary>
        public const int StopFeedbackFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.StopCommand.Types.Feedback StopFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.StopFeedback ? (global::Bosdyn.Api.StopCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.StopFeedback;
          }
        }

        /// <summary>Field number for the "follow_arm_feedback" field.</summary>
        public const int FollowArmFeedbackFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.FollowArmCommand.Types.Feedback FollowArmFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.FollowArmFeedback ? (global::Bosdyn.Api.FollowArmCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.FollowArmFeedback;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 100;
        private global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        private object feedback_;
        /// <summary>Enum of possible cases for the "feedback" oneof.</summary>
        public enum FeedbackOneofCase {
          None = 0,
          Se2TrajectoryFeedback = 1,
          Se2VelocityFeedback = 2,
          SitFeedback = 3,
          StandFeedback = 4,
          StanceFeedback = 5,
          StopFeedback = 6,
          FollowArmFeedback = 7,
        }
        private FeedbackOneofCase feedbackCase_ = FeedbackOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeedbackOneofCase FeedbackCase {
          get { return feedbackCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFeedback() {
          feedbackCase_ = FeedbackOneofCase.None;
          feedback_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Se2TrajectoryFeedback, other.Se2TrajectoryFeedback)) return false;
          if (!object.Equals(Se2VelocityFeedback, other.Se2VelocityFeedback)) return false;
          if (!object.Equals(SitFeedback, other.SitFeedback)) return false;
          if (!object.Equals(StandFeedback, other.StandFeedback)) return false;
          if (!object.Equals(StanceFeedback, other.StanceFeedback)) return false;
          if (!object.Equals(StopFeedback, other.StopFeedback)) return false;
          if (!object.Equals(FollowArmFeedback, other.FollowArmFeedback)) return false;
          if (Status != other.Status) return false;
          if (FeedbackCase != other.FeedbackCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (feedbackCase_ == FeedbackOneofCase.Se2TrajectoryFeedback) hash ^= Se2TrajectoryFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.Se2VelocityFeedback) hash ^= Se2VelocityFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.SitFeedback) hash ^= SitFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.StandFeedback) hash ^= StandFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.StanceFeedback) hash ^= StanceFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.StopFeedback) hash ^= StopFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.FollowArmFeedback) hash ^= FollowArmFeedback.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          hash ^= (int) feedbackCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (feedbackCase_ == FeedbackOneofCase.Se2TrajectoryFeedback) {
            output.WriteRawTag(10);
            output.WriteMessage(Se2TrajectoryFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.Se2VelocityFeedback) {
            output.WriteRawTag(18);
            output.WriteMessage(Se2VelocityFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.SitFeedback) {
            output.WriteRawTag(26);
            output.WriteMessage(SitFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StandFeedback) {
            output.WriteRawTag(34);
            output.WriteMessage(StandFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StanceFeedback) {
            output.WriteRawTag(42);
            output.WriteMessage(StanceFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StopFeedback) {
            output.WriteRawTag(50);
            output.WriteMessage(StopFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.FollowArmFeedback) {
            output.WriteRawTag(58);
            output.WriteMessage(FollowArmFeedback);
          }
          if (Status != 0) {
            output.WriteRawTag(160, 6);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (feedbackCase_ == FeedbackOneofCase.Se2TrajectoryFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Se2TrajectoryFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.Se2VelocityFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Se2VelocityFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.SitFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SitFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StandFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StanceFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StanceFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.StopFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.FollowArmFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FollowArmFeedback);
          }
          if (Status != 0) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          switch (other.FeedbackCase) {
            case FeedbackOneofCase.Se2TrajectoryFeedback:
              if (Se2TrajectoryFeedback == null) {
                Se2TrajectoryFeedback = new global::Bosdyn.Api.SE2TrajectoryCommand.Types.Feedback();
              }
              Se2TrajectoryFeedback.MergeFrom(other.Se2TrajectoryFeedback);
              break;
            case FeedbackOneofCase.Se2VelocityFeedback:
              if (Se2VelocityFeedback == null) {
                Se2VelocityFeedback = new global::Bosdyn.Api.SE2VelocityCommand.Types.Feedback();
              }
              Se2VelocityFeedback.MergeFrom(other.Se2VelocityFeedback);
              break;
            case FeedbackOneofCase.SitFeedback:
              if (SitFeedback == null) {
                SitFeedback = new global::Bosdyn.Api.SitCommand.Types.Feedback();
              }
              SitFeedback.MergeFrom(other.SitFeedback);
              break;
            case FeedbackOneofCase.StandFeedback:
              if (StandFeedback == null) {
                StandFeedback = new global::Bosdyn.Api.StandCommand.Types.Feedback();
              }
              StandFeedback.MergeFrom(other.StandFeedback);
              break;
            case FeedbackOneofCase.StanceFeedback:
              if (StanceFeedback == null) {
                StanceFeedback = new global::Bosdyn.Api.StanceCommand.Types.Feedback();
              }
              StanceFeedback.MergeFrom(other.StanceFeedback);
              break;
            case FeedbackOneofCase.StopFeedback:
              if (StopFeedback == null) {
                StopFeedback = new global::Bosdyn.Api.StopCommand.Types.Feedback();
              }
              StopFeedback.MergeFrom(other.StopFeedback);
              break;
            case FeedbackOneofCase.FollowArmFeedback:
              if (FollowArmFeedback == null) {
                FollowArmFeedback = new global::Bosdyn.Api.FollowArmCommand.Types.Feedback();
              }
              FollowArmFeedback.MergeFrom(other.FollowArmFeedback);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Bosdyn.Api.SE2TrajectoryCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.SE2TrajectoryCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.Se2TrajectoryFeedback) {
                  subBuilder.MergeFrom(Se2TrajectoryFeedback);
                }
                input.ReadMessage(subBuilder);
                Se2TrajectoryFeedback = subBuilder;
                break;
              }
              case 18: {
                global::Bosdyn.Api.SE2VelocityCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.SE2VelocityCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.Se2VelocityFeedback) {
                  subBuilder.MergeFrom(Se2VelocityFeedback);
                }
                input.ReadMessage(subBuilder);
                Se2VelocityFeedback = subBuilder;
                break;
              }
              case 26: {
                global::Bosdyn.Api.SitCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.SitCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.SitFeedback) {
                  subBuilder.MergeFrom(SitFeedback);
                }
                input.ReadMessage(subBuilder);
                SitFeedback = subBuilder;
                break;
              }
              case 34: {
                global::Bosdyn.Api.StandCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.StandCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.StandFeedback) {
                  subBuilder.MergeFrom(StandFeedback);
                }
                input.ReadMessage(subBuilder);
                StandFeedback = subBuilder;
                break;
              }
              case 42: {
                global::Bosdyn.Api.StanceCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.StanceCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.StanceFeedback) {
                  subBuilder.MergeFrom(StanceFeedback);
                }
                input.ReadMessage(subBuilder);
                StanceFeedback = subBuilder;
                break;
              }
              case 50: {
                global::Bosdyn.Api.StopCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.StopCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.StopFeedback) {
                  subBuilder.MergeFrom(StopFeedback);
                }
                input.ReadMessage(subBuilder);
                StopFeedback = subBuilder;
                break;
              }
              case 58: {
                global::Bosdyn.Api.FollowArmCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.FollowArmCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.FollowArmFeedback) {
                  subBuilder.MergeFrom(FollowArmFeedback);
                }
                input.ReadMessage(subBuilder);
                FollowArmFeedback = subBuilder;
                break;
              }
              case 800: {
                Status = (global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
