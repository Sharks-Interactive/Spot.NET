// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/payload.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/payload.proto</summary>
  public static partial class PayloadReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/payload.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PayloadReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3MvcGF5bG9hZC5wcm90bxIKYm9zZHluLmFwaRoVUHJvdG9zL2dl",
            "b21ldHJ5LnByb3RvGhNQcm90b3MvaGVhZGVyLnByb3RvGhVQcm90b3Mvcm9i",
            "b3RfaWQucHJvdG8i5AMKB1BheWxvYWQSDAoER1VJRBgBIAEoCRIMCgRuYW1l",
            "GAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEhQKDGxhYmVsX3ByZWZpeBgJ",
            "IAMoCRIVCg1pc19hdXRob3JpemVkGAQgASgIEhIKCmlzX2VuYWJsZWQYBSAB",
            "KAgSHQoVaXNfbm9uY29tcHV0ZV9wYXlsb2FkGAYgASgIEiwKB3ZlcnNpb24Y",
            "DCABKAsyGy5ib3NkeW4uYXBpLlNvZnR3YXJlVmVyc2lvbhIvChJib2R5X3Rm",
            "b3JtX3BheWxvYWQYByABKAsyEy5ib3NkeW4uYXBpLlNFM1Bvc2USMAoTbW91",
            "bnRfdGZvcm1fcGF5bG9hZBgIIAEoCzITLmJvc2R5bi5hcGkuU0UzUG9zZRI0",
            "ChBtb3VudF9mcmFtZV9uYW1lGA0gASgOMhouYm9zZHluLmFwaS5Nb3VudEZy",
            "YW1lTmFtZRJHChZtYXNzX3ZvbHVtZV9wcm9wZXJ0aWVzGAogASgLMicuYm9z",
            "ZHluLmFwaS5QYXlsb2FkTWFzc1ZvbHVtZVByb3BlcnRpZXMSOAoVcHJlc2V0",
            "X2NvbmZpZ3VyYXRpb25zGAsgAygLMhkuYm9zZHluLmFwaS5QYXlsb2FkUHJl",
            "c2V0IoACCg1QYXlsb2FkUHJlc2V0EhMKC3ByZXNldF9uYW1lGAEgASgJEhMK",
            "C2Rlc2NyaXB0aW9uGAIgASgJEjAKE21vdW50X3Rmb3JtX3BheWxvYWQYAyAB",
            "KAsyEy5ib3NkeW4uYXBpLlNFM1Bvc2USNAoQbW91bnRfZnJhbWVfbmFtZRgG",
            "IAEoDjIaLmJvc2R5bi5hcGkuTW91bnRGcmFtZU5hbWUSRwoWbWFzc192b2x1",
            "bWVfcHJvcGVydGllcxgEIAEoCzInLmJvc2R5bi5hcGkuUGF5bG9hZE1hc3NW",
            "b2x1bWVQcm9wZXJ0aWVzEhQKDGxhYmVsX3ByZWZpeBgFIAMoCSLxAQobUGF5",
            "bG9hZE1hc3NWb2x1bWVQcm9wZXJ0aWVzEhIKCnRvdGFsX21hc3MYAiABKAIS",
            "LAoSY29tX3Bvc19ydF9wYXlsb2FkGAMgASgLMhAuYm9zZHluLmFwaS5WZWMz",
            "EjAKCm1vaV90ZW5zb3IYBCABKAsyHC5ib3NkeW4uYXBpLk1vbWVudE9mSW50",
            "ZXJ0aWESLwoMYm91bmRpbmdfYm94GAUgAygLMhkuYm9zZHluLmFwaS5Cb3gz",
            "V2l0aEZyYW1lEi0KDGpvaW50X2xpbWl0cxgGIAMoCzIXLmJvc2R5bi5hcGku",
            "Sm9pbnRMaW1pdHMiWgoQTW9tZW50T2ZJbnRlcnRpYRIKCgJ4eBgCIAEoAhIK",
            "CgJ5eRgDIAEoAhIKCgJ6ehgEIAEoAhIKCgJ4eRgFIAEoAhIKCgJ4ehgGIAEo",
            "AhIKCgJ5ehgHIAEoAiI0CgtKb2ludExpbWl0cxINCgVsYWJlbBgCIAEoCRIK",
            "CgJoeRgDIAMoAhIKCgJoeBgEIAMoAiJAChNMaXN0UGF5bG9hZHNSZXF1ZXN0",
            "EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJp",
            "ChRMaXN0UGF5bG9hZHNSZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3Nk",
            "eW4uYXBpLlJlc3BvbnNlSGVhZGVyEiUKCHBheWxvYWRzGAIgAygLMhMuYm9z",
            "ZHluLmFwaS5QYXlsb2FkKn0KDk1vdW50RnJhbWVOYW1lEhcKE01PVU5UX0ZS",
            "QU1FX1VOS05PV04QABIcChhNT1VOVF9GUkFNRV9CT0RZX1BBWUxPQUQQARIf",
            "ChtNT1VOVF9GUkFNRV9HUklQUEVSX1BBWUxPQUQQAhITCg9NT1VOVF9GUkFN",
            "RV9XUjEQA0IOQgxQYXlsb2FkUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.RobotIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bosdyn.Api.MountFrameName), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Payload), global::Bosdyn.Api.Payload.Parser, new[]{ "GUID", "Name", "Description", "LabelPrefix", "IsAuthorized", "IsEnabled", "IsNoncomputePayload", "Version", "BodyTformPayload", "MountTformPayload", "MountFrameName", "MassVolumeProperties", "PresetConfigurations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PayloadPreset), global::Bosdyn.Api.PayloadPreset.Parser, new[]{ "PresetName", "Description", "MountTformPayload", "MountFrameName", "MassVolumeProperties", "LabelPrefix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PayloadMassVolumeProperties), global::Bosdyn.Api.PayloadMassVolumeProperties.Parser, new[]{ "TotalMass", "ComPosRtPayload", "MoiTensor", "BoundingBox", "JointLimits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MomentOfIntertia), global::Bosdyn.Api.MomentOfIntertia.Parser, new[]{ "Xx", "Yy", "Zz", "Xy", "Xz", "Yz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.JointLimits), global::Bosdyn.Api.JointLimits.Parser, new[]{ "Label", "Hy", "Hx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListPayloadsRequest), global::Bosdyn.Api.ListPayloadsRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListPayloadsResponse), global::Bosdyn.Api.ListPayloadsResponse.Parser, new[]{ "Header", "Payloads" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Payloads are defined relative to a frame on the robot. These are the possible frames. 
  /// </summary>
  public enum MountFrameName {
    /// <summary>
    /// The is the default. For backwards compatibility, we assume unknown means body mount frame. 
    /// </summary>
    [pbr::OriginalName("MOUNT_FRAME_UNKNOWN")] MountFrameUnknown = 0,
    /// <summary>
    /// The body payload mount frame, as defined in documentation. 
    /// </summary>
    [pbr::OriginalName("MOUNT_FRAME_BODY_PAYLOAD")] MountFrameBodyPayload = 1,
    /// <summary>
    /// The gripper payload mount frame, as defined in documentation. 
    /// </summary>
    [pbr::OriginalName("MOUNT_FRAME_GRIPPER_PAYLOAD")] MountFrameGripperPayload = 2,
    /// <summary>
    /// The wrist link frame, as defined in the gripper CAD and documentation. 
    /// </summary>
    [pbr::OriginalName("MOUNT_FRAME_WR1")] MountFrameWr1 = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A Payload describes a single payload installed on the Spot platform.
  /// It includes all external information necessary to represent
  /// the payload to the user as a single record.
  /// </summary>
  public sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      gUID_ = other.gUID_;
      name_ = other.name_;
      description_ = other.description_;
      labelPrefix_ = other.labelPrefix_.Clone();
      isAuthorized_ = other.isAuthorized_;
      isEnabled_ = other.isEnabled_;
      isNoncomputePayload_ = other.isNoncomputePayload_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      bodyTformPayload_ = other.bodyTformPayload_ != null ? other.bodyTformPayload_.Clone() : null;
      mountTformPayload_ = other.mountTformPayload_ != null ? other.mountTformPayload_.Clone() : null;
      mountFrameName_ = other.mountFrameName_;
      massVolumeProperties_ = other.massVolumeProperties_ != null ? other.massVolumeProperties_.Clone() : null;
      presetConfigurations_ = other.presetConfigurations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "GUID" field.</summary>
    public const int GUIDFieldNumber = 1;
    private string gUID_ = "";
    /// <summary>
    /// A unique id provided by the payload or auto-generated by the website.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GUID {
      get { return gUID_; }
      set {
        gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// A human readable name describing this payload. It is provided by the
    /// payload as part of the payload announcement system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// A human-readable description string providing more context as to the
    /// function of this payload. It is displayed in UIs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label_prefix" field.</summary>
    public const int LabelPrefixFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_labelPrefix_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> labelPrefix_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of labels used to indicate what type of payload this is.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LabelPrefix {
      get { return labelPrefix_; }
    }

    /// <summary>Field number for the "is_authorized" field.</summary>
    public const int IsAuthorizedFieldNumber = 4;
    private bool isAuthorized_;
    /// <summary>
    /// Set true once the payload is authorized by the administrator in the payload webpage.
    /// Must be set to false at registration time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAuthorized {
      get { return isAuthorized_; }
      set {
        isAuthorized_ = value;
      }
    }

    /// <summary>Field number for the "is_enabled" field.</summary>
    public const int IsEnabledFieldNumber = 5;
    private bool isEnabled_;
    /// <summary>
    /// Set true if the payload is attached to the robot.
    /// Must be set to false at registration time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnabled {
      get { return isEnabled_; }
      set {
        isEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_noncompute_payload" field.</summary>
    public const int IsNoncomputePayloadFieldNumber = 6;
    private bool isNoncomputePayload_;
    /// <summary>
    /// Set true for payloads registered without their own computers. These records
    /// are all manually entered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNoncomputePayload {
      get { return isNoncomputePayload_; }
      set {
        isNoncomputePayload_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 12;
    private global::Bosdyn.Api.SoftwareVersion version_;
    /// <summary>
    /// Payload version details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SoftwareVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "body_tform_payload" field.</summary>
    public const int BodyTformPayloadFieldNumber = 7;
    private global::Bosdyn.Api.SE3Pose bodyTformPayload_;
    /// <summary>
    /// The pose of the payload relative to the body frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose BodyTformPayload {
      get { return bodyTformPayload_; }
      set {
        bodyTformPayload_ = value;
      }
    }

    /// <summary>Field number for the "mount_tform_payload" field.</summary>
    public const int MountTformPayloadFieldNumber = 8;
    private global::Bosdyn.Api.SE3Pose mountTformPayload_;
    /// <summary>
    /// The pose of the payload relative to the mount frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose MountTformPayload {
      get { return mountTformPayload_; }
      set {
        mountTformPayload_ = value;
      }
    }

    /// <summary>Field number for the "mount_frame_name" field.</summary>
    public const int MountFrameNameFieldNumber = 13;
    private global::Bosdyn.Api.MountFrameName mountFrameName_ = 0;
    /// <summary>
    /// Optional - mount frame_name (if not included, payload is assumed to be in the body mount frame)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MountFrameName MountFrameName {
      get { return mountFrameName_; }
      set {
        mountFrameName_ = value;
      }
    }

    /// <summary>Field number for the "mass_volume_properties" field.</summary>
    public const int MassVolumePropertiesFieldNumber = 10;
    private global::Bosdyn.Api.PayloadMassVolumeProperties massVolumeProperties_;
    /// <summary>
    /// The mass and volume properties of the payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PayloadMassVolumeProperties MassVolumeProperties {
      get { return massVolumeProperties_; }
      set {
        massVolumeProperties_ = value;
      }
    }

    /// <summary>Field number for the "preset_configurations" field.</summary>
    public const int PresetConfigurationsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.PayloadPreset> _repeated_presetConfigurations_codec
        = pb::FieldCodec.ForMessage(90, global::Bosdyn.Api.PayloadPreset.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.PayloadPreset> presetConfigurations_ = new pbc::RepeatedField<global::Bosdyn.Api.PayloadPreset>();
    /// <summary>
    /// A list of possible physical configurations for the payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.PayloadPreset> PresetConfigurations {
      get { return presetConfigurations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GUID != other.GUID) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!labelPrefix_.Equals(other.labelPrefix_)) return false;
      if (IsAuthorized != other.IsAuthorized) return false;
      if (IsEnabled != other.IsEnabled) return false;
      if (IsNoncomputePayload != other.IsNoncomputePayload) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (!object.Equals(BodyTformPayload, other.BodyTformPayload)) return false;
      if (!object.Equals(MountTformPayload, other.MountTformPayload)) return false;
      if (MountFrameName != other.MountFrameName) return false;
      if (!object.Equals(MassVolumeProperties, other.MassVolumeProperties)) return false;
      if(!presetConfigurations_.Equals(other.presetConfigurations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GUID.Length != 0) hash ^= GUID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= labelPrefix_.GetHashCode();
      if (IsAuthorized != false) hash ^= IsAuthorized.GetHashCode();
      if (IsEnabled != false) hash ^= IsEnabled.GetHashCode();
      if (IsNoncomputePayload != false) hash ^= IsNoncomputePayload.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (bodyTformPayload_ != null) hash ^= BodyTformPayload.GetHashCode();
      if (mountTformPayload_ != null) hash ^= MountTformPayload.GetHashCode();
      if (MountFrameName != 0) hash ^= MountFrameName.GetHashCode();
      if (massVolumeProperties_ != null) hash ^= MassVolumeProperties.GetHashCode();
      hash ^= presetConfigurations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GUID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GUID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (IsAuthorized != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAuthorized);
      }
      if (IsEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnabled);
      }
      if (IsNoncomputePayload != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsNoncomputePayload);
      }
      if (bodyTformPayload_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BodyTformPayload);
      }
      if (mountTformPayload_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MountTformPayload);
      }
      labelPrefix_.WriteTo(output, _repeated_labelPrefix_codec);
      if (massVolumeProperties_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MassVolumeProperties);
      }
      presetConfigurations_.WriteTo(output, _repeated_presetConfigurations_codec);
      if (version_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Version);
      }
      if (MountFrameName != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) MountFrameName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labelPrefix_.CalculateSize(_repeated_labelPrefix_codec);
      if (IsAuthorized != false) {
        size += 1 + 1;
      }
      if (IsEnabled != false) {
        size += 1 + 1;
      }
      if (IsNoncomputePayload != false) {
        size += 1 + 1;
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (bodyTformPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BodyTformPayload);
      }
      if (mountTformPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MountTformPayload);
      }
      if (MountFrameName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MountFrameName);
      }
      if (massVolumeProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MassVolumeProperties);
      }
      size += presetConfigurations_.CalculateSize(_repeated_presetConfigurations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.GUID.Length != 0) {
        GUID = other.GUID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labelPrefix_.Add(other.labelPrefix_);
      if (other.IsAuthorized != false) {
        IsAuthorized = other.IsAuthorized;
      }
      if (other.IsEnabled != false) {
        IsEnabled = other.IsEnabled;
      }
      if (other.IsNoncomputePayload != false) {
        IsNoncomputePayload = other.IsNoncomputePayload;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Bosdyn.Api.SoftwareVersion();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.bodyTformPayload_ != null) {
        if (bodyTformPayload_ == null) {
          BodyTformPayload = new global::Bosdyn.Api.SE3Pose();
        }
        BodyTformPayload.MergeFrom(other.BodyTformPayload);
      }
      if (other.mountTformPayload_ != null) {
        if (mountTformPayload_ == null) {
          MountTformPayload = new global::Bosdyn.Api.SE3Pose();
        }
        MountTformPayload.MergeFrom(other.MountTformPayload);
      }
      if (other.MountFrameName != 0) {
        MountFrameName = other.MountFrameName;
      }
      if (other.massVolumeProperties_ != null) {
        if (massVolumeProperties_ == null) {
          MassVolumeProperties = new global::Bosdyn.Api.PayloadMassVolumeProperties();
        }
        MassVolumeProperties.MergeFrom(other.MassVolumeProperties);
      }
      presetConfigurations_.Add(other.presetConfigurations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GUID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            IsAuthorized = input.ReadBool();
            break;
          }
          case 40: {
            IsEnabled = input.ReadBool();
            break;
          }
          case 48: {
            IsNoncomputePayload = input.ReadBool();
            break;
          }
          case 58: {
            if (bodyTformPayload_ == null) {
              BodyTformPayload = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(BodyTformPayload);
            break;
          }
          case 66: {
            if (mountTformPayload_ == null) {
              MountTformPayload = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(MountTformPayload);
            break;
          }
          case 74: {
            labelPrefix_.AddEntriesFrom(input, _repeated_labelPrefix_codec);
            break;
          }
          case 82: {
            if (massVolumeProperties_ == null) {
              MassVolumeProperties = new global::Bosdyn.Api.PayloadMassVolumeProperties();
            }
            input.ReadMessage(MassVolumeProperties);
            break;
          }
          case 90: {
            presetConfigurations_.AddEntriesFrom(input, _repeated_presetConfigurations_codec);
            break;
          }
          case 98: {
            if (version_ == null) {
              Version = new global::Bosdyn.Api.SoftwareVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 104: {
            MountFrameName = (global::Bosdyn.Api.MountFrameName) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The physical configurations for the payload.
  /// </summary>
  public sealed partial class PayloadPreset : pb::IMessage<PayloadPreset> {
    private static readonly pb::MessageParser<PayloadPreset> _parser = new pb::MessageParser<PayloadPreset>(() => new PayloadPreset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayloadPreset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadPreset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadPreset(PayloadPreset other) : this() {
      presetName_ = other.presetName_;
      description_ = other.description_;
      mountTformPayload_ = other.mountTformPayload_ != null ? other.mountTformPayload_.Clone() : null;
      mountFrameName_ = other.mountFrameName_;
      massVolumeProperties_ = other.massVolumeProperties_ != null ? other.massVolumeProperties_.Clone() : null;
      labelPrefix_ = other.labelPrefix_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadPreset Clone() {
      return new PayloadPreset(this);
    }

    /// <summary>Field number for the "preset_name" field.</summary>
    public const int PresetNameFieldNumber = 1;
    private string presetName_ = "";
    /// <summary>
    /// A human readable name describing this configuration. It is displayed in
    /// the admin console, but will not overwrite the top level payload name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PresetName {
      get { return presetName_; }
      set {
        presetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A human-readable description providing context on this configuration. It is
    /// displayed in the admin console.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mount_tform_payload" field.</summary>
    public const int MountTformPayloadFieldNumber = 3;
    private global::Bosdyn.Api.SE3Pose mountTformPayload_;
    /// <summary>
    /// The pose of the payload relative to the body frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose MountTformPayload {
      get { return mountTformPayload_; }
      set {
        mountTformPayload_ = value;
      }
    }

    /// <summary>Field number for the "mount_frame_name" field.</summary>
    public const int MountFrameNameFieldNumber = 6;
    private global::Bosdyn.Api.MountFrameName mountFrameName_ = 0;
    /// <summary>
    /// Optional - mount frame_name (if not included, payload is assumed to be in the body mount frame)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MountFrameName MountFrameName {
      get { return mountFrameName_; }
      set {
        mountFrameName_ = value;
      }
    }

    /// <summary>Field number for the "mass_volume_properties" field.</summary>
    public const int MassVolumePropertiesFieldNumber = 4;
    private global::Bosdyn.Api.PayloadMassVolumeProperties massVolumeProperties_;
    /// <summary>
    /// The mass and volume properties of the payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PayloadMassVolumeProperties MassVolumeProperties {
      get { return massVolumeProperties_; }
      set {
        massVolumeProperties_ = value;
      }
    }

    /// <summary>Field number for the "label_prefix" field.</summary>
    public const int LabelPrefixFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_labelPrefix_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> labelPrefix_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of labels used to indicate what type of payload this is.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LabelPrefix {
      get { return labelPrefix_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayloadPreset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayloadPreset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PresetName != other.PresetName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(MountTformPayload, other.MountTformPayload)) return false;
      if (MountFrameName != other.MountFrameName) return false;
      if (!object.Equals(MassVolumeProperties, other.MassVolumeProperties)) return false;
      if(!labelPrefix_.Equals(other.labelPrefix_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PresetName.Length != 0) hash ^= PresetName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (mountTformPayload_ != null) hash ^= MountTformPayload.GetHashCode();
      if (MountFrameName != 0) hash ^= MountFrameName.GetHashCode();
      if (massVolumeProperties_ != null) hash ^= MassVolumeProperties.GetHashCode();
      hash ^= labelPrefix_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PresetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PresetName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (mountTformPayload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MountTformPayload);
      }
      if (massVolumeProperties_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MassVolumeProperties);
      }
      labelPrefix_.WriteTo(output, _repeated_labelPrefix_codec);
      if (MountFrameName != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MountFrameName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PresetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PresetName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (mountTformPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MountTformPayload);
      }
      if (MountFrameName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MountFrameName);
      }
      if (massVolumeProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MassVolumeProperties);
      }
      size += labelPrefix_.CalculateSize(_repeated_labelPrefix_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayloadPreset other) {
      if (other == null) {
        return;
      }
      if (other.PresetName.Length != 0) {
        PresetName = other.PresetName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.mountTformPayload_ != null) {
        if (mountTformPayload_ == null) {
          MountTformPayload = new global::Bosdyn.Api.SE3Pose();
        }
        MountTformPayload.MergeFrom(other.MountTformPayload);
      }
      if (other.MountFrameName != 0) {
        MountFrameName = other.MountFrameName;
      }
      if (other.massVolumeProperties_ != null) {
        if (massVolumeProperties_ == null) {
          MassVolumeProperties = new global::Bosdyn.Api.PayloadMassVolumeProperties();
        }
        MassVolumeProperties.MergeFrom(other.MassVolumeProperties);
      }
      labelPrefix_.Add(other.labelPrefix_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PresetName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (mountTformPayload_ == null) {
              MountTformPayload = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(MountTformPayload);
            break;
          }
          case 34: {
            if (massVolumeProperties_ == null) {
              MassVolumeProperties = new global::Bosdyn.Api.PayloadMassVolumeProperties();
            }
            input.ReadMessage(MassVolumeProperties);
            break;
          }
          case 42: {
            labelPrefix_.AddEntriesFrom(input, _repeated_labelPrefix_codec);
            break;
          }
          case 48: {
            MountFrameName = (global::Bosdyn.Api.MountFrameName) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PayloadMassVolumeProperties contain mass and volume information for the payload
  /// in the format that the user interacts with it. It is transmitted to the control
  /// and perception systems and processed there to inform those systems.
  /// </summary>
  public sealed partial class PayloadMassVolumeProperties : pb::IMessage<PayloadMassVolumeProperties> {
    private static readonly pb::MessageParser<PayloadMassVolumeProperties> _parser = new pb::MessageParser<PayloadMassVolumeProperties>(() => new PayloadMassVolumeProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayloadMassVolumeProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadMassVolumeProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadMassVolumeProperties(PayloadMassVolumeProperties other) : this() {
      totalMass_ = other.totalMass_;
      comPosRtPayload_ = other.comPosRtPayload_ != null ? other.comPosRtPayload_.Clone() : null;
      moiTensor_ = other.moiTensor_ != null ? other.moiTensor_.Clone() : null;
      boundingBox_ = other.boundingBox_.Clone();
      jointLimits_ = other.jointLimits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadMassVolumeProperties Clone() {
      return new PayloadMassVolumeProperties(this);
    }

    /// <summary>Field number for the "total_mass" field.</summary>
    public const int TotalMassFieldNumber = 2;
    private float totalMass_;
    /// <summary>
    /// Total mass of payload in kg.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TotalMass {
      get { return totalMass_; }
      set {
        totalMass_ = value;
      }
    }

    /// <summary>Field number for the "com_pos_rt_payload" field.</summary>
    public const int ComPosRtPayloadFieldNumber = 3;
    private global::Bosdyn.Api.Vec3 comPosRtPayload_;
    /// <summary>
    /// Position of the center of mass of the payload in the payload frame. Meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 ComPosRtPayload {
      get { return comPosRtPayload_; }
      set {
        comPosRtPayload_ = value;
      }
    }

    /// <summary>Field number for the "moi_tensor" field.</summary>
    public const int MoiTensorFieldNumber = 4;
    private global::Bosdyn.Api.MomentOfIntertia moiTensor_;
    /// <summary>
    /// The moment of inertia of the payload, represented about the payload
    /// center of mass, in the payload frame. Units in [kg*m^2].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MomentOfIntertia MoiTensor {
      get { return moiTensor_; }
      set {
        moiTensor_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box" field.</summary>
    public const int BoundingBoxFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Box3WithFrame> _repeated_boundingBox_codec
        = pb::FieldCodec.ForMessage(42, global::Bosdyn.Api.Box3WithFrame.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Box3WithFrame> boundingBox_ = new pbc::RepeatedField<global::Bosdyn.Api.Box3WithFrame>();
    /// <summary>
    /// Zero or more bounding boxes indicating the occupied volume of the payload.
    /// These boxes must be represented in the payload frame by specifying
    /// Must have Box3WithFrame.frame_name == "payload".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Box3WithFrame> BoundingBox {
      get { return boundingBox_; }
    }

    /// <summary>Field number for the "joint_limits" field.</summary>
    public const int JointLimitsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.JointLimits> _repeated_jointLimits_codec
        = pb::FieldCodec.ForMessage(50, global::Bosdyn.Api.JointLimits.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.JointLimits> jointLimits_ = new pbc::RepeatedField<global::Bosdyn.Api.JointLimits>();
    /// <summary>
    /// Joint limits defining limits to range of motion of the hips of the robot,
    /// in order to prevent collisions with the payload.
    /// This field is optional and is only recommended for advanced development
    /// purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.JointLimits> JointLimits {
      get { return jointLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayloadMassVolumeProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayloadMassVolumeProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalMass, other.TotalMass)) return false;
      if (!object.Equals(ComPosRtPayload, other.ComPosRtPayload)) return false;
      if (!object.Equals(MoiTensor, other.MoiTensor)) return false;
      if(!boundingBox_.Equals(other.boundingBox_)) return false;
      if(!jointLimits_.Equals(other.jointLimits_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalMass != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalMass);
      if (comPosRtPayload_ != null) hash ^= ComPosRtPayload.GetHashCode();
      if (moiTensor_ != null) hash ^= MoiTensor.GetHashCode();
      hash ^= boundingBox_.GetHashCode();
      hash ^= jointLimits_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalMass != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TotalMass);
      }
      if (comPosRtPayload_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ComPosRtPayload);
      }
      if (moiTensor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MoiTensor);
      }
      boundingBox_.WriteTo(output, _repeated_boundingBox_codec);
      jointLimits_.WriteTo(output, _repeated_jointLimits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalMass != 0F) {
        size += 1 + 4;
      }
      if (comPosRtPayload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComPosRtPayload);
      }
      if (moiTensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoiTensor);
      }
      size += boundingBox_.CalculateSize(_repeated_boundingBox_codec);
      size += jointLimits_.CalculateSize(_repeated_jointLimits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayloadMassVolumeProperties other) {
      if (other == null) {
        return;
      }
      if (other.TotalMass != 0F) {
        TotalMass = other.TotalMass;
      }
      if (other.comPosRtPayload_ != null) {
        if (comPosRtPayload_ == null) {
          ComPosRtPayload = new global::Bosdyn.Api.Vec3();
        }
        ComPosRtPayload.MergeFrom(other.ComPosRtPayload);
      }
      if (other.moiTensor_ != null) {
        if (moiTensor_ == null) {
          MoiTensor = new global::Bosdyn.Api.MomentOfIntertia();
        }
        MoiTensor.MergeFrom(other.MoiTensor);
      }
      boundingBox_.Add(other.boundingBox_);
      jointLimits_.Add(other.jointLimits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            TotalMass = input.ReadFloat();
            break;
          }
          case 26: {
            if (comPosRtPayload_ == null) {
              ComPosRtPayload = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(ComPosRtPayload);
            break;
          }
          case 34: {
            if (moiTensor_ == null) {
              MoiTensor = new global::Bosdyn.Api.MomentOfIntertia();
            }
            input.ReadMessage(MoiTensor);
            break;
          }
          case 42: {
            boundingBox_.AddEntriesFrom(input, _repeated_boundingBox_codec);
            break;
          }
          case 50: {
            jointLimits_.AddEntriesFrom(input, _repeated_jointLimits_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Structure describing the moment of intertia of a body. The xx, yy, zz fields
  /// are the diagonal of the MOI tensor, and the xy, xz, and yz fields are the
  /// off diagonal terms.
  /// </summary>
  public sealed partial class MomentOfIntertia : pb::IMessage<MomentOfIntertia> {
    private static readonly pb::MessageParser<MomentOfIntertia> _parser = new pb::MessageParser<MomentOfIntertia>(() => new MomentOfIntertia());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MomentOfIntertia> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentOfIntertia() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentOfIntertia(MomentOfIntertia other) : this() {
      xx_ = other.xx_;
      yy_ = other.yy_;
      zz_ = other.zz_;
      xy_ = other.xy_;
      xz_ = other.xz_;
      yz_ = other.yz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentOfIntertia Clone() {
      return new MomentOfIntertia(this);
    }

    /// <summary>Field number for the "xx" field.</summary>
    public const int XxFieldNumber = 2;
    private float xx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xx {
      get { return xx_; }
      set {
        xx_ = value;
      }
    }

    /// <summary>Field number for the "yy" field.</summary>
    public const int YyFieldNumber = 3;
    private float yy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yy {
      get { return yy_; }
      set {
        yy_ = value;
      }
    }

    /// <summary>Field number for the "zz" field.</summary>
    public const int ZzFieldNumber = 4;
    private float zz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Zz {
      get { return zz_; }
      set {
        zz_ = value;
      }
    }

    /// <summary>Field number for the "xy" field.</summary>
    public const int XyFieldNumber = 5;
    private float xy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xy {
      get { return xy_; }
      set {
        xy_ = value;
      }
    }

    /// <summary>Field number for the "xz" field.</summary>
    public const int XzFieldNumber = 6;
    private float xz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Xz {
      get { return xz_; }
      set {
        xz_ = value;
      }
    }

    /// <summary>Field number for the "yz" field.</summary>
    public const int YzFieldNumber = 7;
    private float yz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yz {
      get { return yz_; }
      set {
        yz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MomentOfIntertia);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MomentOfIntertia other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xx, other.Xx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yy, other.Yy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Zz, other.Zz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xy, other.Xy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Xz, other.Xz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yz, other.Yz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Xx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xx);
      if (Yy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yy);
      if (Zz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Zz);
      if (Xy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xy);
      if (Xz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Xz);
      if (Yz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yz);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Xx != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Xx);
      }
      if (Yy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yy);
      }
      if (Zz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Zz);
      }
      if (Xy != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Xy);
      }
      if (Xz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Xz);
      }
      if (Yz != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Yz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Xx != 0F) {
        size += 1 + 4;
      }
      if (Yy != 0F) {
        size += 1 + 4;
      }
      if (Zz != 0F) {
        size += 1 + 4;
      }
      if (Xy != 0F) {
        size += 1 + 4;
      }
      if (Xz != 0F) {
        size += 1 + 4;
      }
      if (Yz != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MomentOfIntertia other) {
      if (other == null) {
        return;
      }
      if (other.Xx != 0F) {
        Xx = other.Xx;
      }
      if (other.Yy != 0F) {
        Yy = other.Yy;
      }
      if (other.Zz != 0F) {
        Zz = other.Zz;
      }
      if (other.Xy != 0F) {
        Xy = other.Xy;
      }
      if (other.Xz != 0F) {
        Xz = other.Xz;
      }
      if (other.Yz != 0F) {
        Yz = other.Yz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            Xx = input.ReadFloat();
            break;
          }
          case 29: {
            Yy = input.ReadFloat();
            break;
          }
          case 37: {
            Zz = input.ReadFloat();
            break;
          }
          case 45: {
            Xy = input.ReadFloat();
            break;
          }
          case 53: {
            Xz = input.ReadFloat();
            break;
          }
          case 61: {
            Yz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// JointLimits contain hip joint angles where limb to payload collisions occur.
  /// </summary>
  public sealed partial class JointLimits : pb::IMessage<JointLimits> {
    private static readonly pb::MessageParser<JointLimits> _parser = new pb::MessageParser<JointLimits>(() => new JointLimits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JointLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits(JointLimits other) : this() {
      label_ = other.label_;
      hy_ = other.hy_.Clone();
      hx_ = other.hx_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits Clone() {
      return new JointLimits(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    /// <summary>
    /// Label identifying the respective limb to which these apply [fr,fl,hr,hl]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hy" field.</summary>
    public const int HyFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_hy_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> hy_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// (hy, hx) coordinates outlining the hip joint limits where collisions occur
    /// between robot hip and payload. Paired vectors must be of equal length.
    /// Angles are measured with actual contact. Appropriate margin will be provided
    /// in software. Radians.
    /// Left legs must have hx > 0. Right legs must have hx &lt; 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Hy {
      get { return hy_; }
    }

    /// <summary>Field number for the "hx" field.</summary>
    public const int HxFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_hx_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> hx_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// All legs must have hy > 1.3.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Hx {
      get { return hx_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JointLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JointLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if(!hy_.Equals(other.hy_)) return false;
      if(!hx_.Equals(other.hx_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= hy_.GetHashCode();
      hash ^= hx_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      hy_.WriteTo(output, _repeated_hy_codec);
      hx_.WriteTo(output, _repeated_hx_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += hy_.CalculateSize(_repeated_hy_codec);
      size += hx_.CalculateSize(_repeated_hx_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JointLimits other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      hy_.Add(other.hy_);
      hx_.Add(other.hx_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26:
          case 29: {
            hy_.AddEntriesFrom(input, _repeated_hy_codec);
            break;
          }
          case 34:
          case 37: {
            hx_.AddEntriesFrom(input, _repeated_hx_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListPayloads request message sent to the robot to get all known payloads.
  /// </summary>
  public sealed partial class ListPayloadsRequest : pb::IMessage<ListPayloadsRequest> {
    private static readonly pb::MessageParser<ListPayloadsRequest> _parser = new pb::MessageParser<ListPayloadsRequest>(() => new ListPayloadsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPayloadsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsRequest(ListPayloadsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsRequest Clone() {
      return new ListPayloadsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPayloadsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPayloadsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPayloadsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListPayloads response message returns all payloads registered in the robot's directory.
  /// </summary>
  public sealed partial class ListPayloadsResponse : pb::IMessage<ListPayloadsResponse> {
    private static readonly pb::MessageParser<ListPayloadsResponse> _parser = new pb::MessageParser<ListPayloadsResponse>(() => new ListPayloadsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPayloadsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PayloadReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsResponse(ListPayloadsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      payloads_ = other.payloads_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPayloadsResponse Clone() {
      return new ListPayloadsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "payloads" field.</summary>
    public const int PayloadsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Payload> _repeated_payloads_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.Payload.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Payload> payloads_ = new pbc::RepeatedField<global::Bosdyn.Api.Payload>();
    /// <summary>
    /// The returned list of payloads registered in the directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Payload> Payloads {
      get { return payloads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPayloadsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPayloadsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!payloads_.Equals(other.payloads_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= payloads_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      payloads_.WriteTo(output, _repeated_payloads_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += payloads_.CalculateSize(_repeated_payloads_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPayloadsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      payloads_.Add(other.payloads_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            payloads_.AddEntriesFrom(input, _repeated_payloads_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
