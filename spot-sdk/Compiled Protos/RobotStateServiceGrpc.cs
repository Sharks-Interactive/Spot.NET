// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/robot_state_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The robot state service tracks all information about the measured and computed states of the robot at the current time.
  /// </summary>
  public static partial class RobotStateService
  {
    static readonly string __ServiceName = "bosdyn.api.RobotStateService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotStateRequest> __Marshaller_bosdyn_api_RobotStateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotStateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotStateResponse> __Marshaller_bosdyn_api_RobotStateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotStateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotMetricsRequest> __Marshaller_bosdyn_api_RobotMetricsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotMetricsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotMetricsResponse> __Marshaller_bosdyn_api_RobotMetricsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotMetricsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotHardwareConfigurationRequest> __Marshaller_bosdyn_api_RobotHardwareConfigurationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotHardwareConfigurationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotHardwareConfigurationResponse> __Marshaller_bosdyn_api_RobotHardwareConfigurationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotHardwareConfigurationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotLinkModelRequest> __Marshaller_bosdyn_api_RobotLinkModelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotLinkModelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RobotLinkModelResponse> __Marshaller_bosdyn_api_RobotLinkModelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RobotLinkModelResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.RobotStateRequest, global::Bosdyn.Api.RobotStateResponse> __Method_GetRobotState = new grpc::Method<global::Bosdyn.Api.RobotStateRequest, global::Bosdyn.Api.RobotStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotState",
        __Marshaller_bosdyn_api_RobotStateRequest,
        __Marshaller_bosdyn_api_RobotStateResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RobotMetricsRequest, global::Bosdyn.Api.RobotMetricsResponse> __Method_GetRobotMetrics = new grpc::Method<global::Bosdyn.Api.RobotMetricsRequest, global::Bosdyn.Api.RobotMetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotMetrics",
        __Marshaller_bosdyn_api_RobotMetricsRequest,
        __Marshaller_bosdyn_api_RobotMetricsResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RobotHardwareConfigurationRequest, global::Bosdyn.Api.RobotHardwareConfigurationResponse> __Method_GetRobotHardwareConfiguration = new grpc::Method<global::Bosdyn.Api.RobotHardwareConfigurationRequest, global::Bosdyn.Api.RobotHardwareConfigurationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotHardwareConfiguration",
        __Marshaller_bosdyn_api_RobotHardwareConfigurationRequest,
        __Marshaller_bosdyn_api_RobotHardwareConfigurationResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RobotLinkModelRequest, global::Bosdyn.Api.RobotLinkModelResponse> __Method_GetRobotLinkModel = new grpc::Method<global::Bosdyn.Api.RobotLinkModelRequest, global::Bosdyn.Api.RobotLinkModelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRobotLinkModel",
        __Marshaller_bosdyn_api_RobotLinkModelRequest,
        __Marshaller_bosdyn_api_RobotLinkModelResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.RobotStateServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RobotStateService</summary>
    [grpc::BindServiceMethod(typeof(RobotStateService), "BindService")]
    public abstract partial class RobotStateServiceBase
    {
      /// <summary>
      /// Get robot state information (such as kinematic state, power state, or faults).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RobotStateResponse> GetRobotState(global::Bosdyn.Api.RobotStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get different robot metrics and parameters from the robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RobotMetricsResponse> GetRobotMetrics(global::Bosdyn.Api.RobotMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the hardware configuration of the robot, which describes the robot skeleton and urdf.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RobotHardwareConfigurationResponse> GetRobotHardwareConfiguration(global::Bosdyn.Api.RobotHardwareConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the OBJ file for a specifc robot link. Intended to be called after
      /// GetRobotHardwareConfiguration, using the link names returned by that call.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RobotLinkModelResponse> GetRobotLinkModel(global::Bosdyn.Api.RobotLinkModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RobotStateService</summary>
    public partial class RobotStateServiceClient : grpc::ClientBase<RobotStateServiceClient>
    {
      /// <summary>Creates a new client for RobotStateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RobotStateServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RobotStateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RobotStateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RobotStateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RobotStateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get robot state information (such as kinematic state, power state, or faults).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotStateResponse GetRobotState(global::Bosdyn.Api.RobotStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get robot state information (such as kinematic state, power state, or faults).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotStateResponse GetRobotState(global::Bosdyn.Api.RobotStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotState, null, options, request);
      }
      /// <summary>
      /// Get robot state information (such as kinematic state, power state, or faults).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotStateResponse> GetRobotStateAsync(global::Bosdyn.Api.RobotStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get robot state information (such as kinematic state, power state, or faults).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotStateResponse> GetRobotStateAsync(global::Bosdyn.Api.RobotStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotState, null, options, request);
      }
      /// <summary>
      /// Get different robot metrics and parameters from the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotMetricsResponse GetRobotMetrics(global::Bosdyn.Api.RobotMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get different robot metrics and parameters from the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotMetricsResponse GetRobotMetrics(global::Bosdyn.Api.RobotMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotMetrics, null, options, request);
      }
      /// <summary>
      /// Get different robot metrics and parameters from the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotMetricsResponse> GetRobotMetricsAsync(global::Bosdyn.Api.RobotMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get different robot metrics and parameters from the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotMetricsResponse> GetRobotMetricsAsync(global::Bosdyn.Api.RobotMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotMetrics, null, options, request);
      }
      /// <summary>
      /// Get the hardware configuration of the robot, which describes the robot skeleton and urdf.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotHardwareConfigurationResponse GetRobotHardwareConfiguration(global::Bosdyn.Api.RobotHardwareConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotHardwareConfiguration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the hardware configuration of the robot, which describes the robot skeleton and urdf.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotHardwareConfigurationResponse GetRobotHardwareConfiguration(global::Bosdyn.Api.RobotHardwareConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotHardwareConfiguration, null, options, request);
      }
      /// <summary>
      /// Get the hardware configuration of the robot, which describes the robot skeleton and urdf.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotHardwareConfigurationResponse> GetRobotHardwareConfigurationAsync(global::Bosdyn.Api.RobotHardwareConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotHardwareConfigurationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the hardware configuration of the robot, which describes the robot skeleton and urdf.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotHardwareConfigurationResponse> GetRobotHardwareConfigurationAsync(global::Bosdyn.Api.RobotHardwareConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotHardwareConfiguration, null, options, request);
      }
      /// <summary>
      /// Returns the OBJ file for a specifc robot link. Intended to be called after
      /// GetRobotHardwareConfiguration, using the link names returned by that call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotLinkModelResponse GetRobotLinkModel(global::Bosdyn.Api.RobotLinkModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotLinkModel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the OBJ file for a specifc robot link. Intended to be called after
      /// GetRobotHardwareConfiguration, using the link names returned by that call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RobotLinkModelResponse GetRobotLinkModel(global::Bosdyn.Api.RobotLinkModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRobotLinkModel, null, options, request);
      }
      /// <summary>
      /// Returns the OBJ file for a specifc robot link. Intended to be called after
      /// GetRobotHardwareConfiguration, using the link names returned by that call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotLinkModelResponse> GetRobotLinkModelAsync(global::Bosdyn.Api.RobotLinkModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRobotLinkModelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the OBJ file for a specifc robot link. Intended to be called after
      /// GetRobotHardwareConfiguration, using the link names returned by that call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RobotLinkModelResponse> GetRobotLinkModelAsync(global::Bosdyn.Api.RobotLinkModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRobotLinkModel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RobotStateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RobotStateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RobotStateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetRobotState, serviceImpl.GetRobotState)
          .AddMethod(__Method_GetRobotMetrics, serviceImpl.GetRobotMetrics)
          .AddMethod(__Method_GetRobotHardwareConfiguration, serviceImpl.GetRobotHardwareConfiguration)
          .AddMethod(__Method_GetRobotLinkModel, serviceImpl.GetRobotLinkModel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RobotStateServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetRobotState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RobotStateRequest, global::Bosdyn.Api.RobotStateResponse>(serviceImpl.GetRobotState));
      serviceBinder.AddMethod(__Method_GetRobotMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RobotMetricsRequest, global::Bosdyn.Api.RobotMetricsResponse>(serviceImpl.GetRobotMetrics));
      serviceBinder.AddMethod(__Method_GetRobotHardwareConfiguration, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RobotHardwareConfigurationRequest, global::Bosdyn.Api.RobotHardwareConfigurationResponse>(serviceImpl.GetRobotHardwareConfiguration));
      serviceBinder.AddMethod(__Method_GetRobotLinkModel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RobotLinkModelRequest, global::Bosdyn.Api.RobotLinkModelResponse>(serviceImpl.GetRobotLinkModel));
    }

  }
}
#endregion
