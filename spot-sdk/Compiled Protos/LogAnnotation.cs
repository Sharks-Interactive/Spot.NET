// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/log_annotation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/log_annotation.proto</summary>
  public static partial class LogAnnotationReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/log_annotation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogAnnotationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtQcm90b3MvbG9nX2Fubm90YXRpb24ucHJvdG8SCmJvc2R5bi5hcGkaE1By",
            "b3Rvcy9oZWFkZXIucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAu",
            "cHJvdG8idQoXQWRkTG9nQW5ub3RhdGlvblJlcXVlc3QSKQoGaGVhZGVyGAEg",
            "ASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEi8KC2Fubm90YXRpb25z",
            "GAIgASgLMhouYm9zZHluLmFwaS5Mb2dBbm5vdGF0aW9ucyLHAQoOTG9nQW5u",
            "b3RhdGlvbnMSOwoNdGV4dF9tZXNzYWdlcxgBIAMoCzIkLmJvc2R5bi5hcGku",
            "TG9nQW5ub3RhdGlvblRleHRNZXNzYWdlEkMKEW9wZXJhdG9yX21lc3NhZ2Vz",
            "GAIgAygLMiguYm9zZHluLmFwaS5Mb2dBbm5vdGF0aW9uT3BlcmF0b3JNZXNz",
            "YWdlEjMKCWJsb2JfZGF0YRgDIAMoCzIgLmJvc2R5bi5hcGkuTG9nQW5ub3Rh",
            "dGlvbkxvZ0Jsb2Ii7gIKGExvZ0Fubm90YXRpb25UZXh0TWVzc2FnZRIPCgdt",
            "ZXNzYWdlGAEgASgJEi0KCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASDwoHc2VydmljZRgDIAEoCRI5CgVsZXZlbBgEIAEo",
            "DjIqLmJvc2R5bi5hcGkuTG9nQW5ub3RhdGlvblRleHRNZXNzYWdlLkxldmVs",
            "EgsKA3RhZxgFIAEoCRIQCghmaWxlbmFtZRgGIAEoCRITCgtsaW5lX251bWJl",
            "chgHIAEoBRI0ChB0aW1lc3RhbXBfY2xpZW50GAggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcCJcCgVMZXZlbBIRCg1MRVZFTF9VTktOT1dOEAAS",
            "DwoLTEVWRUxfREVCVUcQARIOCgpMRVZFTF9JTkZPEAISDgoKTEVWRUxfV0FS",
            "ThADEg8KC0xFVkVMX0VSUk9SEAQilAEKHExvZ0Fubm90YXRpb25PcGVyYXRv",
            "ck1lc3NhZ2USDwoHbWVzc2FnZRgBIAEoCRItCgl0aW1lc3RhbXAYAiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjQKEHRpbWVzdGFtcF9jbGll",
            "bnQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIqsBChRMb2dB",
            "bm5vdGF0aW9uTG9nQmxvYhItCgl0aW1lc3RhbXAYASABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEg8KB2NoYW5uZWwYAiABKAkSDwoHdHlwZV9p",
            "ZBgDIAEoCRIMCgRkYXRhGAQgASgMEjQKEHRpbWVzdGFtcF9jbGllbnQYBSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIkwKGEFkZExvZ0Fubm90",
            "YXRpb25SZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJl",
            "c3BvbnNlSGVhZGVySgQIAhADQhRCEkxvZ0Fubm90YXRpb25Qcm90b2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AddLogAnnotationRequest), global::Bosdyn.Api.AddLogAnnotationRequest.Parser, new[]{ "Header", "Annotations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LogAnnotations), global::Bosdyn.Api.LogAnnotations.Parser, new[]{ "TextMessages", "OperatorMessages", "BlobData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LogAnnotationTextMessage), global::Bosdyn.Api.LogAnnotationTextMessage.Parser, new[]{ "Message", "Timestamp", "Service", "Level", "Tag", "Filename", "LineNumber", "TimestampClient" }, null, new[]{ typeof(global::Bosdyn.Api.LogAnnotationTextMessage.Types.Level) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LogAnnotationOperatorMessage), global::Bosdyn.Api.LogAnnotationOperatorMessage.Parser, new[]{ "Message", "Timestamp", "TimestampClient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LogAnnotationLogBlob), global::Bosdyn.Api.LogAnnotationLogBlob.Parser, new[]{ "Timestamp", "Channel", "TypeId", "Data", "TimestampClient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AddLogAnnotationResponse), global::Bosdyn.Api.AddLogAnnotationResponse.Parser, new[]{ "Header" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// The AddLogAnnotation request sends the information that should be added into the log.
  /// </summary>
  public sealed partial class AddLogAnnotationRequest : pb::IMessage<AddLogAnnotationRequest> {
    private static readonly pb::MessageParser<AddLogAnnotationRequest> _parser = new pb::MessageParser<AddLogAnnotationRequest>(() => new AddLogAnnotationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLogAnnotationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationRequest(AddLogAnnotationRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      annotations_ = other.annotations_ != null ? other.annotations_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationRequest Clone() {
      return new AddLogAnnotationRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "annotations" field.</summary>
    public const int AnnotationsFieldNumber = 2;
    private global::Bosdyn.Api.LogAnnotations annotations_;
    /// <summary>
    /// The annotations to be aded into the log (can be text messages, blobs or robot operator messages).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LogAnnotations Annotations {
      get { return annotations_; }
      set {
        annotations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLogAnnotationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLogAnnotationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Annotations, other.Annotations)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (annotations_ != null) hash ^= Annotations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (annotations_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Annotations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (annotations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLogAnnotationRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.annotations_ != null) {
        if (annotations_ == null) {
          Annotations = new global::Bosdyn.Api.LogAnnotations();
        }
        Annotations.MergeFrom(other.Annotations);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (annotations_ == null) {
              Annotations = new global::Bosdyn.Api.LogAnnotations();
            }
            input.ReadMessage(Annotations);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// A container for elements to be added to the robot's logs.
  /// </summary>
  public sealed partial class LogAnnotations : pb::IMessage<LogAnnotations> {
    private static readonly pb::MessageParser<LogAnnotations> _parser = new pb::MessageParser<LogAnnotations>(() => new LogAnnotations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogAnnotations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotations(LogAnnotations other) : this() {
      textMessages_ = other.textMessages_.Clone();
      operatorMessages_ = other.operatorMessages_.Clone();
      blobData_ = other.blobData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotations Clone() {
      return new LogAnnotations(this);
    }

    /// <summary>Field number for the "text_messages" field.</summary>
    public const int TextMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LogAnnotationTextMessage> _repeated_textMessages_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.LogAnnotationTextMessage.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationTextMessage> textMessages_ = new pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationTextMessage>();
    /// <summary>
    /// Text messages to be added to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationTextMessage> TextMessages {
      get { return textMessages_; }
    }

    /// <summary>Field number for the "operator_messages" field.</summary>
    public const int OperatorMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LogAnnotationOperatorMessage> _repeated_operatorMessages_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.LogAnnotationOperatorMessage.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationOperatorMessage> operatorMessages_ = new pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationOperatorMessage>();
    /// <summary>
    /// Messages from the robot operator to be added to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationOperatorMessage> OperatorMessages {
      get { return operatorMessages_; }
    }

    /// <summary>Field number for the "blob_data" field.</summary>
    public const int BlobDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LogAnnotationLogBlob> _repeated_blobData_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.LogAnnotationLogBlob.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationLogBlob> blobData_ = new pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationLogBlob>();
    /// <summary>
    /// One or more binary blobs to add to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LogAnnotationLogBlob> BlobData {
      get { return blobData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogAnnotations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogAnnotations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!textMessages_.Equals(other.textMessages_)) return false;
      if(!operatorMessages_.Equals(other.operatorMessages_)) return false;
      if(!blobData_.Equals(other.blobData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= textMessages_.GetHashCode();
      hash ^= operatorMessages_.GetHashCode();
      hash ^= blobData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      textMessages_.WriteTo(output, _repeated_textMessages_codec);
      operatorMessages_.WriteTo(output, _repeated_operatorMessages_codec);
      blobData_.WriteTo(output, _repeated_blobData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += textMessages_.CalculateSize(_repeated_textMessages_codec);
      size += operatorMessages_.CalculateSize(_repeated_operatorMessages_codec);
      size += blobData_.CalculateSize(_repeated_blobData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogAnnotations other) {
      if (other == null) {
        return;
      }
      textMessages_.Add(other.textMessages_);
      operatorMessages_.Add(other.operatorMessages_);
      blobData_.Add(other.blobData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            textMessages_.AddEntriesFrom(input, _repeated_textMessages_codec);
            break;
          }
          case 18: {
            operatorMessages_.AddEntriesFrom(input, _repeated_operatorMessages_codec);
            break;
          }
          case 26: {
            blobData_.AddEntriesFrom(input, _repeated_blobData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// A text message to add to the robot's logs.
  /// These could be internal text-log messages from a client for use in debugging, for
  /// example.
  /// </summary>
  public sealed partial class LogAnnotationTextMessage : pb::IMessage<LogAnnotationTextMessage> {
    private static readonly pb::MessageParser<LogAnnotationTextMessage> _parser = new pb::MessageParser<LogAnnotationTextMessage>(() => new LogAnnotationTextMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogAnnotationTextMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationTextMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationTextMessage(LogAnnotationTextMessage other) : this() {
      message_ = other.message_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      service_ = other.service_;
      level_ = other.level_;
      tag_ = other.tag_;
      filename_ = other.filename_;
      lineNumber_ = other.lineNumber_;
      timestampClient_ = other.timestampClient_ != null ? other.timestampClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationTextMessage Clone() {
      return new LogAnnotationTextMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// String annotation message to add to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Required timestamp of data in robot clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private string service_ = "";
    /// <summary>
    /// The service responsible for the annotation. May be omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private global::Bosdyn.Api.LogAnnotationTextMessage.Types.Level level_ = 0;
    /// <summary>
    /// Level of significance of the text message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LogAnnotationTextMessage.Types.Level Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 5;
    private string tag_ = "";
    /// <summary>
    /// Optional tag to identify from what code/module this message originated from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 6;
    private string filename_ = "";
    /// <summary>
    /// Optional source file name originating the log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line_number" field.</summary>
    public const int LineNumberFieldNumber = 7;
    private int lineNumber_;
    /// <summary>
    /// Optional source file line number originating the log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_client" field.</summary>
    public const int TimestampClientFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestampClient_;
    /// <summary>
    /// Optional timestamp of data in client clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampClient {
      get { return timestampClient_; }
      set {
        timestampClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogAnnotationTextMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogAnnotationTextMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Service != other.Service) return false;
      if (Level != other.Level) return false;
      if (Tag != other.Tag) return false;
      if (Filename != other.Filename) return false;
      if (LineNumber != other.LineNumber) return false;
      if (!object.Equals(TimestampClient, other.TimestampClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
      if (timestampClient_ != null) hash ^= TimestampClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Service);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Level);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tag);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Filename);
      }
      if (LineNumber != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LineNumber);
      }
      if (timestampClient_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TimestampClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (LineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNumber);
      }
      if (timestampClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogAnnotationTextMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.LineNumber != 0) {
        LineNumber = other.LineNumber;
      }
      if (other.timestampClient_ != null) {
        if (timestampClient_ == null) {
          TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimestampClient.MergeFrom(other.TimestampClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            Service = input.ReadString();
            break;
          }
          case 32: {
            Level = (global::Bosdyn.Api.LogAnnotationTextMessage.Types.Level) input.ReadEnum();
            break;
          }
          case 42: {
            Tag = input.ReadString();
            break;
          }
          case 50: {
            Filename = input.ReadString();
            break;
          }
          case 56: {
            LineNumber = input.ReadInt32();
            break;
          }
          case 66: {
            if (timestampClient_ == null) {
              TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimestampClient);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogAnnotationTextMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Level {
        /// <summary>
        /// Invalid, do not use.
        /// </summary>
        [pbr::OriginalName("LEVEL_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Events likely of interest only in a debugging context.
        /// </summary>
        [pbr::OriginalName("LEVEL_DEBUG")] Debug = 1,
        /// <summary>
        /// Informational message during normal operation.
        /// </summary>
        [pbr::OriginalName("LEVEL_INFO")] Info = 2,
        /// <summary>
        /// Information about an unexpected but recoverable condition.
        /// </summary>
        [pbr::OriginalName("LEVEL_WARN")] Warn = 3,
        /// <summary>
        /// Information about an operation which did not succeed.
        /// </summary>
        [pbr::OriginalName("LEVEL_ERROR")] Error = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// An operator message to be added to the robot's logs.
  /// These are notes especially intended to mark when logs should be preserved and reviewed
  /// to ensure that robot hardware and/or software is working as intended.
  /// </summary>
  public sealed partial class LogAnnotationOperatorMessage : pb::IMessage<LogAnnotationOperatorMessage> {
    private static readonly pb::MessageParser<LogAnnotationOperatorMessage> _parser = new pb::MessageParser<LogAnnotationOperatorMessage>(() => new LogAnnotationOperatorMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogAnnotationOperatorMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationOperatorMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationOperatorMessage(LogAnnotationOperatorMessage other) : this() {
      message_ = other.message_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      timestampClient_ = other.timestampClient_ != null ? other.timestampClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationOperatorMessage Clone() {
      return new LogAnnotationOperatorMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// String annotation message to add to the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Required timestamp of data in robot clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_client" field.</summary>
    public const int TimestampClientFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestampClient_;
    /// <summary>
    /// Optional timestamp of data in client clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampClient {
      get { return timestampClient_; }
      set {
        timestampClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogAnnotationOperatorMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogAnnotationOperatorMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(TimestampClient, other.TimestampClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (timestampClient_ != null) hash ^= TimestampClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (timestampClient_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimestampClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (timestampClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogAnnotationOperatorMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.timestampClient_ != null) {
        if (timestampClient_ == null) {
          TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimestampClient.MergeFrom(other.TimestampClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            if (timestampClient_ == null) {
              TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimestampClient);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// A unit of binary data to be entered in a log.
  /// </summary>
  public sealed partial class LogAnnotationLogBlob : pb::IMessage<LogAnnotationLogBlob> {
    private static readonly pb::MessageParser<LogAnnotationLogBlob> _parser = new pb::MessageParser<LogAnnotationLogBlob>(() => new LogAnnotationLogBlob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogAnnotationLogBlob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationLogBlob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationLogBlob(LogAnnotationLogBlob other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      channel_ = other.channel_;
      typeId_ = other.typeId_;
      data_ = other.data_;
      timestampClient_ = other.timestampClient_ != null ? other.timestampClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogAnnotationLogBlob Clone() {
      return new LogAnnotationLogBlob(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Required timestamp of data in robot clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    /// A general label for this blob.
    /// This is distinct from type_id, which identifies how the blob is to be parsed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private string typeId_ = "";
    /// <summary>
    /// A description of the data's content and its encoding.
    /// This should be sufficient for deciding how to deserialize the data.
    /// For example, this could be the full name of a protobuf message type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeId {
      get { return typeId_; }
      set {
        typeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Raw data to be included as the blob log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_client" field.</summary>
    public const int TimestampClientFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestampClient_;
    /// <summary>
    /// Optional timestamp of data in client clock time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampClient {
      get { return timestampClient_; }
      set {
        timestampClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogAnnotationLogBlob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogAnnotationLogBlob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Channel != other.Channel) return false;
      if (TypeId != other.TypeId) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(TimestampClient, other.TimestampClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (TypeId.Length != 0) hash ^= TypeId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (timestampClient_ != null) hash ^= TimestampClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (TypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TypeId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (timestampClient_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimestampClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (TypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (timestampClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogAnnotationLogBlob other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.TypeId.Length != 0) {
        TypeId = other.TypeId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.timestampClient_ != null) {
        if (timestampClient_ == null) {
          TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimestampClient.MergeFrom(other.TimestampClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            TypeId = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            if (timestampClient_ == null) {
              TimestampClient = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimestampClient);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED as of 2.1.0: Please use the DataBufferService instead of the LogAnnotationService.
  /// The AddLogAnnotation response message, which is empty except for any potential header errors/warnings.
  /// </summary>
  public sealed partial class AddLogAnnotationResponse : pb::IMessage<AddLogAnnotationResponse> {
    private static readonly pb::MessageParser<AddLogAnnotationResponse> _parser = new pb::MessageParser<AddLogAnnotationResponse>(() => new AddLogAnnotationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLogAnnotationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LogAnnotationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationResponse(AddLogAnnotationResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLogAnnotationResponse Clone() {
      return new AddLogAnnotationResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common request/response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLogAnnotationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLogAnnotationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLogAnnotationResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
