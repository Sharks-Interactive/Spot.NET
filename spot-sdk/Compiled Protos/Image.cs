// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/image.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/image.proto</summary>
  public static partial class ImageReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvaW1hZ2UucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rvcy9oZWFk",
            "ZXIucHJvdG8aFVByb3Rvcy9nZW9tZXRyeS5wcm90bxoeZ29vZ2xlL3Byb3Rv",
            "YnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvIpcDCgVJbWFnZRIMCgRjb2xzGAIgASgFEgwKBHJvd3MYAyABKAUS",
            "DAoEZGF0YRgEIAEoDBIoCgZmb3JtYXQYBSABKA4yGC5ib3NkeW4uYXBpLklt",
            "YWdlLkZvcm1hdBIzCgxwaXhlbF9mb3JtYXQYBiABKA4yHS5ib3NkeW4uYXBp",
            "LkltYWdlLlBpeGVsRm9ybWF0Ik0KBkZvcm1hdBISCg5GT1JNQVRfVU5LTk9X",
            "ThAAEg8KC0ZPUk1BVF9KUEVHEAESDgoKRk9STUFUX1JBVxACEg4KCkZPUk1B",
            "VF9STEUQAyK1AQoLUGl4ZWxGb3JtYXQSGAoUUElYRUxfRk9STUFUX1VOS05P",
            "V04QABIdChlQSVhFTF9GT1JNQVRfR1JFWVNDQUxFX1U4EAESFwoTUElYRUxf",
            "Rk9STUFUX1JHQl9VOBADEhgKFFBJWEVMX0ZPUk1BVF9SR0JBX1U4EAQSGgoW",
            "UElYRUxfRk9STUFUX0RFUFRIX1UxNhAFEh4KGlBJWEVMX0ZPUk1BVF9HUkVZ",
            "U0NBTEVfVTE2EAYiVwoRQ2FwdHVyZVBhcmFtZXRlcnMSNAoRZXhwb3N1cmVf",
            "ZHVyYXRpb24YASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SDAoE",
            "Z2FpbhgCIAEoASKGAgoMSW1hZ2VDYXB0dXJlEjQKEGFjcXVpc2l0aW9uX3Rp",
            "bWUYHiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjoKE3RyYW5z",
            "Zm9ybXNfc25hcHNob3QYHyABKAsyHS5ib3NkeW4uYXBpLkZyYW1lVHJlZVNu",
            "YXBzaG90Eh8KF2ZyYW1lX25hbWVfaW1hZ2Vfc2Vuc29yGAUgASgJEiAKBWlt",
            "YWdlGAMgASgLMhEuYm9zZHluLmFwaS5JbWFnZRI1Cg5jYXB0dXJlX3BhcmFt",
            "cxgEIAEoCzIdLmJvc2R5bi5hcGkuQ2FwdHVyZVBhcmFtZXRlcnNKBAgBEAJK",
            "BAgCEAMijwQKC0ltYWdlU291cmNlEgwKBG5hbWUYAiABKAkSDAoEY29scxgE",
            "IAEoBRIMCgRyb3dzGAUgASgFEhMKC2RlcHRoX3NjYWxlGAYgASgBEjcKB3Bp",
            "bmhvbGUYCCABKAsyJC5ib3NkeW4uYXBpLkltYWdlU291cmNlLlBpbmhvbGVN",
            "b2RlbEgAEjUKCmltYWdlX3R5cGUYCSABKA4yIS5ib3NkeW4uYXBpLkltYWdl",
            "U291cmNlLkltYWdlVHlwZRrhAQoMUGluaG9sZU1vZGVsEkkKCmludHJpbnNp",
            "Y3MYASABKAsyNS5ib3NkeW4uYXBpLkltYWdlU291cmNlLlBpbmhvbGVNb2Rl",
            "bC5DYW1lcmFJbnRyaW5zaWNzGoUBChBDYW1lcmFJbnRyaW5zaWNzEiYKDGZv",
            "Y2FsX2xlbmd0aBgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjMhIpCg9wcmluY2lw",
            "YWxfcG9pbnQYAiABKAsyEC5ib3NkeW4uYXBpLlZlYzISHgoEc2tldxgDIAEo",
            "CzIQLmJvc2R5bi5hcGkuVmVjMiJQCglJbWFnZVR5cGUSFgoSSU1BR0VfVFlQ",
            "RV9VTktOT1dOEAASFQoRSU1BR0VfVFlQRV9WSVNVQUwQARIUChBJTUFHRV9U",
            "WVBFX0RFUFRIEAJCDwoNY2FtZXJhX21vZGVsc0oECAMQBEoECAcQCCJEChdM",
            "aXN0SW1hZ2VTb3VyY2VzUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3Nk",
            "eW4uYXBpLlJlcXVlc3RIZWFkZXIidgoYTGlzdEltYWdlU291cmNlc1Jlc3Bv",
            "bnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFk",
            "ZXISLgoNaW1hZ2Vfc291cmNlcxgCIAMoCzIXLmJvc2R5bi5hcGkuSW1hZ2VT",
            "b3VyY2UicgoMSW1hZ2VSZXF1ZXN0EhkKEWltYWdlX3NvdXJjZV9uYW1lGAEg",
            "ASgJEhcKD3F1YWxpdHlfcGVyY2VudBgCIAEoARIuCgxpbWFnZV9mb3JtYXQY",
            "AyABKA4yGC5ib3NkeW4uYXBpLkltYWdlLkZvcm1hdCJuCg9HZXRJbWFnZVJl",
            "cXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVh",
            "ZGVyEjAKDmltYWdlX3JlcXVlc3RzGAIgAygLMhguYm9zZHluLmFwaS5JbWFn",
            "ZVJlcXVlc3Qi0QIKDUltYWdlUmVzcG9uc2USJgoEc2hvdBgBIAEoCzIYLmJv",
            "c2R5bi5hcGkuSW1hZ2VDYXB0dXJlEicKBnNvdXJjZRgCIAEoCzIXLmJvc2R5",
            "bi5hcGkuSW1hZ2VTb3VyY2USMAoGc3RhdHVzGAQgASgOMiAuYm9zZHluLmFw",
            "aS5JbWFnZVJlc3BvbnNlLlN0YXR1cyKwAQoGU3RhdHVzEhIKDlNUQVRVU19V",
            "TktOT1dOEAASDQoJU1RBVFVTX09LEAESGQoVU1RBVFVTX1VOS05PV05fQ0FN",
            "RVJBEAISHAoYU1RBVFVTX1NPVVJDRV9EQVRBX0VSUk9SEAMSGwoXU1RBVFVT",
            "X0lNQUdFX0RBVEFfRVJST1IQBBItCilTVEFUVVNfVU5TVVBQT1JURURfSU1B",
            "R0VfRk9STUFUX1JFUVVFU1RFRBAFSgQIAxAESgQIBRAGInIKEEdldEltYWdl",
            "UmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25z",
            "ZUhlYWRlchIyCg9pbWFnZV9yZXNwb25zZXMYAiADKAsyGS5ib3NkeW4uYXBp",
            "LkltYWdlUmVzcG9uc2VCDEIKSW1hZ2VQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Image), global::Bosdyn.Api.Image.Parser, new[]{ "Cols", "Rows", "Data", "Format", "PixelFormat" }, null, new[]{ typeof(global::Bosdyn.Api.Image.Types.Format), typeof(global::Bosdyn.Api.Image.Types.PixelFormat) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CaptureParameters), global::Bosdyn.Api.CaptureParameters.Parser, new[]{ "ExposureDuration", "Gain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageCapture), global::Bosdyn.Api.ImageCapture.Parser, new[]{ "AcquisitionTime", "TransformsSnapshot", "FrameNameImageSensor", "Image", "CaptureParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageSource), global::Bosdyn.Api.ImageSource.Parser, new[]{ "Name", "Cols", "Rows", "DepthScale", "Pinhole", "ImageType" }, new[]{ "CameraModels" }, new[]{ typeof(global::Bosdyn.Api.ImageSource.Types.ImageType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageSource.Types.PinholeModel), global::Bosdyn.Api.ImageSource.Types.PinholeModel.Parser, new[]{ "Intrinsics" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics), global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics.Parser, new[]{ "FocalLength", "PrincipalPoint", "Skew" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListImageSourcesRequest), global::Bosdyn.Api.ListImageSourcesRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListImageSourcesResponse), global::Bosdyn.Api.ListImageSourcesResponse.Parser, new[]{ "Header", "ImageSources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageRequest), global::Bosdyn.Api.ImageRequest.Parser, new[]{ "ImageSourceName", "QualityPercent", "ImageFormat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetImageRequest), global::Bosdyn.Api.GetImageRequest.Parser, new[]{ "Header", "ImageRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageResponse), global::Bosdyn.Api.ImageResponse.Parser, new[]{ "Shot", "Source", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.ImageResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetImageResponse), global::Bosdyn.Api.GetImageResponse.Parser, new[]{ "Header", "ImageResponses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Rectangular color/greyscale/depth images.
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      cols_ = other.cols_;
      rows_ = other.rows_;
      data_ = other.data_;
      format_ = other.format_;
      pixelFormat_ = other.pixelFormat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private int cols_;
    /// <summary>
    /// Number of columns in the image (in pixels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cols {
      get { return cols_; }
      set {
        cols_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private int rows_;
    /// <summary>
    /// Number of rows in the image (in pixels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rows {
      get { return rows_; }
      set {
        rows_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Raw image data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 5;
    private global::Bosdyn.Api.Image.Types.Format format_ = 0;
    /// <summary>
    /// How the image is encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Image.Types.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "pixel_format" field.</summary>
    public const int PixelFormatFieldNumber = 6;
    private global::Bosdyn.Api.Image.Types.PixelFormat pixelFormat_ = 0;
    /// <summary>
    /// Pixel format of the image; this will be set even when the Format implies
    /// the pixel format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Image.Types.PixelFormat PixelFormat {
      get { return pixelFormat_; }
      set {
        pixelFormat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cols != other.Cols) return false;
      if (Rows != other.Rows) return false;
      if (Data != other.Data) return false;
      if (Format != other.Format) return false;
      if (PixelFormat != other.PixelFormat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cols != 0) hash ^= Cols.GetHashCode();
      if (Rows != 0) hash ^= Rows.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (PixelFormat != 0) hash ^= PixelFormat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cols != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cols);
      }
      if (Rows != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rows);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Format != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Format);
      }
      if (PixelFormat != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PixelFormat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cols != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cols);
      }
      if (Rows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rows);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (PixelFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PixelFormat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Cols != 0) {
        Cols = other.Cols;
      }
      if (other.Rows != 0) {
        Rows = other.Rows;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.PixelFormat != 0) {
        PixelFormat = other.PixelFormat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Cols = input.ReadInt32();
            break;
          }
          case 24: {
            Rows = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Format = (global::Bosdyn.Api.Image.Types.Format) input.ReadEnum();
            break;
          }
          case 48: {
            PixelFormat = (global::Bosdyn.Api.Image.Types.PixelFormat) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Image message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Format {
        /// <summary>
        /// Unknown image format.
        /// </summary>
        [pbr::OriginalName("FORMAT_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Color/greyscale formats.
        /// JPEG format.
        /// </summary>
        [pbr::OriginalName("FORMAT_JPEG")] Jpeg = 1,
        /// <summary>
        /// Uncompressed.  Requires pixel_format.
        /// </summary>
        [pbr::OriginalName("FORMAT_RAW")] Raw = 2,
        /// <summary>
        /// 1 byte run-length before each pixel value.
        /// </summary>
        [pbr::OriginalName("FORMAT_RLE")] Rle = 3,
      }

      public enum PixelFormat {
        /// <summary>
        /// Unspecified value -- should not be used.
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// One byte per pixel.
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_GREYSCALE_U8")] GreyscaleU8 = 1,
        /// <summary>
        /// Three bytes per pixel.
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_RGB_U8")] RgbU8 = 3,
        /// <summary>
        /// Four bytes per pixel.
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_RGBA_U8")] RgbaU8 = 4,
        /// <summary>
        /// Little-endian uint16 z-distance from camera (mm).
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_DEPTH_U16")] DepthU16 = 5,
        /// <summary>
        /// Two bytes per pixel.
        /// </summary>
        [pbr::OriginalName("PIXEL_FORMAT_GREYSCALE_U16")] GreyscaleU16 = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Sensor parameters associated with an image capture.
  /// </summary>
  public sealed partial class CaptureParameters : pb::IMessage<CaptureParameters> {
    private static readonly pb::MessageParser<CaptureParameters> _parser = new pb::MessageParser<CaptureParameters>(() => new CaptureParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParameters(CaptureParameters other) : this() {
      exposureDuration_ = other.exposureDuration_ != null ? other.exposureDuration_.Clone() : null;
      gain_ = other.gain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureParameters Clone() {
      return new CaptureParameters(this);
    }

    /// <summary>Field number for the "exposure_duration" field.</summary>
    public const int ExposureDurationFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration exposureDuration_;
    /// <summary>
    /// The duration of exposure in microseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration ExposureDuration {
      get { return exposureDuration_; }
      set {
        exposureDuration_ = value;
      }
    }

    /// <summary>Field number for the "gain" field.</summary>
    public const int GainFieldNumber = 2;
    private double gain_;
    /// <summary>
    /// Sensor gain in dB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gain {
      get { return gain_; }
      set {
        gain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExposureDuration, other.ExposureDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gain, other.Gain)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (exposureDuration_ != null) hash ^= ExposureDuration.GetHashCode();
      if (Gain != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gain);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (exposureDuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExposureDuration);
      }
      if (Gain != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Gain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (exposureDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExposureDuration);
      }
      if (Gain != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureParameters other) {
      if (other == null) {
        return;
      }
      if (other.exposureDuration_ != null) {
        if (exposureDuration_ == null) {
          ExposureDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        ExposureDuration.MergeFrom(other.ExposureDuration);
      }
      if (other.Gain != 0D) {
        Gain = other.Gain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (exposureDuration_ == null) {
              ExposureDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(ExposureDuration);
            break;
          }
          case 17: {
            Gain = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rectangular color/greyscale images.
  /// </summary>
  public sealed partial class ImageCapture : pb::IMessage<ImageCapture> {
    private static readonly pb::MessageParser<ImageCapture> _parser = new pb::MessageParser<ImageCapture>(() => new ImageCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCapture(ImageCapture other) : this() {
      acquisitionTime_ = other.acquisitionTime_ != null ? other.acquisitionTime_.Clone() : null;
      transformsSnapshot_ = other.transformsSnapshot_ != null ? other.transformsSnapshot_.Clone() : null;
      frameNameImageSensor_ = other.frameNameImageSensor_;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      captureParams_ = other.captureParams_ != null ? other.captureParams_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageCapture Clone() {
      return new ImageCapture(this);
    }

    /// <summary>Field number for the "acquisition_time" field.</summary>
    public const int AcquisitionTimeFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp acquisitionTime_;
    /// <summary>
    /// The time at which the image data was acquired in the robot's time basis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AcquisitionTime {
      get { return acquisitionTime_; }
      set {
        acquisitionTime_ = value;
      }
    }

    /// <summary>Field number for the "transforms_snapshot" field.</summary>
    public const int TransformsSnapshotFieldNumber = 31;
    private global::Bosdyn.Api.FrameTreeSnapshot transformsSnapshot_;
    /// <summary>
    /// A tree-based collection of transformations, which will include the transformations to each image's
    /// sensor in addition to transformations to the common frames ("vision", "body", "odom").
    /// All transforms within the snapshot are at the acquistion time of the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FrameTreeSnapshot TransformsSnapshot {
      get { return transformsSnapshot_; }
      set {
        transformsSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_image_sensor" field.</summary>
    public const int FrameNameImageSensorFieldNumber = 5;
    private string frameNameImageSensor_ = "";
    /// <summary>
    /// The frame name for the image's sensor source. This will be included in the transform snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameImageSensor {
      get { return frameNameImageSensor_; }
      set {
        frameNameImageSensor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::Bosdyn.Api.Image image_;
    /// <summary>
    /// Image data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "capture_params" field.</summary>
    public const int CaptureParamsFieldNumber = 4;
    private global::Bosdyn.Api.CaptureParameters captureParams_;
    /// <summary>
    /// Sensor parameters associated with this image capture.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.CaptureParameters CaptureParams {
      get { return captureParams_; }
      set {
        captureParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcquisitionTime, other.AcquisitionTime)) return false;
      if (!object.Equals(TransformsSnapshot, other.TransformsSnapshot)) return false;
      if (FrameNameImageSensor != other.FrameNameImageSensor) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(CaptureParams, other.CaptureParams)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (acquisitionTime_ != null) hash ^= AcquisitionTime.GetHashCode();
      if (transformsSnapshot_ != null) hash ^= TransformsSnapshot.GetHashCode();
      if (FrameNameImageSensor.Length != 0) hash ^= FrameNameImageSensor.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (captureParams_ != null) hash ^= CaptureParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
      if (captureParams_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CaptureParams);
      }
      if (FrameNameImageSensor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FrameNameImageSensor);
      }
      if (acquisitionTime_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransformsSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (acquisitionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformsSnapshot);
      }
      if (FrameNameImageSensor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameImageSensor);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (captureParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageCapture other) {
      if (other == null) {
        return;
      }
      if (other.acquisitionTime_ != null) {
        if (acquisitionTime_ == null) {
          AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AcquisitionTime.MergeFrom(other.AcquisitionTime);
      }
      if (other.transformsSnapshot_ != null) {
        if (transformsSnapshot_ == null) {
          TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
        }
        TransformsSnapshot.MergeFrom(other.TransformsSnapshot);
      }
      if (other.FrameNameImageSensor.Length != 0) {
        FrameNameImageSensor = other.FrameNameImageSensor;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Bosdyn.Api.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.captureParams_ != null) {
        if (captureParams_ == null) {
          CaptureParams = new global::Bosdyn.Api.CaptureParameters();
        }
        CaptureParams.MergeFrom(other.CaptureParams);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (image_ == null) {
              Image = new global::Bosdyn.Api.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 34: {
            if (captureParams_ == null) {
              CaptureParams = new global::Bosdyn.Api.CaptureParameters();
            }
            input.ReadMessage(CaptureParams);
            break;
          }
          case 42: {
            FrameNameImageSensor = input.ReadString();
            break;
          }
          case 242: {
            if (acquisitionTime_ == null) {
              AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AcquisitionTime);
            break;
          }
          case 250: {
            if (transformsSnapshot_ == null) {
              TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
            }
            input.ReadMessage(TransformsSnapshot);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Proto for a description of an image source on the robot.
  /// </summary>
  public sealed partial class ImageSource : pb::IMessage<ImageSource> {
    private static readonly pb::MessageParser<ImageSource> _parser = new pb::MessageParser<ImageSource>(() => new ImageSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource(ImageSource other) : this() {
      name_ = other.name_;
      cols_ = other.cols_;
      rows_ = other.rows_;
      depthScale_ = other.depthScale_;
      imageType_ = other.imageType_;
      switch (other.CameraModelsCase) {
        case CameraModelsOneofCase.Pinhole:
          Pinhole = other.Pinhole.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource Clone() {
      return new ImageSource(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of this image source used to get images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 4;
    private int cols_;
    /// <summary>
    /// Number of columns in the image (in pixels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cols {
      get { return cols_; }
      set {
        cols_ = value;
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 5;
    private int rows_;
    /// <summary>
    /// Number of rows in the image (in pixels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rows {
      get { return rows_; }
      set {
        rows_ = value;
      }
    }

    /// <summary>Field number for the "depth_scale" field.</summary>
    public const int DepthScaleFieldNumber = 6;
    private double depthScale_;
    /// <summary>
    /// The depth scale for the image data. Typically 1000, which converts it from mm to m.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DepthScale {
      get { return depthScale_; }
      set {
        depthScale_ = value;
      }
    }

    /// <summary>Field number for the "pinhole" field.</summary>
    public const int PinholeFieldNumber = 8;
    /// <summary>
    /// Rectilinear camera model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageSource.Types.PinholeModel Pinhole {
      get { return cameraModelsCase_ == CameraModelsOneofCase.Pinhole ? (global::Bosdyn.Api.ImageSource.Types.PinholeModel) cameraModels_ : null; }
      set {
        cameraModels_ = value;
        cameraModelsCase_ = value == null ? CameraModelsOneofCase.None : CameraModelsOneofCase.Pinhole;
      }
    }

    /// <summary>Field number for the "image_type" field.</summary>
    public const int ImageTypeFieldNumber = 9;
    private global::Bosdyn.Api.ImageSource.Types.ImageType imageType_ = 0;
    /// <summary>
    /// The kind of images returned by this image source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageSource.Types.ImageType ImageType {
      get { return imageType_; }
      set {
        imageType_ = value;
      }
    }

    private object cameraModels_;
    /// <summary>Enum of possible cases for the "camera_models" oneof.</summary>
    public enum CameraModelsOneofCase {
      None = 0,
      Pinhole = 8,
    }
    private CameraModelsOneofCase cameraModelsCase_ = CameraModelsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraModelsOneofCase CameraModelsCase {
      get { return cameraModelsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCameraModels() {
      cameraModelsCase_ = CameraModelsOneofCase.None;
      cameraModels_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Cols != other.Cols) return false;
      if (Rows != other.Rows) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DepthScale, other.DepthScale)) return false;
      if (!object.Equals(Pinhole, other.Pinhole)) return false;
      if (ImageType != other.ImageType) return false;
      if (CameraModelsCase != other.CameraModelsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cols != 0) hash ^= Cols.GetHashCode();
      if (Rows != 0) hash ^= Rows.GetHashCode();
      if (DepthScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DepthScale);
      if (cameraModelsCase_ == CameraModelsOneofCase.Pinhole) hash ^= Pinhole.GetHashCode();
      if (ImageType != 0) hash ^= ImageType.GetHashCode();
      hash ^= (int) cameraModelsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Cols != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cols);
      }
      if (Rows != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rows);
      }
      if (DepthScale != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DepthScale);
      }
      if (cameraModelsCase_ == CameraModelsOneofCase.Pinhole) {
        output.WriteRawTag(66);
        output.WriteMessage(Pinhole);
      }
      if (ImageType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ImageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cols != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cols);
      }
      if (Rows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rows);
      }
      if (DepthScale != 0D) {
        size += 1 + 8;
      }
      if (cameraModelsCase_ == CameraModelsOneofCase.Pinhole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pinhole);
      }
      if (ImageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSource other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cols != 0) {
        Cols = other.Cols;
      }
      if (other.Rows != 0) {
        Rows = other.Rows;
      }
      if (other.DepthScale != 0D) {
        DepthScale = other.DepthScale;
      }
      if (other.ImageType != 0) {
        ImageType = other.ImageType;
      }
      switch (other.CameraModelsCase) {
        case CameraModelsOneofCase.Pinhole:
          if (Pinhole == null) {
            Pinhole = new global::Bosdyn.Api.ImageSource.Types.PinholeModel();
          }
          Pinhole.MergeFrom(other.Pinhole);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Cols = input.ReadInt32();
            break;
          }
          case 40: {
            Rows = input.ReadInt32();
            break;
          }
          case 49: {
            DepthScale = input.ReadDouble();
            break;
          }
          case 66: {
            global::Bosdyn.Api.ImageSource.Types.PinholeModel subBuilder = new global::Bosdyn.Api.ImageSource.Types.PinholeModel();
            if (cameraModelsCase_ == CameraModelsOneofCase.Pinhole) {
              subBuilder.MergeFrom(Pinhole);
            }
            input.ReadMessage(subBuilder);
            Pinhole = subBuilder;
            break;
          }
          case 72: {
            ImageType = (global::Bosdyn.Api.ImageSource.Types.ImageType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageSource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ImageType {
        /// <summary>
        /// Unspecified image type.
        /// </summary>
        [pbr::OriginalName("IMAGE_TYPE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Color or greyscale intensity image.
        /// </summary>
        [pbr::OriginalName("IMAGE_TYPE_VISUAL")] Visual = 1,
        /// <summary>
        /// Pixel values represent distances to objects/surfaces.
        /// </summary>
        [pbr::OriginalName("IMAGE_TYPE_DEPTH")] Depth = 2,
      }

      /// <summary>
      /// The camera can be modeled as a pinhole camera described with a matrix.
      /// Camera Matrix can be constructed by the camera intrinsics:
      /// [[focal_length.x,         skew.x, principal_point.x],
      /// [[        skew.y, focal_length.y, principal_point.y],
      /// [[             0,              0,                 1]]
      /// </summary>
      public sealed partial class PinholeModel : pb::IMessage<PinholeModel> {
        private static readonly pb::MessageParser<PinholeModel> _parser = new pb::MessageParser<PinholeModel>(() => new PinholeModel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PinholeModel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ImageSource.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeModel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeModel(PinholeModel other) : this() {
          intrinsics_ = other.intrinsics_ != null ? other.intrinsics_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeModel Clone() {
          return new PinholeModel(this);
        }

        /// <summary>Field number for the "intrinsics" field.</summary>
        public const int IntrinsicsFieldNumber = 1;
        private global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics intrinsics_;
        /// <summary>
        /// The camera intrinsics are necessary for descrbing the pinhole camera matrix.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics Intrinsics {
          get { return intrinsics_; }
          set {
            intrinsics_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PinholeModel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PinholeModel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Intrinsics, other.Intrinsics)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (intrinsics_ != null) hash ^= Intrinsics.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (intrinsics_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Intrinsics);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (intrinsics_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intrinsics);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PinholeModel other) {
          if (other == null) {
            return;
          }
          if (other.intrinsics_ != null) {
            if (intrinsics_ == null) {
              Intrinsics = new global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics();
            }
            Intrinsics.MergeFrom(other.Intrinsics);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (intrinsics_ == null) {
                  Intrinsics = new global::Bosdyn.Api.ImageSource.Types.PinholeModel.Types.CameraIntrinsics();
                }
                input.ReadMessage(Intrinsics);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PinholeModel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Intrinsic parameters are in pixel space.
          /// </summary>
          public sealed partial class CameraIntrinsics : pb::IMessage<CameraIntrinsics> {
            private static readonly pb::MessageParser<CameraIntrinsics> _parser = new pb::MessageParser<CameraIntrinsics>(() => new CameraIntrinsics());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CameraIntrinsics> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Bosdyn.Api.ImageSource.Types.PinholeModel.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CameraIntrinsics() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CameraIntrinsics(CameraIntrinsics other) : this() {
              focalLength_ = other.focalLength_ != null ? other.focalLength_.Clone() : null;
              principalPoint_ = other.principalPoint_ != null ? other.principalPoint_.Clone() : null;
              skew_ = other.skew_ != null ? other.skew_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CameraIntrinsics Clone() {
              return new CameraIntrinsics(this);
            }

            /// <summary>Field number for the "focal_length" field.</summary>
            public const int FocalLengthFieldNumber = 1;
            private global::Bosdyn.Api.Vec2 focalLength_;
            /// <summary>
            /// The focal length of the camera.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bosdyn.Api.Vec2 FocalLength {
              get { return focalLength_; }
              set {
                focalLength_ = value;
              }
            }

            /// <summary>Field number for the "principal_point" field.</summary>
            public const int PrincipalPointFieldNumber = 2;
            private global::Bosdyn.Api.Vec2 principalPoint_;
            /// <summary>
            /// The optical center in sensor coordinates.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bosdyn.Api.Vec2 PrincipalPoint {
              get { return principalPoint_; }
              set {
                principalPoint_ = value;
              }
            }

            /// <summary>Field number for the "skew" field.</summary>
            public const int SkewFieldNumber = 3;
            private global::Bosdyn.Api.Vec2 skew_;
            /// <summary>
            /// The skew for the intrinsic matrix.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Bosdyn.Api.Vec2 Skew {
              get { return skew_; }
              set {
                skew_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CameraIntrinsics);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CameraIntrinsics other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(FocalLength, other.FocalLength)) return false;
              if (!object.Equals(PrincipalPoint, other.PrincipalPoint)) return false;
              if (!object.Equals(Skew, other.Skew)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (focalLength_ != null) hash ^= FocalLength.GetHashCode();
              if (principalPoint_ != null) hash ^= PrincipalPoint.GetHashCode();
              if (skew_ != null) hash ^= Skew.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (focalLength_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(FocalLength);
              }
              if (principalPoint_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(PrincipalPoint);
              }
              if (skew_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Skew);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (focalLength_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FocalLength);
              }
              if (principalPoint_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrincipalPoint);
              }
              if (skew_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skew);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CameraIntrinsics other) {
              if (other == null) {
                return;
              }
              if (other.focalLength_ != null) {
                if (focalLength_ == null) {
                  FocalLength = new global::Bosdyn.Api.Vec2();
                }
                FocalLength.MergeFrom(other.FocalLength);
              }
              if (other.principalPoint_ != null) {
                if (principalPoint_ == null) {
                  PrincipalPoint = new global::Bosdyn.Api.Vec2();
                }
                PrincipalPoint.MergeFrom(other.PrincipalPoint);
              }
              if (other.skew_ != null) {
                if (skew_ == null) {
                  Skew = new global::Bosdyn.Api.Vec2();
                }
                Skew.MergeFrom(other.Skew);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (focalLength_ == null) {
                      FocalLength = new global::Bosdyn.Api.Vec2();
                    }
                    input.ReadMessage(FocalLength);
                    break;
                  }
                  case 18: {
                    if (principalPoint_ == null) {
                      PrincipalPoint = new global::Bosdyn.Api.Vec2();
                    }
                    input.ReadMessage(PrincipalPoint);
                    break;
                  }
                  case 26: {
                    if (skew_ == null) {
                      Skew = new global::Bosdyn.Api.Vec2();
                    }
                    input.ReadMessage(Skew);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// The ListImageSources request message for the robot image service.
  /// </summary>
  public sealed partial class ListImageSourcesRequest : pb::IMessage<ListImageSourcesRequest> {
    private static readonly pb::MessageParser<ListImageSourcesRequest> _parser = new pb::MessageParser<ListImageSourcesRequest>(() => new ListImageSourcesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListImageSourcesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesRequest(ListImageSourcesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesRequest Clone() {
      return new ListImageSourcesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListImageSourcesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListImageSourcesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListImageSourcesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListImageSources response message which contains all known image sources for the robot.
  /// </summary>
  public sealed partial class ListImageSourcesResponse : pb::IMessage<ListImageSourcesResponse> {
    private static readonly pb::MessageParser<ListImageSourcesResponse> _parser = new pb::MessageParser<ListImageSourcesResponse>(() => new ListImageSourcesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListImageSourcesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesResponse(ListImageSourcesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      imageSources_ = other.imageSources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImageSourcesResponse Clone() {
      return new ListImageSourcesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response Header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "image_sources" field.</summary>
    public const int ImageSourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ImageSource> _repeated_imageSources_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ImageSource.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ImageSource> imageSources_ = new pbc::RepeatedField<global::Bosdyn.Api.ImageSource>();
    /// <summary>
    /// The set of ImageSources available from this service.
    /// May be empty if the service serves no cameras (e.g., if no cameras were found on startup).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ImageSource> ImageSources {
      get { return imageSources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListImageSourcesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListImageSourcesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!imageSources_.Equals(other.imageSources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= imageSources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      imageSources_.WriteTo(output, _repeated_imageSources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += imageSources_.CalculateSize(_repeated_imageSources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListImageSourcesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      imageSources_.Add(other.imageSources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            imageSources_.AddEntriesFrom(input, _repeated_imageSources_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The image request specifying the image source and data format desired.
  /// </summary>
  public sealed partial class ImageRequest : pb::IMessage<ImageRequest> {
    private static readonly pb::MessageParser<ImageRequest> _parser = new pb::MessageParser<ImageRequest>(() => new ImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRequest(ImageRequest other) : this() {
      imageSourceName_ = other.imageSourceName_;
      qualityPercent_ = other.qualityPercent_;
      imageFormat_ = other.imageFormat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRequest Clone() {
      return new ImageRequest(this);
    }

    /// <summary>Field number for the "image_source_name" field.</summary>
    public const int ImageSourceNameFieldNumber = 1;
    private string imageSourceName_ = "";
    /// <summary>
    /// The string name of the image source to get image data from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageSourceName {
      get { return imageSourceName_; }
      set {
        imageSourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quality_percent" field.</summary>
    public const int QualityPercentFieldNumber = 2;
    private double qualityPercent_;
    /// <summary>
    /// Image quality: a number from 0 (worst) to 100 (highest).
    /// Note that jpeg quality 100 is still lossy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QualityPercent {
      get { return qualityPercent_; }
      set {
        qualityPercent_ = value;
      }
    }

    /// <summary>Field number for the "image_format" field.</summary>
    public const int ImageFormatFieldNumber = 3;
    private global::Bosdyn.Api.Image.Types.Format imageFormat_ = 0;
    /// <summary>
    /// Specify the desired image encoding (e.g. JPEG, RAW). If no format is specified (e.g. FORMAT_UNKNOWN), the image
    /// service will choose the best format for the data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Image.Types.Format ImageFormat {
      get { return imageFormat_; }
      set {
        imageFormat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageSourceName != other.ImageSourceName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(QualityPercent, other.QualityPercent)) return false;
      if (ImageFormat != other.ImageFormat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageSourceName.Length != 0) hash ^= ImageSourceName.GetHashCode();
      if (QualityPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(QualityPercent);
      if (ImageFormat != 0) hash ^= ImageFormat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageSourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageSourceName);
      }
      if (QualityPercent != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(QualityPercent);
      }
      if (ImageFormat != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ImageFormat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageSourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageSourceName);
      }
      if (QualityPercent != 0D) {
        size += 1 + 8;
      }
      if (ImageFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageFormat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageSourceName.Length != 0) {
        ImageSourceName = other.ImageSourceName;
      }
      if (other.QualityPercent != 0D) {
        QualityPercent = other.QualityPercent;
      }
      if (other.ImageFormat != 0) {
        ImageFormat = other.ImageFormat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageSourceName = input.ReadString();
            break;
          }
          case 17: {
            QualityPercent = input.ReadDouble();
            break;
          }
          case 24: {
            ImageFormat = (global::Bosdyn.Api.Image.Types.Format) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetImage request message which can send multiple different image source requests at once.
  /// </summary>
  public sealed partial class GetImageRequest : pb::IMessage<GetImageRequest> {
    private static readonly pb::MessageParser<GetImageRequest> _parser = new pb::MessageParser<GetImageRequest>(() => new GetImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest(GetImageRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      imageRequests_ = other.imageRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest Clone() {
      return new GetImageRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "image_requests" field.</summary>
    public const int ImageRequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ImageRequest> _repeated_imageRequests_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ImageRequest.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ImageRequest> imageRequests_ = new pbc::RepeatedField<global::Bosdyn.Api.ImageRequest>();
    /// <summary>
    /// The different image requests for this rpc call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ImageRequest> ImageRequests {
      get { return imageRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!imageRequests_.Equals(other.imageRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= imageRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      imageRequests_.WriteTo(output, _repeated_imageRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += imageRequests_.CalculateSize(_repeated_imageRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      imageRequests_.Add(other.imageRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            imageRequests_.AddEntriesFrom(input, _repeated_imageRequests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The image response for each request, that includes image data and image source information.
  /// </summary>
  public sealed partial class ImageResponse : pb::IMessage<ImageResponse> {
    private static readonly pb::MessageParser<ImageResponse> _parser = new pb::MessageParser<ImageResponse>(() => new ImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResponse(ImageResponse other) : this() {
      shot_ = other.shot_ != null ? other.shot_.Clone() : null;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageResponse Clone() {
      return new ImageResponse(this);
    }

    /// <summary>Field number for the "shot" field.</summary>
    public const int ShotFieldNumber = 1;
    private global::Bosdyn.Api.ImageCapture shot_;
    /// <summary>
    /// The image capture contains the image data and information about the state of the camera and robot
    /// at the time the image was collected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageCapture Shot {
      get { return shot_; }
      set {
        shot_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Bosdyn.Api.ImageSource source_;
    /// <summary>
    /// The source describes general information about the camera source the image data was collected from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Bosdyn.Api.ImageResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shot, other.Shot)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shot_ != null) hash ^= Shot.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shot);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shot);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.shot_ != null) {
        if (shot_ == null) {
          Shot = new global::Bosdyn.Api.ImageCapture();
        }
        Shot.MergeFrom(other.Shot);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::Bosdyn.Api.ImageSource();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shot_ == null) {
              Shot = new global::Bosdyn.Api.ImageCapture();
            }
            input.ReadMessage(Shot);
            break;
          }
          case 18: {
            if (source_ == null) {
              Source = new global::Bosdyn.Api.ImageSource();
            }
            input.ReadMessage(Source);
            break;
          }
          case 32: {
            Status = (global::Bosdyn.Api.ImageResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used.
        /// An internal ImageService issue has happened if UNKNOWN is set.
        /// None of the other fields are filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Call succeeded at filling out all the fields.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// Image source name in request is unknown.  Other fields are not filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN_CAMERA")] UnknownCamera = 2,
        /// <summary>
        /// Failed to fill out ImageSource.  All the other fields are not filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_SOURCE_DATA_ERROR")] SourceDataError = 3,
        /// <summary>
        /// There was a problem with the image data.  Only the ImageSource is filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_IMAGE_DATA_ERROR")] ImageDataError = 4,
        /// <summary>
        /// The requested image format is unsupported for the image-source named. The image data will
        /// not be filled out. Note, if an image request has "FORMAT_UNKNOWN", the service should choose the
        /// best format to provide the data in.
        /// </summary>
        [pbr::OriginalName("STATUS_UNSUPPORTED_IMAGE_FORMAT_REQUESTED")] UnsupportedImageFormatRequested = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// The GetImage response message which includes image data for all requested sources.
  /// </summary>
  public sealed partial class GetImageResponse : pb::IMessage<GetImageResponse> {
    private static readonly pb::MessageParser<GetImageResponse> _parser = new pb::MessageParser<GetImageResponse>(() => new GetImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ImageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageResponse(GetImageResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      imageResponses_ = other.imageResponses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageResponse Clone() {
      return new GetImageResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "image_responses" field.</summary>
    public const int ImageResponsesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ImageResponse> _repeated_imageResponses_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ImageResponse.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ImageResponse> imageResponses_ = new pbc::RepeatedField<global::Bosdyn.Api.ImageResponse>();
    /// <summary>
    /// The ordering of these image responses is defined by the order of the ImageRequests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ImageResponse> ImageResponses {
      get { return imageResponses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!imageResponses_.Equals(other.imageResponses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= imageResponses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      imageResponses_.WriteTo(output, _repeated_imageResponses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += imageResponses_.CalculateSize(_repeated_imageResponses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      imageResponses_.Add(other.imageResponses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            imageResponses_.AddEntriesFrom(input, _repeated_imageResponses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
