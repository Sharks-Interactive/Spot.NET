// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/data_buffer_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
// DataBufferService allows adding information to the robot's log files.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// This service is a mechanism for adding information to the robot's log files.
  /// </summary>
  public static partial class DataBufferService
  {
    static readonly string __ServiceName = "bosdyn.api.DataBufferService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordTextMessagesRequest> __Marshaller_bosdyn_api_RecordTextMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordTextMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordTextMessagesResponse> __Marshaller_bosdyn_api_RecordTextMessagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordTextMessagesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordOperatorCommentsRequest> __Marshaller_bosdyn_api_RecordOperatorCommentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordOperatorCommentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordOperatorCommentsResponse> __Marshaller_bosdyn_api_RecordOperatorCommentsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordOperatorCommentsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordDataBlobsRequest> __Marshaller_bosdyn_api_RecordDataBlobsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordDataBlobsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordDataBlobsResponse> __Marshaller_bosdyn_api_RecordDataBlobsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordDataBlobsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordEventsRequest> __Marshaller_bosdyn_api_RecordEventsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordEventsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordEventsResponse> __Marshaller_bosdyn_api_RecordEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordEventsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterSignalSchemaRequest> __Marshaller_bosdyn_api_RegisterSignalSchemaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterSignalSchemaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterSignalSchemaResponse> __Marshaller_bosdyn_api_RegisterSignalSchemaResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterSignalSchemaResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordSignalTicksRequest> __Marshaller_bosdyn_api_RecordSignalTicksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordSignalTicksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RecordSignalTicksResponse> __Marshaller_bosdyn_api_RecordSignalTicksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RecordSignalTicksResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.RecordTextMessagesRequest, global::Bosdyn.Api.RecordTextMessagesResponse> __Method_RecordTextMessages = new grpc::Method<global::Bosdyn.Api.RecordTextMessagesRequest, global::Bosdyn.Api.RecordTextMessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordTextMessages",
        __Marshaller_bosdyn_api_RecordTextMessagesRequest,
        __Marshaller_bosdyn_api_RecordTextMessagesResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RecordOperatorCommentsRequest, global::Bosdyn.Api.RecordOperatorCommentsResponse> __Method_RecordOperatorComments = new grpc::Method<global::Bosdyn.Api.RecordOperatorCommentsRequest, global::Bosdyn.Api.RecordOperatorCommentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordOperatorComments",
        __Marshaller_bosdyn_api_RecordOperatorCommentsRequest,
        __Marshaller_bosdyn_api_RecordOperatorCommentsResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RecordDataBlobsRequest, global::Bosdyn.Api.RecordDataBlobsResponse> __Method_RecordDataBlobs = new grpc::Method<global::Bosdyn.Api.RecordDataBlobsRequest, global::Bosdyn.Api.RecordDataBlobsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordDataBlobs",
        __Marshaller_bosdyn_api_RecordDataBlobsRequest,
        __Marshaller_bosdyn_api_RecordDataBlobsResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RecordEventsRequest, global::Bosdyn.Api.RecordEventsResponse> __Method_RecordEvents = new grpc::Method<global::Bosdyn.Api.RecordEventsRequest, global::Bosdyn.Api.RecordEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordEvents",
        __Marshaller_bosdyn_api_RecordEventsRequest,
        __Marshaller_bosdyn_api_RecordEventsResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RegisterSignalSchemaRequest, global::Bosdyn.Api.RegisterSignalSchemaResponse> __Method_RegisterSignalSchema = new grpc::Method<global::Bosdyn.Api.RegisterSignalSchemaRequest, global::Bosdyn.Api.RegisterSignalSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterSignalSchema",
        __Marshaller_bosdyn_api_RegisterSignalSchemaRequest,
        __Marshaller_bosdyn_api_RegisterSignalSchemaResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RecordSignalTicksRequest, global::Bosdyn.Api.RecordSignalTicksResponse> __Method_RecordSignalTicks = new grpc::Method<global::Bosdyn.Api.RecordSignalTicksRequest, global::Bosdyn.Api.RecordSignalTicksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordSignalTicks",
        __Marshaller_bosdyn_api_RecordSignalTicksRequest,
        __Marshaller_bosdyn_api_RecordSignalTicksResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.DataBufferServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataBufferService</summary>
    [grpc::BindServiceMethod(typeof(DataBufferService), "BindService")]
    public abstract partial class DataBufferServiceBase
    {
      /// <summary>
      /// Add text messages to the log.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RecordTextMessagesResponse> RecordTextMessages(global::Bosdyn.Api.RecordTextMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a set of operator messages to the log.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RecordOperatorCommentsResponse> RecordOperatorComments(global::Bosdyn.Api.RecordOperatorCommentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add message-style data to the log.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RecordDataBlobsResponse> RecordDataBlobs(global::Bosdyn.Api.RecordDataBlobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add event data to the log.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RecordEventsResponse> RecordEvents(global::Bosdyn.Api.RecordEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Register a log tick schema, allowing client to later log tick data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RegisterSignalSchemaResponse> RegisterSignalSchema(global::Bosdyn.Api.RegisterSignalSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add signal data for registered signal schema to the log.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RecordSignalTicksResponse> RecordSignalTicks(global::Bosdyn.Api.RecordSignalTicksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataBufferService</summary>
    public partial class DataBufferServiceClient : grpc::ClientBase<DataBufferServiceClient>
    {
      /// <summary>Creates a new client for DataBufferService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataBufferServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataBufferService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataBufferServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataBufferServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataBufferServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Add text messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordTextMessagesResponse RecordTextMessages(global::Bosdyn.Api.RecordTextMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordTextMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add text messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordTextMessagesResponse RecordTextMessages(global::Bosdyn.Api.RecordTextMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordTextMessages, null, options, request);
      }
      /// <summary>
      /// Add text messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordTextMessagesResponse> RecordTextMessagesAsync(global::Bosdyn.Api.RecordTextMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordTextMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add text messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordTextMessagesResponse> RecordTextMessagesAsync(global::Bosdyn.Api.RecordTextMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordTextMessages, null, options, request);
      }
      /// <summary>
      /// Add a set of operator messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordOperatorCommentsResponse RecordOperatorComments(global::Bosdyn.Api.RecordOperatorCommentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordOperatorComments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a set of operator messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordOperatorCommentsResponse RecordOperatorComments(global::Bosdyn.Api.RecordOperatorCommentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordOperatorComments, null, options, request);
      }
      /// <summary>
      /// Add a set of operator messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordOperatorCommentsResponse> RecordOperatorCommentsAsync(global::Bosdyn.Api.RecordOperatorCommentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordOperatorCommentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a set of operator messages to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordOperatorCommentsResponse> RecordOperatorCommentsAsync(global::Bosdyn.Api.RecordOperatorCommentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordOperatorComments, null, options, request);
      }
      /// <summary>
      /// Add message-style data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordDataBlobsResponse RecordDataBlobs(global::Bosdyn.Api.RecordDataBlobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordDataBlobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add message-style data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordDataBlobsResponse RecordDataBlobs(global::Bosdyn.Api.RecordDataBlobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordDataBlobs, null, options, request);
      }
      /// <summary>
      /// Add message-style data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordDataBlobsResponse> RecordDataBlobsAsync(global::Bosdyn.Api.RecordDataBlobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordDataBlobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add message-style data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordDataBlobsResponse> RecordDataBlobsAsync(global::Bosdyn.Api.RecordDataBlobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordDataBlobs, null, options, request);
      }
      /// <summary>
      /// Add event data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordEventsResponse RecordEvents(global::Bosdyn.Api.RecordEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add event data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordEventsResponse RecordEvents(global::Bosdyn.Api.RecordEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordEvents, null, options, request);
      }
      /// <summary>
      /// Add event data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordEventsResponse> RecordEventsAsync(global::Bosdyn.Api.RecordEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add event data to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordEventsResponse> RecordEventsAsync(global::Bosdyn.Api.RecordEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordEvents, null, options, request);
      }
      /// <summary>
      /// Register a log tick schema, allowing client to later log tick data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterSignalSchemaResponse RegisterSignalSchema(global::Bosdyn.Api.RegisterSignalSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterSignalSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a log tick schema, allowing client to later log tick data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterSignalSchemaResponse RegisterSignalSchema(global::Bosdyn.Api.RegisterSignalSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterSignalSchema, null, options, request);
      }
      /// <summary>
      /// Register a log tick schema, allowing client to later log tick data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterSignalSchemaResponse> RegisterSignalSchemaAsync(global::Bosdyn.Api.RegisterSignalSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterSignalSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a log tick schema, allowing client to later log tick data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterSignalSchemaResponse> RegisterSignalSchemaAsync(global::Bosdyn.Api.RegisterSignalSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterSignalSchema, null, options, request);
      }
      /// <summary>
      /// Add signal data for registered signal schema to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordSignalTicksResponse RecordSignalTicks(global::Bosdyn.Api.RecordSignalTicksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordSignalTicks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add signal data for registered signal schema to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RecordSignalTicksResponse RecordSignalTicks(global::Bosdyn.Api.RecordSignalTicksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordSignalTicks, null, options, request);
      }
      /// <summary>
      /// Add signal data for registered signal schema to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordSignalTicksResponse> RecordSignalTicksAsync(global::Bosdyn.Api.RecordSignalTicksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordSignalTicksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add signal data for registered signal schema to the log.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RecordSignalTicksResponse> RecordSignalTicksAsync(global::Bosdyn.Api.RecordSignalTicksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordSignalTicks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataBufferServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataBufferServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataBufferServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RecordTextMessages, serviceImpl.RecordTextMessages)
          .AddMethod(__Method_RecordOperatorComments, serviceImpl.RecordOperatorComments)
          .AddMethod(__Method_RecordDataBlobs, serviceImpl.RecordDataBlobs)
          .AddMethod(__Method_RecordEvents, serviceImpl.RecordEvents)
          .AddMethod(__Method_RegisterSignalSchema, serviceImpl.RegisterSignalSchema)
          .AddMethod(__Method_RecordSignalTicks, serviceImpl.RecordSignalTicks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataBufferServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RecordTextMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RecordTextMessagesRequest, global::Bosdyn.Api.RecordTextMessagesResponse>(serviceImpl.RecordTextMessages));
      serviceBinder.AddMethod(__Method_RecordOperatorComments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RecordOperatorCommentsRequest, global::Bosdyn.Api.RecordOperatorCommentsResponse>(serviceImpl.RecordOperatorComments));
      serviceBinder.AddMethod(__Method_RecordDataBlobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RecordDataBlobsRequest, global::Bosdyn.Api.RecordDataBlobsResponse>(serviceImpl.RecordDataBlobs));
      serviceBinder.AddMethod(__Method_RecordEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RecordEventsRequest, global::Bosdyn.Api.RecordEventsResponse>(serviceImpl.RecordEvents));
      serviceBinder.AddMethod(__Method_RegisterSignalSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RegisterSignalSchemaRequest, global::Bosdyn.Api.RegisterSignalSchemaResponse>(serviceImpl.RegisterSignalSchema));
      serviceBinder.AddMethod(__Method_RecordSignalTicks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RecordSignalTicksRequest, global::Bosdyn.Api.RecordSignalTicksResponse>(serviceImpl.RecordSignalTicks));
    }

  }
}
#endregion
