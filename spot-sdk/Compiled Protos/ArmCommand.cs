// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/arm_command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/arm_command.proto</summary>
  public static partial class ArmCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/arm_command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArmCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvYXJtX2NvbW1hbmQucHJvdG8SCmJvc2R5bi5hcGkaGlByb3Rv",
            "cy9iYXNpY19jb21tYW5kLnByb3RvGhVQcm90b3MvZ2VvbWV0cnkucHJvdG8a",
            "F1Byb3Rvcy90cmFqZWN0b3J5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8a",
            "Hmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90byKMCQoKQXJtQ29tbWFu",
            "ZBqpBAoHUmVxdWVzdBJIChVhcm1fY2FydGVzaWFuX2NvbW1hbmQYAyABKAsy",
            "Jy5ib3NkeW4uYXBpLkFybUNhcnRlc2lhbkNvbW1hbmQuUmVxdWVzdEgAEkkK",
            "FmFybV9qb2ludF9tb3ZlX2NvbW1hbmQYBCABKAsyJy5ib3NkeW4uYXBpLkFy",
            "bUpvaW50TW92ZUNvbW1hbmQuUmVxdWVzdEgAElIKGm5hbWVkX2FybV9wb3Np",
            "dGlvbl9jb21tYW5kGAUgASgLMiwuYm9zZHluLmFwaS5OYW1lZEFybVBvc2l0",
            "aW9uc0NvbW1hbmQuUmVxdWVzdEgAEkYKFGFybV92ZWxvY2l0eV9jb21tYW5k",
            "GAYgASgLMiYuYm9zZHluLmFwaS5Bcm1WZWxvY2l0eUNvbW1hbmQuUmVxdWVz",
            "dEgAEjsKEGFybV9nYXplX2NvbW1hbmQYCCABKAsyHy5ib3NkeW4uYXBpLkdh",
            "emVDb21tYW5kLlJlcXVlc3RIABI+ChBhcm1fc3RvcF9jb21tYW5kGAkgASgL",
            "MiIuYm9zZHluLmFwaS5Bcm1TdG9wQ29tbWFuZC5SZXF1ZXN0SAASPgoQYXJt",
            "X2RyYWdfY29tbWFuZBgKIAEoCzIiLmJvc2R5bi5hcGkuQXJtRHJhZ0NvbW1h",
            "bmQuUmVxdWVzdEgAEiUKBnBhcmFtcxgLIAEoCzIVLmJvc2R5bi5hcGkuQXJt",
            "UGFyYW1zQgkKB2NvbW1hbmQa0QQKCEZlZWRiYWNrEkoKFmFybV9jYXJ0ZXNp",
            "YW5fZmVlZGJhY2sYAyABKAsyKC5ib3NkeW4uYXBpLkFybUNhcnRlc2lhbkNv",
            "bW1hbmQuRmVlZGJhY2tIABJLChdhcm1fam9pbnRfbW92ZV9mZWVkYmFjaxgE",
            "IAEoCzIoLmJvc2R5bi5hcGkuQXJtSm9pbnRNb3ZlQ29tbWFuZC5GZWVkYmFj",
            "a0gAElQKG25hbWVkX2FybV9wb3NpdGlvbl9mZWVkYmFjaxgFIAEoCzItLmJv",
            "c2R5bi5hcGkuTmFtZWRBcm1Qb3NpdGlvbnNDb21tYW5kLkZlZWRiYWNrSAAS",
            "SAoVYXJtX3ZlbG9jaXR5X2ZlZWRiYWNrGAYgASgLMicuYm9zZHluLmFwaS5B",
            "cm1WZWxvY2l0eUNvbW1hbmQuRmVlZGJhY2tIABI9ChFhcm1fZ2F6ZV9mZWVk",
            "YmFjaxgIIAEoCzIgLmJvc2R5bi5hcGkuR2F6ZUNvbW1hbmQuRmVlZGJhY2tI",
            "ABJAChFhcm1fc3RvcF9mZWVkYmFjaxgJIAEoCzIjLmJvc2R5bi5hcGkuQXJt",
            "U3RvcENvbW1hbmQuRmVlZGJhY2tIABJAChFhcm1fZHJhZ19mZWVkYmFjaxgK",
            "IAEoCzIjLmJvc2R5bi5hcGkuQXJtRHJhZ0NvbW1hbmQuRmVlZGJhY2tIABI9",
            "CgZzdGF0dXMYZCABKA4yLS5ib3NkeW4uYXBpLlJvYm90Q29tbWFuZEZlZWRi",
            "YWNrU3RhdHVzLlN0YXR1c0IKCghmZWVkYmFjayJLCglBcm1QYXJhbXMSPgoa",
            "ZGlzYWJsZV9ib2R5X2ZvcmNlX2xpbWl0ZXIYASABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlIvkEChJBcm1WZWxvY2l0eUNvbW1hbmQajAEKE0N5",
            "bGluZHJpY2FsVmVsb2NpdHkSOgoPbGluZWFyX3ZlbG9jaXR5GAEgASgLMiEu",
            "Ym9zZHluLmFwaS5DeWxpbmRyaWNhbENvb3JkaW5hdGUSOQoTbWF4X2xpbmVh",
            "cl92ZWxvY2l0eRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZRpZChFDYXJ0ZXNpYW5WZWxvY2l0eRISCgpmcmFtZV9uYW1lGAEgASgJEjAK",
            "FnZlbG9jaXR5X2luX2ZyYW1lX25hbWUYAiABKAsyEC5ib3NkeW4uYXBpLlZl",
            "YzMa7AIKB1JlcXVlc3QSUgoUY3lsaW5kcmljYWxfdmVsb2NpdHkYASABKAsy",
            "Mi5ib3NkeW4uYXBpLkFybVZlbG9jaXR5Q29tbWFuZC5DeWxpbmRyaWNhbFZl",
            "bG9jaXR5SAASTgoSY2FydGVzaWFuX3ZlbG9jaXR5GAIgASgLMjAuYm9zZHlu",
            "LmFwaS5Bcm1WZWxvY2l0eUNvbW1hbmQuQ2FydGVzaWFuVmVsb2NpdHlIABJC",
            "Cihhbmd1bGFyX3ZlbG9jaXR5X29mX2hhbmRfcnRfb2RvbV9pbl9oYW5kGAYg",
            "ASgLMhAuYm9zZHluLmFwaS5WZWMzEjoKFG1heGltdW1fYWNjZWxlcmF0aW9u",
            "GAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEiwKCGVuZF90",
            "aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIJCgdjb21t",
            "YW5kSgQIBBAFGgoKCEZlZWRiYWNrIogDChhOYW1lZEFybVBvc2l0aW9uc0Nv",
            "bW1hbmQaSwoHUmVxdWVzdBJACghwb3NpdGlvbhgBIAEoDjIuLmJvc2R5bi5h",
            "cGkuTmFtZWRBcm1Qb3NpdGlvbnNDb21tYW5kLlBvc2l0aW9ucxq8AQoIRmVl",
            "ZGJhY2sSRAoGc3RhdHVzGAEgASgOMjQuYm9zZHluLmFwaS5OYW1lZEFybVBv",
            "c2l0aW9uc0NvbW1hbmQuRmVlZGJhY2suU3RhdHVzImoKBlN0YXR1cxISCg5T",
            "VEFUVVNfVU5LTk9XThAAEhMKD1NUQVRVU19DT01QTEVURRABEhYKElNUQVRV",
            "U19JTl9QUk9HUkVTUxACEh8KG1NUQVRVU19TVEFMTEVEX0hPTERJTkdfSVRF",
            "TRADImAKCVBvc2l0aW9ucxIVChFQT1NJVElPTlNfVU5LTk9XThAAEhMKD1BP",
            "U0lUSU9OU19DQVJSWRABEhMKD1BPU0lUSU9OU19SRUFEWRACEhIKDlBPU0lU",
            "SU9OU19TVE9XEAMiqwwKE0FybUNhcnRlc2lhbkNvbW1hbmQalgkKB1JlcXVl",
            "c3QSFwoPcm9vdF9mcmFtZV9uYW1lGBMgASgJEi0KEHdyaXN0X3Rmb3JtX3Rv",
            "b2wYBiABKAsyEy5ib3NkeW4uYXBpLlNFM1Bvc2USLAoPcm9vdF90Zm9ybV90",
            "YXNrGBQgASgLMhMuYm9zZHluLmFwaS5TRTNQb3NlEjoKF3Bvc2VfdHJhamVj",
            "dG9yeV9pbl90YXNrGAIgASgLMhkuYm9zZHluLmFwaS5TRTNUcmFqZWN0b3J5",
            "EjoKFG1heGltdW1fYWNjZWxlcmF0aW9uGAMgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEjkKE21heF9saW5lYXJfdmVsb2NpdHkYBCABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSOgoUbWF4X2FuZ3VsYXJf",
            "dmVsb2NpdHkYBSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "PAoWbWF4X3Bvc190cmFja2luZ19lcnJvchgPIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRI8ChZtYXhfcm90X3RyYWNraW5nX2Vycm9yGBAg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjcKLWZvcmNlX3Jl",
            "bWFpbl9uZWFyX2N1cnJlbnRfam9pbnRfY29uZmlndXJhdGlvbhgRIAEoCEgA",
            "EkUKHXByZWZlcnJlZF9qb2ludF9jb25maWd1cmF0aW9uGBIgASgLMhwuYm9z",
            "ZHluLmFwaS5Bcm1Kb2ludFBvc2l0aW9uSAASQAoGeF9heGlzGAggASgOMjAu",
            "Ym9zZHluLmFwaS5Bcm1DYXJ0ZXNpYW5Db21tYW5kLlJlcXVlc3QuQXhpc01v",
            "ZGUSQAoGeV9heGlzGAkgASgOMjAuYm9zZHluLmFwaS5Bcm1DYXJ0ZXNpYW5D",
            "b21tYW5kLlJlcXVlc3QuQXhpc01vZGUSQAoGel9heGlzGAogASgOMjAuYm9z",
            "ZHluLmFwaS5Bcm1DYXJ0ZXNpYW5Db21tYW5kLlJlcXVlc3QuQXhpc01vZGUS",
            "QQoHcnhfYXhpcxgLIAEoDjIwLmJvc2R5bi5hcGkuQXJtQ2FydGVzaWFuQ29t",
            "bWFuZC5SZXF1ZXN0LkF4aXNNb2RlEkEKB3J5X2F4aXMYDCABKA4yMC5ib3Nk",
            "eW4uYXBpLkFybUNhcnRlc2lhbkNvbW1hbmQuUmVxdWVzdC5BeGlzTW9kZRJB",
            "Cgdyel9heGlzGA0gASgOMjAuYm9zZHluLmFwaS5Bcm1DYXJ0ZXNpYW5Db21t",
            "YW5kLlJlcXVlc3QuQXhpc01vZGUSPwoZd3JlbmNoX3RyYWplY3RvcnlfaW5f",
            "dGFzaxgOIAEoCzIcLmJvc2R5bi5hcGkuV3JlbmNoVHJhamVjdG9yeSI3CghB",
            "eGlzTW9kZRIWChJBWElTX01PREVfUE9TSVRJT04QABITCg9BWElTX01PREVf",
            "Rk9SQ0UQAUIVChNqb2ludF9jb25maWd1cmF0aW9uSgQIARACSgQIBxAIGvoC",
            "CghGZWVkYmFjaxI/CgZzdGF0dXMYASABKA4yLy5ib3NkeW4uYXBpLkFybUNh",
            "cnRlc2lhbkNvbW1hbmQuRmVlZGJhY2suU3RhdHVzEiMKG21lYXN1cmVkX3Bv",
            "c190cmFja2luZ19lcnJvchgCIAEoARIjChttZWFzdXJlZF9yb3RfdHJhY2tp",
            "bmdfZXJyb3IYAyABKAESJQodbWVhc3VyZWRfcG9zX2Rpc3RhbmNlX3RvX2dv",
            "YWwYBCABKAESJQodbWVhc3VyZWRfcm90X2Rpc3RhbmNlX3RvX2dvYWwYBSAB",
            "KAEilAEKBlN0YXR1cxISCg5TVEFUVVNfVU5LTk9XThAAEh4KGlNUQVRVU19U",
            "UkFKRUNUT1JZX0NPTVBMRVRFEAESFgoSU1RBVFVTX0lOX1BST0dSRVNTEAIS",
            "HwobU1RBVFVTX1RSQUpFQ1RPUllfQ0FOQ0VMTEVEEAMSHQoZU1RBVFVTX1RS",
            "QUpFQ1RPUllfU1RBTExFRBAEIqwEChNBcm1Kb2ludE1vdmVDb21tYW5kGj0K",
            "B1JlcXVlc3QSMgoKdHJhamVjdG9yeRgBIAEoCzIeLmJvc2R5bi5hcGkuQXJt",
            "Sm9pbnRUcmFqZWN0b3J5GtUDCghGZWVkYmFjaxI/CgZzdGF0dXMYASABKA4y",
            "Ly5ib3NkeW4uYXBpLkFybUpvaW50TW92ZUNvbW1hbmQuRmVlZGJhY2suU3Rh",
            "dHVzEk4KDnBsYW5uZXJfc3RhdHVzGAIgASgOMjYuYm9zZHluLmFwaS5Bcm1K",
            "b2ludE1vdmVDb21tYW5kLkZlZWRiYWNrLlBsYW5uZXJTdGF0dXMSOwoOcGxh",
            "bm5lZF9wb2ludHMYAyADKAsyIy5ib3NkeW4uYXBpLkFybUpvaW50VHJhamVj",
            "dG9yeVBvaW50Ei8KDHRpbWVfdG9fZ29hbBgEIAEoCzIZLmdvb2dsZS5wcm90",
            "b2J1Zi5EdXJhdGlvbiJJCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABIT",
            "Cg9TVEFUVVNfQ09NUExFVEUQARIWChJTVEFUVVNfSU5fUFJPR1JFU1MQAiJ/",
            "Cg1QbGFubmVyU3RhdHVzEhoKFlBMQU5ORVJfU1RBVFVTX1VOS05PV04QABIa",
            "ChZQTEFOTkVSX1NUQVRVU19TVUNDRVNTEAESGwoXUExBTk5FUl9TVEFUVVNf",
            "TU9ESUZJRUQQAhIZChVQTEFOTkVSX1NUQVRVU19GQUlMRUQQAyKUAgoQQXJt",
            "Sm9pbnRQb3NpdGlvbhIpCgNzaDAYASABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSKQoDc2gxGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEikKA2VsMBgDIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3Vi",
            "bGVWYWx1ZRIpCgNlbDEYBCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSKQoDd3IwGAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEikKA3dyMRgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1",
            "ZSKUAgoQQXJtSm9pbnRWZWxvY2l0eRIpCgNzaDAYASABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuRG91YmxlVmFsdWUSKQoDc2gxGAIgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlEikKA2VsMBgDIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRIpCgNlbDEYBCABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuRG91YmxlVmFsdWUSKQoDd3IwGAUgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LkRvdWJsZVZhbHVlEikKA3dyMRgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5E",
            "b3VibGVWYWx1ZSKyAQoXQXJtSm9pbnRUcmFqZWN0b3J5UG9pbnQSLgoIcG9z",
            "aXRpb24YASABKAsyHC5ib3NkeW4uYXBpLkFybUpvaW50UG9zaXRpb24SLgoI",
            "dmVsb2NpdHkYAiABKAsyHC5ib3NkeW4uYXBpLkFybUpvaW50VmVsb2NpdHkS",
            "NwoUdGltZV9zaW5jZV9yZWZlcmVuY2UYAyABKAsyGS5nb29nbGUucHJvdG9i",
            "dWYuRHVyYXRpb24i8QEKEkFybUpvaW50VHJhamVjdG9yeRIzCgZwb2ludHMY",
            "ASADKAsyIy5ib3NkeW4uYXBpLkFybUpvaW50VHJhamVjdG9yeVBvaW50EjIK",
            "DnJlZmVyZW5jZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBI2ChBtYXhpbXVtX3ZlbG9jaXR5GAMgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLkRvdWJsZVZhbHVlEjoKFG1heGltdW1fYWNjZWxlcmF0aW9uGAQgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlIosHCgtHYXplQ29tbWFu",
            "ZBrqAwoHUmVxdWVzdBI/Cht0YXJnZXRfdHJhamVjdG9yeV9pbl9mcmFtZTEY",
            "ASABKAsyGi5ib3NkeW4uYXBpLlZlYzNUcmFqZWN0b3J5EhMKC2ZyYW1lMV9u",
            "YW1lGAIgASgJEjwKGXRvb2xfdHJhamVjdG9yeV9pbl9mcmFtZTIYCiABKAsy",
            "GS5ib3NkeW4uYXBpLlNFM1RyYWplY3RvcnkSEwoLZnJhbWUyX25hbWUYCyAB",
            "KAkSLQoQd3Jpc3RfdGZvcm1fdG9vbBgJIAEoCzITLmJvc2R5bi5hcGkuU0Uz",
            "UG9zZRJICiJ0YXJnZXRfdHJhamVjdG9yeV9pbml0aWFsX3ZlbG9jaXR5GAUg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjoKFG1heGltdW1f",
            "YWNjZWxlcmF0aW9uGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEjkKE21heF9saW5lYXJfdmVsb2NpdHkYByABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSOgoUbWF4X2FuZ3VsYXJfdmVsb2NpdHkYCCAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWVKBAgDEARKBAgEEAUa",
            "jgMKCEZlZWRiYWNrEjcKBnN0YXR1cxgBIAEoDjInLmJvc2R5bi5hcGkuR2F6",
            "ZUNvbW1hbmQuRmVlZGJhY2suU3RhdHVzEhgKEGdhemluZ19hdF90YXJnZXQY",
            "AiABKAgSKAogZ2F6ZV90b190YXJnZXRfcm90YXRpb25fbWVhc3VyZWQYBSAB",
            "KAISHQoVaGFuZF9wb3NpdGlvbl9hdF9nb2FsGAMgASgIEiYKHmhhbmRfZGlz",
            "dGFuY2VfdG9fZ29hbF9tZWFzdXJlZBgGIAEoAhIZChFoYW5kX3JvbGxfYXRf",
            "Z29hbBgEIAEoCBIpCiFoYW5kX3JvbGxfdG9fdGFyZ2V0X3JvbGxfbWVhc3Vy",
            "ZWQYByABKAIieAoGU3RhdHVzEhIKDlNUQVRVU19VTktOT1dOEAASHgoaU1RB",
            "VFVTX1RSQUpFQ1RPUllfQ09NUExFVEUQARIWChJTVEFUVVNfSU5fUFJPR1JF",
            "U1MQAhIiCh5TVEFUVVNfVE9PTF9UUkFKRUNUT1JZX1NUQUxMRUQQAyInCg5B",
            "cm1TdG9wQ29tbWFuZBoJCgdSZXF1ZXN0GgoKCEZlZWRiYWNrQhFCD0FybUNv",
            "bW1hbmRQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.BasicCommandReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.TrajectoryReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCommand), global::Bosdyn.Api.ArmCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCommand.Types.Request), global::Bosdyn.Api.ArmCommand.Types.Request.Parser, new[]{ "ArmCartesianCommand", "ArmJointMoveCommand", "NamedArmPositionCommand", "ArmVelocityCommand", "ArmGazeCommand", "ArmStopCommand", "ArmDragCommand", "Params" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCommand.Types.Feedback), global::Bosdyn.Api.ArmCommand.Types.Feedback.Parser, new[]{ "ArmCartesianFeedback", "ArmJointMoveFeedback", "NamedArmPositionFeedback", "ArmVelocityFeedback", "ArmGazeFeedback", "ArmStopFeedback", "ArmDragFeedback", "Status" }, new[]{ "Feedback" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmParams), global::Bosdyn.Api.ArmParams.Parser, new[]{ "DisableBodyForceLimiter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmVelocityCommand), global::Bosdyn.Api.ArmVelocityCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity), global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity.Parser, new[]{ "LinearVelocity", "MaxLinearVelocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity), global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity.Parser, new[]{ "FrameName", "VelocityInFrameName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmVelocityCommand.Types.Request), global::Bosdyn.Api.ArmVelocityCommand.Types.Request.Parser, new[]{ "CylindricalVelocity", "CartesianVelocity", "AngularVelocityOfHandRtOdomInHand", "MaximumAcceleration", "EndTime" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback), global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NamedArmPositionsCommand), global::Bosdyn.Api.NamedArmPositionsCommand.Parser, null, null, new[]{ typeof(global::Bosdyn.Api.NamedArmPositionsCommand.Types.Positions) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request), global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request.Parser, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback), global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback.Parser, new[]{ "Status" }, null, new[]{ typeof(global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback.Types.Status) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCartesianCommand), global::Bosdyn.Api.ArmCartesianCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCartesianCommand.Types.Request), global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Parser, new[]{ "RootFrameName", "WristTformTool", "RootTformTask", "PoseTrajectoryInTask", "MaximumAcceleration", "MaxLinearVelocity", "MaxAngularVelocity", "MaxPosTrackingError", "MaxRotTrackingError", "ForceRemainNearCurrentJointConfiguration", "PreferredJointConfiguration", "XAxis", "YAxis", "ZAxis", "RxAxis", "RyAxis", "RzAxis", "WrenchTrajectoryInTask" }, new[]{ "JointConfiguration" }, new[]{ typeof(global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback), global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback.Parser, new[]{ "Status", "MeasuredPosTrackingError", "MeasuredRotTrackingError", "MeasuredPosDistanceToGoal", "MeasuredRotDistanceToGoal" }, null, new[]{ typeof(global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback.Types.Status) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointMoveCommand), global::Bosdyn.Api.ArmJointMoveCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointMoveCommand.Types.Request), global::Bosdyn.Api.ArmJointMoveCommand.Types.Request.Parser, new[]{ "Trajectory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback), global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Parser, new[]{ "Status", "PlannerStatus", "PlannedPoints", "TimeToGoal" }, null, new[]{ typeof(global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.Status), typeof(global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.PlannerStatus) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointPosition), global::Bosdyn.Api.ArmJointPosition.Parser, new[]{ "Sh0", "Sh1", "El0", "El1", "Wr0", "Wr1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointVelocity), global::Bosdyn.Api.ArmJointVelocity.Parser, new[]{ "Sh0", "Sh1", "El0", "El1", "Wr0", "Wr1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointTrajectoryPoint), global::Bosdyn.Api.ArmJointTrajectoryPoint.Parser, new[]{ "Position", "Velocity", "TimeSinceReference" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmJointTrajectory), global::Bosdyn.Api.ArmJointTrajectory.Parser, new[]{ "Points", "ReferenceTime", "MaximumVelocity", "MaximumAcceleration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GazeCommand), global::Bosdyn.Api.GazeCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GazeCommand.Types.Request), global::Bosdyn.Api.GazeCommand.Types.Request.Parser, new[]{ "TargetTrajectoryInFrame1", "Frame1Name", "ToolTrajectoryInFrame2", "Frame2Name", "WristTformTool", "TargetTrajectoryInitialVelocity", "MaximumAcceleration", "MaxLinearVelocity", "MaxAngularVelocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GazeCommand.Types.Feedback), global::Bosdyn.Api.GazeCommand.Types.Feedback.Parser, new[]{ "Status", "GazingAtTarget", "GazeToTargetRotationMeasured", "HandPositionAtGoal", "HandDistanceToGoalMeasured", "HandRollAtGoal", "HandRollToTargetRollMeasured" }, null, new[]{ typeof(global::Bosdyn.Api.GazeCommand.Types.Feedback.Types.Status) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmStopCommand), global::Bosdyn.Api.ArmStopCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmStopCommand.Types.Request), global::Bosdyn.Api.ArmStopCommand.Types.Request.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ArmStopCommand.Types.Feedback), global::Bosdyn.Api.ArmStopCommand.Types.Feedback.Parser, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The synchronized command message for commanding the arm to move.
  /// A synchronized commands is one of the possible robot command messages for controlling the robot.
  /// </summary>
  public sealed partial class ArmCommand : pb::IMessage<ArmCommand> {
    private static readonly pb::MessageParser<ArmCommand> _parser = new pb::MessageParser<ArmCommand>(() => new ArmCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCommand(ArmCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCommand Clone() {
      return new ArmCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArmCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The arm request must be one of the basic command primitives.
      /// </summary>
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          params_ = other.params_ != null ? other.params_.Clone() : null;
          switch (other.CommandCase) {
            case CommandOneofCase.ArmCartesianCommand:
              ArmCartesianCommand = other.ArmCartesianCommand.Clone();
              break;
            case CommandOneofCase.ArmJointMoveCommand:
              ArmJointMoveCommand = other.ArmJointMoveCommand.Clone();
              break;
            case CommandOneofCase.NamedArmPositionCommand:
              NamedArmPositionCommand = other.NamedArmPositionCommand.Clone();
              break;
            case CommandOneofCase.ArmVelocityCommand:
              ArmVelocityCommand = other.ArmVelocityCommand.Clone();
              break;
            case CommandOneofCase.ArmGazeCommand:
              ArmGazeCommand = other.ArmGazeCommand.Clone();
              break;
            case CommandOneofCase.ArmStopCommand:
              ArmStopCommand = other.ArmStopCommand.Clone();
              break;
            case CommandOneofCase.ArmDragCommand:
              ArmDragCommand = other.ArmDragCommand.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "arm_cartesian_command" field.</summary>
        public const int ArmCartesianCommandFieldNumber = 3;
        /// <summary>
        /// Control the end-effector in Cartesian space.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request ArmCartesianCommand {
          get { return commandCase_ == CommandOneofCase.ArmCartesianCommand ? (global::Bosdyn.Api.ArmCartesianCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmCartesianCommand;
          }
        }

        /// <summary>Field number for the "arm_joint_move_command" field.</summary>
        public const int ArmJointMoveCommandFieldNumber = 4;
        /// <summary>
        /// Control joint angles of the arm.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointMoveCommand.Types.Request ArmJointMoveCommand {
          get { return commandCase_ == CommandOneofCase.ArmJointMoveCommand ? (global::Bosdyn.Api.ArmJointMoveCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmJointMoveCommand;
          }
        }

        /// <summary>Field number for the "named_arm_position_command" field.</summary>
        public const int NamedArmPositionCommandFieldNumber = 5;
        /// <summary>
        /// Move the arm to some predefined configurations.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request NamedArmPositionCommand {
          get { return commandCase_ == CommandOneofCase.NamedArmPositionCommand ? (global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.NamedArmPositionCommand;
          }
        }

        /// <summary>Field number for the "arm_velocity_command" field.</summary>
        public const int ArmVelocityCommandFieldNumber = 6;
        /// <summary>
        /// Velocity control of the end-effector.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmVelocityCommand.Types.Request ArmVelocityCommand {
          get { return commandCase_ == CommandOneofCase.ArmVelocityCommand ? (global::Bosdyn.Api.ArmVelocityCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmVelocityCommand;
          }
        }

        /// <summary>Field number for the "arm_gaze_command" field.</summary>
        public const int ArmGazeCommandFieldNumber = 8;
        /// <summary>
        /// Point the gripper at a point in the world.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.GazeCommand.Types.Request ArmGazeCommand {
          get { return commandCase_ == CommandOneofCase.ArmGazeCommand ? (global::Bosdyn.Api.GazeCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmGazeCommand;
          }
        }

        /// <summary>Field number for the "arm_stop_command" field.</summary>
        public const int ArmStopCommandFieldNumber = 9;
        /// <summary>
        /// Stop the arm in place with minimal motion.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmStopCommand.Types.Request ArmStopCommand {
          get { return commandCase_ == CommandOneofCase.ArmStopCommand ? (global::Bosdyn.Api.ArmStopCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmStopCommand;
          }
        }

        /// <summary>Field number for the "arm_drag_command" field.</summary>
        public const int ArmDragCommandFieldNumber = 10;
        /// <summary>
        /// Use the arm to drag something held in the gripper.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmDragCommand.Types.Request ArmDragCommand {
          get { return commandCase_ == CommandOneofCase.ArmDragCommand ? (global::Bosdyn.Api.ArmDragCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ArmDragCommand;
          }
        }

        /// <summary>Field number for the "params" field.</summary>
        public const int ParamsFieldNumber = 11;
        private global::Bosdyn.Api.ArmParams params_;
        /// <summary>
        /// Any arm parameters to send, common across all arm commands
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmParams Params {
          get { return params_; }
          set {
            params_ = value;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          ArmCartesianCommand = 3,
          ArmJointMoveCommand = 4,
          NamedArmPositionCommand = 5,
          ArmVelocityCommand = 6,
          ArmGazeCommand = 8,
          ArmStopCommand = 9,
          ArmDragCommand = 10,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ArmCartesianCommand, other.ArmCartesianCommand)) return false;
          if (!object.Equals(ArmJointMoveCommand, other.ArmJointMoveCommand)) return false;
          if (!object.Equals(NamedArmPositionCommand, other.NamedArmPositionCommand)) return false;
          if (!object.Equals(ArmVelocityCommand, other.ArmVelocityCommand)) return false;
          if (!object.Equals(ArmGazeCommand, other.ArmGazeCommand)) return false;
          if (!object.Equals(ArmStopCommand, other.ArmStopCommand)) return false;
          if (!object.Equals(ArmDragCommand, other.ArmDragCommand)) return false;
          if (!object.Equals(Params, other.Params)) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.ArmCartesianCommand) hash ^= ArmCartesianCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.ArmJointMoveCommand) hash ^= ArmJointMoveCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.NamedArmPositionCommand) hash ^= NamedArmPositionCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.ArmVelocityCommand) hash ^= ArmVelocityCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.ArmGazeCommand) hash ^= ArmGazeCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.ArmStopCommand) hash ^= ArmStopCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.ArmDragCommand) hash ^= ArmDragCommand.GetHashCode();
          if (params_ != null) hash ^= Params.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.ArmCartesianCommand) {
            output.WriteRawTag(26);
            output.WriteMessage(ArmCartesianCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmJointMoveCommand) {
            output.WriteRawTag(34);
            output.WriteMessage(ArmJointMoveCommand);
          }
          if (commandCase_ == CommandOneofCase.NamedArmPositionCommand) {
            output.WriteRawTag(42);
            output.WriteMessage(NamedArmPositionCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmVelocityCommand) {
            output.WriteRawTag(50);
            output.WriteMessage(ArmVelocityCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmGazeCommand) {
            output.WriteRawTag(66);
            output.WriteMessage(ArmGazeCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmStopCommand) {
            output.WriteRawTag(74);
            output.WriteMessage(ArmStopCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmDragCommand) {
            output.WriteRawTag(82);
            output.WriteMessage(ArmDragCommand);
          }
          if (params_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(Params);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.ArmCartesianCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmCartesianCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmJointMoveCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmJointMoveCommand);
          }
          if (commandCase_ == CommandOneofCase.NamedArmPositionCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NamedArmPositionCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmVelocityCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmVelocityCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmGazeCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmGazeCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmStopCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmStopCommand);
          }
          if (commandCase_ == CommandOneofCase.ArmDragCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmDragCommand);
          }
          if (params_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.params_ != null) {
            if (params_ == null) {
              Params = new global::Bosdyn.Api.ArmParams();
            }
            Params.MergeFrom(other.Params);
          }
          switch (other.CommandCase) {
            case CommandOneofCase.ArmCartesianCommand:
              if (ArmCartesianCommand == null) {
                ArmCartesianCommand = new global::Bosdyn.Api.ArmCartesianCommand.Types.Request();
              }
              ArmCartesianCommand.MergeFrom(other.ArmCartesianCommand);
              break;
            case CommandOneofCase.ArmJointMoveCommand:
              if (ArmJointMoveCommand == null) {
                ArmJointMoveCommand = new global::Bosdyn.Api.ArmJointMoveCommand.Types.Request();
              }
              ArmJointMoveCommand.MergeFrom(other.ArmJointMoveCommand);
              break;
            case CommandOneofCase.NamedArmPositionCommand:
              if (NamedArmPositionCommand == null) {
                NamedArmPositionCommand = new global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request();
              }
              NamedArmPositionCommand.MergeFrom(other.NamedArmPositionCommand);
              break;
            case CommandOneofCase.ArmVelocityCommand:
              if (ArmVelocityCommand == null) {
                ArmVelocityCommand = new global::Bosdyn.Api.ArmVelocityCommand.Types.Request();
              }
              ArmVelocityCommand.MergeFrom(other.ArmVelocityCommand);
              break;
            case CommandOneofCase.ArmGazeCommand:
              if (ArmGazeCommand == null) {
                ArmGazeCommand = new global::Bosdyn.Api.GazeCommand.Types.Request();
              }
              ArmGazeCommand.MergeFrom(other.ArmGazeCommand);
              break;
            case CommandOneofCase.ArmStopCommand:
              if (ArmStopCommand == null) {
                ArmStopCommand = new global::Bosdyn.Api.ArmStopCommand.Types.Request();
              }
              ArmStopCommand.MergeFrom(other.ArmStopCommand);
              break;
            case CommandOneofCase.ArmDragCommand:
              if (ArmDragCommand == null) {
                ArmDragCommand = new global::Bosdyn.Api.ArmDragCommand.Types.Request();
              }
              ArmDragCommand.MergeFrom(other.ArmDragCommand);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 26: {
                global::Bosdyn.Api.ArmCartesianCommand.Types.Request subBuilder = new global::Bosdyn.Api.ArmCartesianCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmCartesianCommand) {
                  subBuilder.MergeFrom(ArmCartesianCommand);
                }
                input.ReadMessage(subBuilder);
                ArmCartesianCommand = subBuilder;
                break;
              }
              case 34: {
                global::Bosdyn.Api.ArmJointMoveCommand.Types.Request subBuilder = new global::Bosdyn.Api.ArmJointMoveCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmJointMoveCommand) {
                  subBuilder.MergeFrom(ArmJointMoveCommand);
                }
                input.ReadMessage(subBuilder);
                ArmJointMoveCommand = subBuilder;
                break;
              }
              case 42: {
                global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request subBuilder = new global::Bosdyn.Api.NamedArmPositionsCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.NamedArmPositionCommand) {
                  subBuilder.MergeFrom(NamedArmPositionCommand);
                }
                input.ReadMessage(subBuilder);
                NamedArmPositionCommand = subBuilder;
                break;
              }
              case 50: {
                global::Bosdyn.Api.ArmVelocityCommand.Types.Request subBuilder = new global::Bosdyn.Api.ArmVelocityCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmVelocityCommand) {
                  subBuilder.MergeFrom(ArmVelocityCommand);
                }
                input.ReadMessage(subBuilder);
                ArmVelocityCommand = subBuilder;
                break;
              }
              case 66: {
                global::Bosdyn.Api.GazeCommand.Types.Request subBuilder = new global::Bosdyn.Api.GazeCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmGazeCommand) {
                  subBuilder.MergeFrom(ArmGazeCommand);
                }
                input.ReadMessage(subBuilder);
                ArmGazeCommand = subBuilder;
                break;
              }
              case 74: {
                global::Bosdyn.Api.ArmStopCommand.Types.Request subBuilder = new global::Bosdyn.Api.ArmStopCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmStopCommand) {
                  subBuilder.MergeFrom(ArmStopCommand);
                }
                input.ReadMessage(subBuilder);
                ArmStopCommand = subBuilder;
                break;
              }
              case 82: {
                global::Bosdyn.Api.ArmDragCommand.Types.Request subBuilder = new global::Bosdyn.Api.ArmDragCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ArmDragCommand) {
                  subBuilder.MergeFrom(ArmDragCommand);
                }
                input.ReadMessage(subBuilder);
                ArmDragCommand = subBuilder;
                break;
              }
              case 90: {
                if (params_ == null) {
                  Params = new global::Bosdyn.Api.ArmParams();
                }
                input.ReadMessage(Params);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The feedback for the arm command that will provide information on the progress
      /// of the command.
      /// </summary>
      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          switch (other.FeedbackCase) {
            case FeedbackOneofCase.ArmCartesianFeedback:
              ArmCartesianFeedback = other.ArmCartesianFeedback.Clone();
              break;
            case FeedbackOneofCase.ArmJointMoveFeedback:
              ArmJointMoveFeedback = other.ArmJointMoveFeedback.Clone();
              break;
            case FeedbackOneofCase.NamedArmPositionFeedback:
              NamedArmPositionFeedback = other.NamedArmPositionFeedback.Clone();
              break;
            case FeedbackOneofCase.ArmVelocityFeedback:
              ArmVelocityFeedback = other.ArmVelocityFeedback.Clone();
              break;
            case FeedbackOneofCase.ArmGazeFeedback:
              ArmGazeFeedback = other.ArmGazeFeedback.Clone();
              break;
            case FeedbackOneofCase.ArmStopFeedback:
              ArmStopFeedback = other.ArmStopFeedback.Clone();
              break;
            case FeedbackOneofCase.ArmDragFeedback:
              ArmDragFeedback = other.ArmDragFeedback.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "arm_cartesian_feedback" field.</summary>
        public const int ArmCartesianFeedbackFieldNumber = 3;
        /// <summary>
        /// Feedback for the end-effector Cartesian command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback ArmCartesianFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmCartesianFeedback ? (global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmCartesianFeedback;
          }
        }

        /// <summary>Field number for the "arm_joint_move_feedback" field.</summary>
        public const int ArmJointMoveFeedbackFieldNumber = 4;
        /// <summary>
        /// Feedback for the joint move command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback ArmJointMoveFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmJointMoveFeedback ? (global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmJointMoveFeedback;
          }
        }

        /// <summary>Field number for the "named_arm_position_feedback" field.</summary>
        public const int NamedArmPositionFeedbackFieldNumber = 5;
        /// <summary>
        /// Feedback for the named position move command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback NamedArmPositionFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.NamedArmPositionFeedback ? (global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.NamedArmPositionFeedback;
          }
        }

        /// <summary>Field number for the "arm_velocity_feedback" field.</summary>
        public const int ArmVelocityFeedbackFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback ArmVelocityFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmVelocityFeedback ? (global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmVelocityFeedback;
          }
        }

        /// <summary>Field number for the "arm_gaze_feedback" field.</summary>
        public const int ArmGazeFeedbackFieldNumber = 8;
        /// <summary>
        /// Feedback for the gaze command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.GazeCommand.Types.Feedback ArmGazeFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmGazeFeedback ? (global::Bosdyn.Api.GazeCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmGazeFeedback;
          }
        }

        /// <summary>Field number for the "arm_stop_feedback" field.</summary>
        public const int ArmStopFeedbackFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmStopCommand.Types.Feedback ArmStopFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmStopFeedback ? (global::Bosdyn.Api.ArmStopCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmStopFeedback;
          }
        }

        /// <summary>Field number for the "arm_drag_feedback" field.</summary>
        public const int ArmDragFeedbackFieldNumber = 10;
        /// <summary>
        /// Feedback for the drag command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmDragCommand.Types.Feedback ArmDragFeedback {
          get { return feedbackCase_ == FeedbackOneofCase.ArmDragFeedback ? (global::Bosdyn.Api.ArmDragCommand.Types.Feedback) feedback_ : null; }
          set {
            feedback_ = value;
            feedbackCase_ = value == null ? FeedbackOneofCase.None : FeedbackOneofCase.ArmDragFeedback;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 100;
        private global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        private object feedback_;
        /// <summary>Enum of possible cases for the "feedback" oneof.</summary>
        public enum FeedbackOneofCase {
          None = 0,
          ArmCartesianFeedback = 3,
          ArmJointMoveFeedback = 4,
          NamedArmPositionFeedback = 5,
          ArmVelocityFeedback = 6,
          ArmGazeFeedback = 8,
          ArmStopFeedback = 9,
          ArmDragFeedback = 10,
        }
        private FeedbackOneofCase feedbackCase_ = FeedbackOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeedbackOneofCase FeedbackCase {
          get { return feedbackCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFeedback() {
          feedbackCase_ = FeedbackOneofCase.None;
          feedback_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ArmCartesianFeedback, other.ArmCartesianFeedback)) return false;
          if (!object.Equals(ArmJointMoveFeedback, other.ArmJointMoveFeedback)) return false;
          if (!object.Equals(NamedArmPositionFeedback, other.NamedArmPositionFeedback)) return false;
          if (!object.Equals(ArmVelocityFeedback, other.ArmVelocityFeedback)) return false;
          if (!object.Equals(ArmGazeFeedback, other.ArmGazeFeedback)) return false;
          if (!object.Equals(ArmStopFeedback, other.ArmStopFeedback)) return false;
          if (!object.Equals(ArmDragFeedback, other.ArmDragFeedback)) return false;
          if (Status != other.Status) return false;
          if (FeedbackCase != other.FeedbackCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (feedbackCase_ == FeedbackOneofCase.ArmCartesianFeedback) hash ^= ArmCartesianFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.ArmJointMoveFeedback) hash ^= ArmJointMoveFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.NamedArmPositionFeedback) hash ^= NamedArmPositionFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.ArmVelocityFeedback) hash ^= ArmVelocityFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.ArmGazeFeedback) hash ^= ArmGazeFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.ArmStopFeedback) hash ^= ArmStopFeedback.GetHashCode();
          if (feedbackCase_ == FeedbackOneofCase.ArmDragFeedback) hash ^= ArmDragFeedback.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          hash ^= (int) feedbackCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (feedbackCase_ == FeedbackOneofCase.ArmCartesianFeedback) {
            output.WriteRawTag(26);
            output.WriteMessage(ArmCartesianFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmJointMoveFeedback) {
            output.WriteRawTag(34);
            output.WriteMessage(ArmJointMoveFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.NamedArmPositionFeedback) {
            output.WriteRawTag(42);
            output.WriteMessage(NamedArmPositionFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmVelocityFeedback) {
            output.WriteRawTag(50);
            output.WriteMessage(ArmVelocityFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmGazeFeedback) {
            output.WriteRawTag(66);
            output.WriteMessage(ArmGazeFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmStopFeedback) {
            output.WriteRawTag(74);
            output.WriteMessage(ArmStopFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmDragFeedback) {
            output.WriteRawTag(82);
            output.WriteMessage(ArmDragFeedback);
          }
          if (Status != 0) {
            output.WriteRawTag(160, 6);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (feedbackCase_ == FeedbackOneofCase.ArmCartesianFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmCartesianFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmJointMoveFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmJointMoveFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.NamedArmPositionFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NamedArmPositionFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmVelocityFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmVelocityFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmGazeFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmGazeFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmStopFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmStopFeedback);
          }
          if (feedbackCase_ == FeedbackOneofCase.ArmDragFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmDragFeedback);
          }
          if (Status != 0) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          switch (other.FeedbackCase) {
            case FeedbackOneofCase.ArmCartesianFeedback:
              if (ArmCartesianFeedback == null) {
                ArmCartesianFeedback = new global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback();
              }
              ArmCartesianFeedback.MergeFrom(other.ArmCartesianFeedback);
              break;
            case FeedbackOneofCase.ArmJointMoveFeedback:
              if (ArmJointMoveFeedback == null) {
                ArmJointMoveFeedback = new global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback();
              }
              ArmJointMoveFeedback.MergeFrom(other.ArmJointMoveFeedback);
              break;
            case FeedbackOneofCase.NamedArmPositionFeedback:
              if (NamedArmPositionFeedback == null) {
                NamedArmPositionFeedback = new global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback();
              }
              NamedArmPositionFeedback.MergeFrom(other.NamedArmPositionFeedback);
              break;
            case FeedbackOneofCase.ArmVelocityFeedback:
              if (ArmVelocityFeedback == null) {
                ArmVelocityFeedback = new global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback();
              }
              ArmVelocityFeedback.MergeFrom(other.ArmVelocityFeedback);
              break;
            case FeedbackOneofCase.ArmGazeFeedback:
              if (ArmGazeFeedback == null) {
                ArmGazeFeedback = new global::Bosdyn.Api.GazeCommand.Types.Feedback();
              }
              ArmGazeFeedback.MergeFrom(other.ArmGazeFeedback);
              break;
            case FeedbackOneofCase.ArmStopFeedback:
              if (ArmStopFeedback == null) {
                ArmStopFeedback = new global::Bosdyn.Api.ArmStopCommand.Types.Feedback();
              }
              ArmStopFeedback.MergeFrom(other.ArmStopFeedback);
              break;
            case FeedbackOneofCase.ArmDragFeedback:
              if (ArmDragFeedback == null) {
                ArmDragFeedback = new global::Bosdyn.Api.ArmDragCommand.Types.Feedback();
              }
              ArmDragFeedback.MergeFrom(other.ArmDragFeedback);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 26: {
                global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmCartesianFeedback) {
                  subBuilder.MergeFrom(ArmCartesianFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmCartesianFeedback = subBuilder;
                break;
              }
              case 34: {
                global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmJointMoveFeedback) {
                  subBuilder.MergeFrom(ArmJointMoveFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmJointMoveFeedback = subBuilder;
                break;
              }
              case 42: {
                global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.NamedArmPositionFeedback) {
                  subBuilder.MergeFrom(NamedArmPositionFeedback);
                }
                input.ReadMessage(subBuilder);
                NamedArmPositionFeedback = subBuilder;
                break;
              }
              case 50: {
                global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ArmVelocityCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmVelocityFeedback) {
                  subBuilder.MergeFrom(ArmVelocityFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmVelocityFeedback = subBuilder;
                break;
              }
              case 66: {
                global::Bosdyn.Api.GazeCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.GazeCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmGazeFeedback) {
                  subBuilder.MergeFrom(ArmGazeFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmGazeFeedback = subBuilder;
                break;
              }
              case 74: {
                global::Bosdyn.Api.ArmStopCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ArmStopCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmStopFeedback) {
                  subBuilder.MergeFrom(ArmStopFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmStopFeedback = subBuilder;
                break;
              }
              case 82: {
                global::Bosdyn.Api.ArmDragCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ArmDragCommand.Types.Feedback();
                if (feedbackCase_ == FeedbackOneofCase.ArmDragFeedback) {
                  subBuilder.MergeFrom(ArmDragFeedback);
                }
                input.ReadMessage(subBuilder);
                ArmDragFeedback = subBuilder;
                break;
              }
              case 800: {
                Status = (global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Parameters common across arm commands.
  /// </summary>
  public sealed partial class ArmParams : pb::IMessage<ArmParams> {
    private static readonly pb::MessageParser<ArmParams> _parser = new pb::MessageParser<ArmParams>(() => new ArmParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmParams(ArmParams other) : this() {
      DisableBodyForceLimiter = other.DisableBodyForceLimiter;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmParams Clone() {
      return new ArmParams(this);
    }

    /// <summary>Field number for the "disable_body_force_limiter" field.</summary>
    public const int DisableBodyForceLimiterFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_disableBodyForceLimiter_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? disableBodyForceLimiter_;
    /// <summary>
    //// Whether or not to disable the body force limiter running on the robot. By default, this is
    //// on, and the chance that the body falls over because the arm makes contact in the world is
    //// low. If this is purposely disabled (by setting disable_body_force_limiter to True), the arm
    //// may be able to accelerate faster, and apply more force to the world and to objects than usual,
    //// but there is also added risk of the robot falling over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DisableBodyForceLimiter {
      get { return disableBodyForceLimiter_; }
      set {
        disableBodyForceLimiter_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisableBodyForceLimiter != other.DisableBodyForceLimiter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (disableBodyForceLimiter_ != null) hash ^= DisableBodyForceLimiter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (disableBodyForceLimiter_ != null) {
        _single_disableBodyForceLimiter_codec.WriteTagAndValue(output, DisableBodyForceLimiter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (disableBodyForceLimiter_ != null) {
        size += _single_disableBodyForceLimiter_codec.CalculateSizeWithTag(DisableBodyForceLimiter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmParams other) {
      if (other == null) {
        return;
      }
      if (other.disableBodyForceLimiter_ != null) {
        if (disableBodyForceLimiter_ == null || other.DisableBodyForceLimiter != false) {
          DisableBodyForceLimiter = other.DisableBodyForceLimiter;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_disableBodyForceLimiter_codec.Read(input);
            if (disableBodyForceLimiter_ == null || value != false) {
              DisableBodyForceLimiter = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// When controlling the arm with a joystick, because of latency it can often be better to send
  /// velocity commands rather than position commands.  Both linear and angular velocity can be
  /// specified.  The linear velocity can be specified in a cylindrical frame around the shoulder or
  /// with a specified frame.
  /// </summary>
  public sealed partial class ArmVelocityCommand : pb::IMessage<ArmVelocityCommand> {
    private static readonly pb::MessageParser<ArmVelocityCommand> _parser = new pb::MessageParser<ArmVelocityCommand>(() => new ArmVelocityCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmVelocityCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmVelocityCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmVelocityCommand(ArmVelocityCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmVelocityCommand Clone() {
      return new ArmVelocityCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmVelocityCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmVelocityCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmVelocityCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArmVelocityCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CylindricalVelocity : pb::IMessage<CylindricalVelocity> {
        private static readonly pb::MessageParser<CylindricalVelocity> _parser = new pb::MessageParser<CylindricalVelocity>(() => new CylindricalVelocity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CylindricalVelocity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmVelocityCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CylindricalVelocity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CylindricalVelocity(CylindricalVelocity other) : this() {
          linearVelocity_ = other.linearVelocity_ != null ? other.linearVelocity_.Clone() : null;
          MaxLinearVelocity = other.MaxLinearVelocity;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CylindricalVelocity Clone() {
          return new CylindricalVelocity(this);
        }

        /// <summary>Field number for the "linear_velocity" field.</summary>
        public const int LinearVelocityFieldNumber = 1;
        private global::Bosdyn.Api.CylindricalCoordinate linearVelocity_;
        /// <summary>
        //// The linear velocities for the end-effector are specified in unitless cylindrical
        //// coordinates. The origin of the cylindrical coordinate system is the base of the arm
        //// (shoulder).  The Z-axis is aligned with gravity, and the X-axis is the unit vector from
        //// the shoulder to the hand-point. This construction allows for 'Z'-axis velocities to
        //// raise/lower the hand, 'R'-axis velocities will cause the hand to move towards/away from
        //// the shoulder, and 'theta'-axis velocities will cause the hand to travel
        //// clockwise/counter-clockwise around the shoulder. Lastly, the command is unitless, with
        //// values for each axis specified in the range [-1, 1].  A value of 0 denotes no velocity
        //// and values of +/- 1 denote maximum velocity (see max_linear_velocity).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.CylindricalCoordinate LinearVelocity {
          get { return linearVelocity_; }
          set {
            linearVelocity_ = value;
          }
        }

        /// <summary>Field number for the "max_linear_velocity" field.</summary>
        public const int MaxLinearVelocityFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_maxLinearVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? maxLinearVelocity_;
        /// <summary>
        //// The maximum velocity in meters / second for the hand.
        //// If unset and default value of 0 received, will set max_linear_velocity to 0.5 m/s.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxLinearVelocity {
          get { return maxLinearVelocity_; }
          set {
            maxLinearVelocity_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CylindricalVelocity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CylindricalVelocity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LinearVelocity, other.LinearVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxLinearVelocity, other.MaxLinearVelocity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (linearVelocity_ != null) hash ^= LinearVelocity.GetHashCode();
          if (maxLinearVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxLinearVelocity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (linearVelocity_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(LinearVelocity);
          }
          if (maxLinearVelocity_ != null) {
            _single_maxLinearVelocity_codec.WriteTagAndValue(output, MaxLinearVelocity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (linearVelocity_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearVelocity);
          }
          if (maxLinearVelocity_ != null) {
            size += _single_maxLinearVelocity_codec.CalculateSizeWithTag(MaxLinearVelocity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CylindricalVelocity other) {
          if (other == null) {
            return;
          }
          if (other.linearVelocity_ != null) {
            if (linearVelocity_ == null) {
              LinearVelocity = new global::Bosdyn.Api.CylindricalCoordinate();
            }
            LinearVelocity.MergeFrom(other.LinearVelocity);
          }
          if (other.maxLinearVelocity_ != null) {
            if (maxLinearVelocity_ == null || other.MaxLinearVelocity != 0D) {
              MaxLinearVelocity = other.MaxLinearVelocity;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (linearVelocity_ == null) {
                  LinearVelocity = new global::Bosdyn.Api.CylindricalCoordinate();
                }
                input.ReadMessage(LinearVelocity);
                break;
              }
              case 18: {
                double? value = _single_maxLinearVelocity_codec.Read(input);
                if (maxLinearVelocity_ == null || value != 0D) {
                  MaxLinearVelocity = value;
                }
                break;
              }
            }
          }
        }

      }

      public sealed partial class CartesianVelocity : pb::IMessage<CartesianVelocity> {
        private static readonly pb::MessageParser<CartesianVelocity> _parser = new pb::MessageParser<CartesianVelocity>(() => new CartesianVelocity());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CartesianVelocity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmVelocityCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CartesianVelocity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CartesianVelocity(CartesianVelocity other) : this() {
          frameName_ = other.frameName_;
          velocityInFrameName_ = other.velocityInFrameName_ != null ? other.velocityInFrameName_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CartesianVelocity Clone() {
          return new CartesianVelocity(this);
        }

        /// <summary>Field number for the "frame_name" field.</summary>
        public const int FrameNameFieldNumber = 1;
        private string frameName_ = "";
        /// <summary>
        /// The frame to express our velocities in
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FrameName {
          get { return frameName_; }
          set {
            frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "velocity_in_frame_name" field.</summary>
        public const int VelocityInFrameNameFieldNumber = 2;
        private global::Bosdyn.Api.Vec3 velocityInFrameName_;
        /// <summary>
        /// The x-y-z velocity of the hand (m/s) with respect to the frame
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 VelocityInFrameName {
          get { return velocityInFrameName_; }
          set {
            velocityInFrameName_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CartesianVelocity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CartesianVelocity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrameName != other.FrameName) return false;
          if (!object.Equals(VelocityInFrameName, other.VelocityInFrameName)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
          if (velocityInFrameName_ != null) hash ^= VelocityInFrameName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrameName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FrameName);
          }
          if (velocityInFrameName_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(VelocityInFrameName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
          }
          if (velocityInFrameName_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityInFrameName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CartesianVelocity other) {
          if (other == null) {
            return;
          }
          if (other.FrameName.Length != 0) {
            FrameName = other.FrameName;
          }
          if (other.velocityInFrameName_ != null) {
            if (velocityInFrameName_ == null) {
              VelocityInFrameName = new global::Bosdyn.Api.Vec3();
            }
            VelocityInFrameName.MergeFrom(other.VelocityInFrameName);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FrameName = input.ReadString();
                break;
              }
              case 18: {
                if (velocityInFrameName_ == null) {
                  VelocityInFrameName = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(VelocityInFrameName);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmVelocityCommand.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          angularVelocityOfHandRtOdomInHand_ = other.angularVelocityOfHandRtOdomInHand_ != null ? other.angularVelocityOfHandRtOdomInHand_.Clone() : null;
          MaximumAcceleration = other.MaximumAcceleration;
          endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
          switch (other.CommandCase) {
            case CommandOneofCase.CylindricalVelocity:
              CylindricalVelocity = other.CylindricalVelocity.Clone();
              break;
            case CommandOneofCase.CartesianVelocity:
              CartesianVelocity = other.CartesianVelocity.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "cylindrical_velocity" field.</summary>
        public const int CylindricalVelocityFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity CylindricalVelocity {
          get { return commandCase_ == CommandOneofCase.CylindricalVelocity ? (global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CylindricalVelocity;
          }
        }

        /// <summary>Field number for the "cartesian_velocity" field.</summary>
        public const int CartesianVelocityFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity CartesianVelocity {
          get { return commandCase_ == CommandOneofCase.CartesianVelocity ? (global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CartesianVelocity;
          }
        }

        /// <summary>Field number for the "angular_velocity_of_hand_rt_odom_in_hand" field.</summary>
        public const int AngularVelocityOfHandRtOdomInHandFieldNumber = 6;
        private global::Bosdyn.Api.Vec3 angularVelocityOfHandRtOdomInHand_;
        /// <summary>
        /// The angular velocity of the hand frame measured with respect to the odom frame, expressed
        /// in the hand frame. A 'X' rate will cause the hand to rotate about its x-axis, e.g. the
        /// final wrist twist joint will rotate. And similarly, 'Y' and 'Z' rates will cause the hand
        /// to rotate about its y and z axis respectively. \
        /// The units should be rad/sec.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 AngularVelocityOfHandRtOdomInHand {
          get { return angularVelocityOfHandRtOdomInHand_; }
          set {
            angularVelocityOfHandRtOdomInHand_ = value;
          }
        }

        /// <summary>Field number for the "maximum_acceleration" field.</summary>
        public const int MaximumAccelerationFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_maximumAcceleration_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? maximumAcceleration_;
        /// <summary>
        /// Optional maximum acceleration magnitude of the end-effector. (m/s^2)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumAcceleration {
          get { return maximumAcceleration_; }
          set {
            maximumAcceleration_ = value;
          }
        }


        /// <summary>Field number for the "end_time" field.</summary>
        public const int EndTimeFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
        /// <summary>
        /// The timestamp (in robot time) by which a command must finish executing.
        /// This is a required field and used to prevent runaway commands.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          CylindricalVelocity = 1,
          CartesianVelocity = 2,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(CylindricalVelocity, other.CylindricalVelocity)) return false;
          if (!object.Equals(CartesianVelocity, other.CartesianVelocity)) return false;
          if (!object.Equals(AngularVelocityOfHandRtOdomInHand, other.AngularVelocityOfHandRtOdomInHand)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumAcceleration, other.MaximumAcceleration)) return false;
          if (!object.Equals(EndTime, other.EndTime)) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.CylindricalVelocity) hash ^= CylindricalVelocity.GetHashCode();
          if (commandCase_ == CommandOneofCase.CartesianVelocity) hash ^= CartesianVelocity.GetHashCode();
          if (angularVelocityOfHandRtOdomInHand_ != null) hash ^= AngularVelocityOfHandRtOdomInHand.GetHashCode();
          if (maximumAcceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumAcceleration);
          if (endTime_ != null) hash ^= EndTime.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.CylindricalVelocity) {
            output.WriteRawTag(10);
            output.WriteMessage(CylindricalVelocity);
          }
          if (commandCase_ == CommandOneofCase.CartesianVelocity) {
            output.WriteRawTag(18);
            output.WriteMessage(CartesianVelocity);
          }
          if (maximumAcceleration_ != null) {
            _single_maximumAcceleration_codec.WriteTagAndValue(output, MaximumAcceleration);
          }
          if (endTime_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(EndTime);
          }
          if (angularVelocityOfHandRtOdomInHand_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(AngularVelocityOfHandRtOdomInHand);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.CylindricalVelocity) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CylindricalVelocity);
          }
          if (commandCase_ == CommandOneofCase.CartesianVelocity) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CartesianVelocity);
          }
          if (angularVelocityOfHandRtOdomInHand_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocityOfHandRtOdomInHand);
          }
          if (maximumAcceleration_ != null) {
            size += _single_maximumAcceleration_codec.CalculateSizeWithTag(MaximumAcceleration);
          }
          if (endTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.angularVelocityOfHandRtOdomInHand_ != null) {
            if (angularVelocityOfHandRtOdomInHand_ == null) {
              AngularVelocityOfHandRtOdomInHand = new global::Bosdyn.Api.Vec3();
            }
            AngularVelocityOfHandRtOdomInHand.MergeFrom(other.AngularVelocityOfHandRtOdomInHand);
          }
          if (other.maximumAcceleration_ != null) {
            if (maximumAcceleration_ == null || other.MaximumAcceleration != 0D) {
              MaximumAcceleration = other.MaximumAcceleration;
            }
          }
          if (other.endTime_ != null) {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            EndTime.MergeFrom(other.EndTime);
          }
          switch (other.CommandCase) {
            case CommandOneofCase.CylindricalVelocity:
              if (CylindricalVelocity == null) {
                CylindricalVelocity = new global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity();
              }
              CylindricalVelocity.MergeFrom(other.CylindricalVelocity);
              break;
            case CommandOneofCase.CartesianVelocity:
              if (CartesianVelocity == null) {
                CartesianVelocity = new global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity();
              }
              CartesianVelocity.MergeFrom(other.CartesianVelocity);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity subBuilder = new global::Bosdyn.Api.ArmVelocityCommand.Types.CylindricalVelocity();
                if (commandCase_ == CommandOneofCase.CylindricalVelocity) {
                  subBuilder.MergeFrom(CylindricalVelocity);
                }
                input.ReadMessage(subBuilder);
                CylindricalVelocity = subBuilder;
                break;
              }
              case 18: {
                global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity subBuilder = new global::Bosdyn.Api.ArmVelocityCommand.Types.CartesianVelocity();
                if (commandCase_ == CommandOneofCase.CartesianVelocity) {
                  subBuilder.MergeFrom(CartesianVelocity);
                }
                input.ReadMessage(subBuilder);
                CartesianVelocity = subBuilder;
                break;
              }
              case 26: {
                double? value = _single_maximumAcceleration_codec.Read(input);
                if (maximumAcceleration_ == null || value != 0D) {
                  MaximumAcceleration = value;
                }
                break;
              }
              case 42: {
                if (endTime_ == null) {
                  EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(EndTime);
                break;
              }
              case 50: {
                if (angularVelocityOfHandRtOdomInHand_ == null) {
                  AngularVelocityOfHandRtOdomInHand = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(AngularVelocityOfHandRtOdomInHand);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// ArmVelocityCommand provides no feedback
      /// </summary>
      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmVelocityCommand.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Command the arm move to a predefined configuration.
  /// </summary>
  public sealed partial class NamedArmPositionsCommand : pb::IMessage<NamedArmPositionsCommand> {
    private static readonly pb::MessageParser<NamedArmPositionsCommand> _parser = new pb::MessageParser<NamedArmPositionsCommand>(() => new NamedArmPositionsCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NamedArmPositionsCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedArmPositionsCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedArmPositionsCommand(NamedArmPositionsCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NamedArmPositionsCommand Clone() {
      return new NamedArmPositionsCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NamedArmPositionsCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NamedArmPositionsCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NamedArmPositionsCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NamedArmPositionsCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Positions {
        /// <summary>
        /// Invalid request; do not use.
        /// </summary>
        [pbr::OriginalName("POSITIONS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The carry position is a damped, force limited position close to stow, with the hand
        /// slightly in front of the robot.
        /// </summary>
        [pbr::OriginalName("POSITIONS_CARRY")] Carry = 1,
        /// <summary>
        /// Move arm to ready position. The ready position is defined with the hand directly in
        /// front of and slightly above the body, with the hand facing forward in the robot body +X
        /// direction.
        /// </summary>
        [pbr::OriginalName("POSITIONS_READY")] Ready = 2,
        /// <summary>
        /// Stow the arm, safely. If the robot is holding something, it will freeze the arm instead
        /// of stowing.  Overriding the carry_state to CARRY_STATE_CARRIABLE_AND_STOWABLE, will allow
        /// the robot to stow the arm while grasping an item.
        /// </summary>
        [pbr::OriginalName("POSITIONS_STOW")] Stow = 3,
      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.NamedArmPositionsCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          position_ = other.position_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 1;
        private global::Bosdyn.Api.NamedArmPositionsCommand.Types.Positions position_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.NamedArmPositionsCommand.Types.Positions Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Position != other.Position) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Position != 0) hash ^= Position.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Position != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Position);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.Position != 0) {
            Position = other.Position;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Position = (global::Bosdyn.Api.NamedArmPositionsCommand.Types.Positions) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.NamedArmPositionsCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.NamedArmPositionsCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// The arm is at the desired configuration.
            /// </summary>
            [pbr::OriginalName("STATUS_COMPLETE")] Complete = 1,
            /// <summary>
            /// Robot is re-configuring arm to get to desired configuration.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 2,
            /// <summary>
            /// Some positions may refuse to execute if the gripper is holding an item, for example
            /// stow.
            /// </summary>
            [pbr::OriginalName("STATUS_STALLED_HOLDING_ITEM")] StalledHoldingItem = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Command the end effector of the arm.  Each axis in the task frame is allowed to be set to
  /// position mode (default) or Force mode.  If the axis is set to position, the desired value is read
  /// from the pose_trajectory_in_task. If the axis is set to force, the desired value is read from
  /// the rench_trajectory. This supports hybrid control of the arm where users can specify, for
  /// example, Z to be in force control with X and Y in position control.
  /// </summary>
  public sealed partial class ArmCartesianCommand : pb::IMessage<ArmCartesianCommand> {
    private static readonly pb::MessageParser<ArmCartesianCommand> _parser = new pb::MessageParser<ArmCartesianCommand>(() => new ArmCartesianCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmCartesianCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCartesianCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCartesianCommand(ArmCartesianCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmCartesianCommand Clone() {
      return new ArmCartesianCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmCartesianCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmCartesianCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmCartesianCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArmCartesianCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmCartesianCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          rootFrameName_ = other.rootFrameName_;
          wristTformTool_ = other.wristTformTool_ != null ? other.wristTformTool_.Clone() : null;
          rootTformTask_ = other.rootTformTask_ != null ? other.rootTformTask_.Clone() : null;
          poseTrajectoryInTask_ = other.poseTrajectoryInTask_ != null ? other.poseTrajectoryInTask_.Clone() : null;
          MaximumAcceleration = other.MaximumAcceleration;
          MaxLinearVelocity = other.MaxLinearVelocity;
          MaxAngularVelocity = other.MaxAngularVelocity;
          MaxPosTrackingError = other.MaxPosTrackingError;
          MaxRotTrackingError = other.MaxRotTrackingError;
          xAxis_ = other.xAxis_;
          yAxis_ = other.yAxis_;
          zAxis_ = other.zAxis_;
          rxAxis_ = other.rxAxis_;
          ryAxis_ = other.ryAxis_;
          rzAxis_ = other.rzAxis_;
          wrenchTrajectoryInTask_ = other.wrenchTrajectoryInTask_ != null ? other.wrenchTrajectoryInTask_.Clone() : null;
          switch (other.JointConfigurationCase) {
            case JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration:
              ForceRemainNearCurrentJointConfiguration = other.ForceRemainNearCurrentJointConfiguration;
              break;
            case JointConfigurationOneofCase.PreferredJointConfiguration:
              PreferredJointConfiguration = other.PreferredJointConfiguration.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "root_frame_name" field.</summary>
        public const int RootFrameNameFieldNumber = 19;
        private string rootFrameName_ = "";
        /// <summary>
        /// The root frame is used to set the optional task frame that all trajectories are
        /// specified with respect to.  If the optional task frame is left un-specified it defaults
        /// to the identity transform and the root frame becomes the task frame.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RootFrameName {
          get { return rootFrameName_; }
          set {
            rootFrameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wrist_tform_tool" field.</summary>
        public const int WristTformToolFieldNumber = 6;
        private global::Bosdyn.Api.SE3Pose wristTformTool_;
        /// <summary>
        /// The tool pose relative to the parent link (wrist).
        /// Defaults to
        ///    [0.19557 0 0]
        ///    [1 0 0 0]
        /// a frame with it's origin slightly in front of the gripper's palm plate aligned with
        /// wrist's orientation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose WristTformTool {
          get { return wristTformTool_; }
          set {
            wristTformTool_ = value;
          }
        }

        /// <summary>Field number for the "root_tform_task" field.</summary>
        public const int RootTformTaskFieldNumber = 20;
        private global::Bosdyn.Api.SE3Pose rootTformTask_;
        /// <summary>
        /// The fields below are specified in this optional task frame.  If unset it defaults
        /// to the identity transform and all quantities are therefore expressed in the
        /// root_frame_name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose RootTformTask {
          get { return rootTformTask_; }
          set {
            rootTformTask_ = value;
          }
        }

        /// <summary>Field number for the "pose_trajectory_in_task" field.</summary>
        public const int PoseTrajectoryInTaskFieldNumber = 2;
        private global::Bosdyn.Api.SE3Trajectory poseTrajectoryInTask_;
        /// <summary>
        /// A 3D pose trajectory for the tool expressed in the task frame, e.g. task_T_tool.
        /// This pose trajectory is optional if requesting a pure wrench at the end-effector,
        /// otherwise required for position or mixed force/position end-effector requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Trajectory PoseTrajectoryInTask {
          get { return poseTrajectoryInTask_; }
          set {
            poseTrajectoryInTask_ = value;
          }
        }

        /// <summary>Field number for the "maximum_acceleration" field.</summary>
        public const int MaximumAccelerationFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_maximumAcceleration_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? maximumAcceleration_;
        /// <summary>
        /// Optional Maximum acceleration magnitude of the end-effector.
        /// Valid ranges (0, 20]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumAcceleration {
          get { return maximumAcceleration_; }
          set {
            maximumAcceleration_ = value;
          }
        }


        /// <summary>Field number for the "max_linear_velocity" field.</summary>
        public const int MaxLinearVelocityFieldNumber = 4;
        private static readonly pb::FieldCodec<double?> _single_maxLinearVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(34);
        private double? maxLinearVelocity_;
        /// <summary>
        /// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxLinearVelocity {
          get { return maxLinearVelocity_; }
          set {
            maxLinearVelocity_ = value;
          }
        }


        /// <summary>Field number for the "max_angular_velocity" field.</summary>
        public const int MaxAngularVelocityFieldNumber = 5;
        private static readonly pb::FieldCodec<double?> _single_maxAngularVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(42);
        private double? maxAngularVelocity_;
        /// <summary>
        /// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxAngularVelocity {
          get { return maxAngularVelocity_; }
          set {
            maxAngularVelocity_ = value;
          }
        }


        /// <summary>Field number for the "max_pos_tracking_error" field.</summary>
        public const int MaxPosTrackingErrorFieldNumber = 15;
        private static readonly pb::FieldCodec<double?> _single_maxPosTrackingError_codec = pb::FieldCodec.ForStructWrapper<double>(122);
        private double? maxPosTrackingError_;
        /// <summary>
        /// Maximum allowable tracking error of the tool frame from the desired trajectory
        /// before the arm will stop moving and cancel the rest of the trajectory. When this limit is
        /// exceeded, the hand will stay at the pose it was at when it exceeded the tracking error,
        /// and any other part of the trajectory specified in the rest of this message will be
        /// ignored. max position tracking error in meters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxPosTrackingError {
          get { return maxPosTrackingError_; }
          set {
            maxPosTrackingError_ = value;
          }
        }


        /// <summary>Field number for the "max_rot_tracking_error" field.</summary>
        public const int MaxRotTrackingErrorFieldNumber = 16;
        private static readonly pb::FieldCodec<double?> _single_maxRotTrackingError_codec = pb::FieldCodec.ForStructWrapper<double>(130);
        private double? maxRotTrackingError_;
        /// <summary>
        /// max orientation tracking error in radians
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxRotTrackingError {
          get { return maxRotTrackingError_; }
          set {
            maxRotTrackingError_ = value;
          }
        }


        /// <summary>Field number for the "force_remain_near_current_joint_configuration" field.</summary>
        public const int ForceRemainNearCurrentJointConfigurationFieldNumber = 17;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ForceRemainNearCurrentJointConfiguration {
          get { return jointConfigurationCase_ == JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration ? (bool) jointConfiguration_ : false; }
          set {
            jointConfiguration_ = value;
            jointConfigurationCase_ = JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration;
          }
        }

        /// <summary>Field number for the "preferred_joint_configuration" field.</summary>
        public const int PreferredJointConfigurationFieldNumber = 18;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointPosition PreferredJointConfiguration {
          get { return jointConfigurationCase_ == JointConfigurationOneofCase.PreferredJointConfiguration ? (global::Bosdyn.Api.ArmJointPosition) jointConfiguration_ : null; }
          set {
            jointConfiguration_ = value;
            jointConfigurationCase_ = value == null ? JointConfigurationOneofCase.None : JointConfigurationOneofCase.PreferredJointConfiguration;
          }
        }

        /// <summary>Field number for the "x_axis" field.</summary>
        public const int XAxisFieldNumber = 8;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode xAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode XAxis {
          get { return xAxis_; }
          set {
            xAxis_ = value;
          }
        }

        /// <summary>Field number for the "y_axis" field.</summary>
        public const int YAxisFieldNumber = 9;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode yAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode YAxis {
          get { return yAxis_; }
          set {
            yAxis_ = value;
          }
        }

        /// <summary>Field number for the "z_axis" field.</summary>
        public const int ZAxisFieldNumber = 10;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode zAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode ZAxis {
          get { return zAxis_; }
          set {
            zAxis_ = value;
          }
        }

        /// <summary>Field number for the "rx_axis" field.</summary>
        public const int RxAxisFieldNumber = 11;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode rxAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode RxAxis {
          get { return rxAxis_; }
          set {
            rxAxis_ = value;
          }
        }

        /// <summary>Field number for the "ry_axis" field.</summary>
        public const int RyAxisFieldNumber = 12;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode ryAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode RyAxis {
          get { return ryAxis_; }
          set {
            ryAxis_ = value;
          }
        }

        /// <summary>Field number for the "rz_axis" field.</summary>
        public const int RzAxisFieldNumber = 13;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode rzAxis_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode RzAxis {
          get { return rzAxis_; }
          set {
            rzAxis_ = value;
          }
        }

        /// <summary>Field number for the "wrench_trajectory_in_task" field.</summary>
        public const int WrenchTrajectoryInTaskFieldNumber = 14;
        private global::Bosdyn.Api.WrenchTrajectory wrenchTrajectoryInTask_;
        /// <summary>
        /// A force/torque trajectory for the tool expressed in the task frame.
        /// This trajectory is optional if requesting a pure pose at the end-effector,
        /// otherwise required for force or mixed force/position end-effector requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.WrenchTrajectory WrenchTrajectoryInTask {
          get { return wrenchTrajectoryInTask_; }
          set {
            wrenchTrajectoryInTask_ = value;
          }
        }

        private object jointConfiguration_;
        /// <summary>Enum of possible cases for the "joint_configuration" oneof.</summary>
        public enum JointConfigurationOneofCase {
          None = 0,
          ForceRemainNearCurrentJointConfiguration = 17,
          PreferredJointConfiguration = 18,
        }
        private JointConfigurationOneofCase jointConfigurationCase_ = JointConfigurationOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JointConfigurationOneofCase JointConfigurationCase {
          get { return jointConfigurationCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearJointConfiguration() {
          jointConfigurationCase_ = JointConfigurationOneofCase.None;
          jointConfiguration_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RootFrameName != other.RootFrameName) return false;
          if (!object.Equals(WristTformTool, other.WristTformTool)) return false;
          if (!object.Equals(RootTformTask, other.RootTformTask)) return false;
          if (!object.Equals(PoseTrajectoryInTask, other.PoseTrajectoryInTask)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumAcceleration, other.MaximumAcceleration)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxLinearVelocity, other.MaxLinearVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxAngularVelocity, other.MaxAngularVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxPosTrackingError, other.MaxPosTrackingError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxRotTrackingError, other.MaxRotTrackingError)) return false;
          if (ForceRemainNearCurrentJointConfiguration != other.ForceRemainNearCurrentJointConfiguration) return false;
          if (!object.Equals(PreferredJointConfiguration, other.PreferredJointConfiguration)) return false;
          if (XAxis != other.XAxis) return false;
          if (YAxis != other.YAxis) return false;
          if (ZAxis != other.ZAxis) return false;
          if (RxAxis != other.RxAxis) return false;
          if (RyAxis != other.RyAxis) return false;
          if (RzAxis != other.RzAxis) return false;
          if (!object.Equals(WrenchTrajectoryInTask, other.WrenchTrajectoryInTask)) return false;
          if (JointConfigurationCase != other.JointConfigurationCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RootFrameName.Length != 0) hash ^= RootFrameName.GetHashCode();
          if (wristTformTool_ != null) hash ^= WristTformTool.GetHashCode();
          if (rootTformTask_ != null) hash ^= RootTformTask.GetHashCode();
          if (poseTrajectoryInTask_ != null) hash ^= PoseTrajectoryInTask.GetHashCode();
          if (maximumAcceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumAcceleration);
          if (maxLinearVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxLinearVelocity);
          if (maxAngularVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxAngularVelocity);
          if (maxPosTrackingError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxPosTrackingError);
          if (maxRotTrackingError_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxRotTrackingError);
          if (jointConfigurationCase_ == JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration) hash ^= ForceRemainNearCurrentJointConfiguration.GetHashCode();
          if (jointConfigurationCase_ == JointConfigurationOneofCase.PreferredJointConfiguration) hash ^= PreferredJointConfiguration.GetHashCode();
          if (XAxis != 0) hash ^= XAxis.GetHashCode();
          if (YAxis != 0) hash ^= YAxis.GetHashCode();
          if (ZAxis != 0) hash ^= ZAxis.GetHashCode();
          if (RxAxis != 0) hash ^= RxAxis.GetHashCode();
          if (RyAxis != 0) hash ^= RyAxis.GetHashCode();
          if (RzAxis != 0) hash ^= RzAxis.GetHashCode();
          if (wrenchTrajectoryInTask_ != null) hash ^= WrenchTrajectoryInTask.GetHashCode();
          hash ^= (int) jointConfigurationCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (poseTrajectoryInTask_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PoseTrajectoryInTask);
          }
          if (maximumAcceleration_ != null) {
            _single_maximumAcceleration_codec.WriteTagAndValue(output, MaximumAcceleration);
          }
          if (maxLinearVelocity_ != null) {
            _single_maxLinearVelocity_codec.WriteTagAndValue(output, MaxLinearVelocity);
          }
          if (maxAngularVelocity_ != null) {
            _single_maxAngularVelocity_codec.WriteTagAndValue(output, MaxAngularVelocity);
          }
          if (wristTformTool_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(WristTformTool);
          }
          if (XAxis != 0) {
            output.WriteRawTag(64);
            output.WriteEnum((int) XAxis);
          }
          if (YAxis != 0) {
            output.WriteRawTag(72);
            output.WriteEnum((int) YAxis);
          }
          if (ZAxis != 0) {
            output.WriteRawTag(80);
            output.WriteEnum((int) ZAxis);
          }
          if (RxAxis != 0) {
            output.WriteRawTag(88);
            output.WriteEnum((int) RxAxis);
          }
          if (RyAxis != 0) {
            output.WriteRawTag(96);
            output.WriteEnum((int) RyAxis);
          }
          if (RzAxis != 0) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RzAxis);
          }
          if (wrenchTrajectoryInTask_ != null) {
            output.WriteRawTag(114);
            output.WriteMessage(WrenchTrajectoryInTask);
          }
          if (maxPosTrackingError_ != null) {
            _single_maxPosTrackingError_codec.WriteTagAndValue(output, MaxPosTrackingError);
          }
          if (maxRotTrackingError_ != null) {
            _single_maxRotTrackingError_codec.WriteTagAndValue(output, MaxRotTrackingError);
          }
          if (jointConfigurationCase_ == JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration) {
            output.WriteRawTag(136, 1);
            output.WriteBool(ForceRemainNearCurrentJointConfiguration);
          }
          if (jointConfigurationCase_ == JointConfigurationOneofCase.PreferredJointConfiguration) {
            output.WriteRawTag(146, 1);
            output.WriteMessage(PreferredJointConfiguration);
          }
          if (RootFrameName.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(RootFrameName);
          }
          if (rootTformTask_ != null) {
            output.WriteRawTag(162, 1);
            output.WriteMessage(RootTformTask);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RootFrameName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(RootFrameName);
          }
          if (wristTformTool_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WristTformTool);
          }
          if (rootTformTask_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(RootTformTask);
          }
          if (poseTrajectoryInTask_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PoseTrajectoryInTask);
          }
          if (maximumAcceleration_ != null) {
            size += _single_maximumAcceleration_codec.CalculateSizeWithTag(MaximumAcceleration);
          }
          if (maxLinearVelocity_ != null) {
            size += _single_maxLinearVelocity_codec.CalculateSizeWithTag(MaxLinearVelocity);
          }
          if (maxAngularVelocity_ != null) {
            size += _single_maxAngularVelocity_codec.CalculateSizeWithTag(MaxAngularVelocity);
          }
          if (maxPosTrackingError_ != null) {
            size += _single_maxPosTrackingError_codec.CalculateSizeWithTag(MaxPosTrackingError);
          }
          if (maxRotTrackingError_ != null) {
            size += _single_maxRotTrackingError_codec.CalculateSizeWithTag(MaxRotTrackingError);
          }
          if (jointConfigurationCase_ == JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration) {
            size += 2 + 1;
          }
          if (jointConfigurationCase_ == JointConfigurationOneofCase.PreferredJointConfiguration) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(PreferredJointConfiguration);
          }
          if (XAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) XAxis);
          }
          if (YAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YAxis);
          }
          if (ZAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ZAxis);
          }
          if (RxAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RxAxis);
          }
          if (RyAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RyAxis);
          }
          if (RzAxis != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RzAxis);
          }
          if (wrenchTrajectoryInTask_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WrenchTrajectoryInTask);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.RootFrameName.Length != 0) {
            RootFrameName = other.RootFrameName;
          }
          if (other.wristTformTool_ != null) {
            if (wristTformTool_ == null) {
              WristTformTool = new global::Bosdyn.Api.SE3Pose();
            }
            WristTformTool.MergeFrom(other.WristTformTool);
          }
          if (other.rootTformTask_ != null) {
            if (rootTformTask_ == null) {
              RootTformTask = new global::Bosdyn.Api.SE3Pose();
            }
            RootTformTask.MergeFrom(other.RootTformTask);
          }
          if (other.poseTrajectoryInTask_ != null) {
            if (poseTrajectoryInTask_ == null) {
              PoseTrajectoryInTask = new global::Bosdyn.Api.SE3Trajectory();
            }
            PoseTrajectoryInTask.MergeFrom(other.PoseTrajectoryInTask);
          }
          if (other.maximumAcceleration_ != null) {
            if (maximumAcceleration_ == null || other.MaximumAcceleration != 0D) {
              MaximumAcceleration = other.MaximumAcceleration;
            }
          }
          if (other.maxLinearVelocity_ != null) {
            if (maxLinearVelocity_ == null || other.MaxLinearVelocity != 0D) {
              MaxLinearVelocity = other.MaxLinearVelocity;
            }
          }
          if (other.maxAngularVelocity_ != null) {
            if (maxAngularVelocity_ == null || other.MaxAngularVelocity != 0D) {
              MaxAngularVelocity = other.MaxAngularVelocity;
            }
          }
          if (other.maxPosTrackingError_ != null) {
            if (maxPosTrackingError_ == null || other.MaxPosTrackingError != 0D) {
              MaxPosTrackingError = other.MaxPosTrackingError;
            }
          }
          if (other.maxRotTrackingError_ != null) {
            if (maxRotTrackingError_ == null || other.MaxRotTrackingError != 0D) {
              MaxRotTrackingError = other.MaxRotTrackingError;
            }
          }
          if (other.XAxis != 0) {
            XAxis = other.XAxis;
          }
          if (other.YAxis != 0) {
            YAxis = other.YAxis;
          }
          if (other.ZAxis != 0) {
            ZAxis = other.ZAxis;
          }
          if (other.RxAxis != 0) {
            RxAxis = other.RxAxis;
          }
          if (other.RyAxis != 0) {
            RyAxis = other.RyAxis;
          }
          if (other.RzAxis != 0) {
            RzAxis = other.RzAxis;
          }
          if (other.wrenchTrajectoryInTask_ != null) {
            if (wrenchTrajectoryInTask_ == null) {
              WrenchTrajectoryInTask = new global::Bosdyn.Api.WrenchTrajectory();
            }
            WrenchTrajectoryInTask.MergeFrom(other.WrenchTrajectoryInTask);
          }
          switch (other.JointConfigurationCase) {
            case JointConfigurationOneofCase.ForceRemainNearCurrentJointConfiguration:
              ForceRemainNearCurrentJointConfiguration = other.ForceRemainNearCurrentJointConfiguration;
              break;
            case JointConfigurationOneofCase.PreferredJointConfiguration:
              if (PreferredJointConfiguration == null) {
                PreferredJointConfiguration = new global::Bosdyn.Api.ArmJointPosition();
              }
              PreferredJointConfiguration.MergeFrom(other.PreferredJointConfiguration);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                if (poseTrajectoryInTask_ == null) {
                  PoseTrajectoryInTask = new global::Bosdyn.Api.SE3Trajectory();
                }
                input.ReadMessage(PoseTrajectoryInTask);
                break;
              }
              case 26: {
                double? value = _single_maximumAcceleration_codec.Read(input);
                if (maximumAcceleration_ == null || value != 0D) {
                  MaximumAcceleration = value;
                }
                break;
              }
              case 34: {
                double? value = _single_maxLinearVelocity_codec.Read(input);
                if (maxLinearVelocity_ == null || value != 0D) {
                  MaxLinearVelocity = value;
                }
                break;
              }
              case 42: {
                double? value = _single_maxAngularVelocity_codec.Read(input);
                if (maxAngularVelocity_ == null || value != 0D) {
                  MaxAngularVelocity = value;
                }
                break;
              }
              case 50: {
                if (wristTformTool_ == null) {
                  WristTformTool = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(WristTformTool);
                break;
              }
              case 64: {
                XAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 72: {
                YAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 80: {
                ZAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 88: {
                RxAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 96: {
                RyAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 104: {
                RzAxis = (global::Bosdyn.Api.ArmCartesianCommand.Types.Request.Types.AxisMode) input.ReadEnum();
                break;
              }
              case 114: {
                if (wrenchTrajectoryInTask_ == null) {
                  WrenchTrajectoryInTask = new global::Bosdyn.Api.WrenchTrajectory();
                }
                input.ReadMessage(WrenchTrajectoryInTask);
                break;
              }
              case 122: {
                double? value = _single_maxPosTrackingError_codec.Read(input);
                if (maxPosTrackingError_ == null || value != 0D) {
                  MaxPosTrackingError = value;
                }
                break;
              }
              case 130: {
                double? value = _single_maxRotTrackingError_codec.Read(input);
                if (maxRotTrackingError_ == null || value != 0D) {
                  MaxRotTrackingError = value;
                }
                break;
              }
              case 136: {
                ForceRemainNearCurrentJointConfiguration = input.ReadBool();
                break;
              }
              case 146: {
                global::Bosdyn.Api.ArmJointPosition subBuilder = new global::Bosdyn.Api.ArmJointPosition();
                if (jointConfigurationCase_ == JointConfigurationOneofCase.PreferredJointConfiguration) {
                  subBuilder.MergeFrom(PreferredJointConfiguration);
                }
                input.ReadMessage(subBuilder);
                PreferredJointConfiguration = subBuilder;
                break;
              }
              case 154: {
                RootFrameName = input.ReadString();
                break;
              }
              case 162: {
                if (rootTformTask_ == null) {
                  RootTformTask = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(RootTformTask);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Request message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// If an axis is set to position mode (default), read desired from SE3Trajectory trajectory
          /// command.  If mode is set to Force, read desired from WrenchTrajectory wrench_trajectory
          /// command.  This supports hybrid control of the arm where users can specify, for example, Z
          /// to be in force control with X and Y in position control.  The elements are expressed in
          /// the same task_frame as the trajectories.
          /// </summary>
          public enum AxisMode {
            [pbr::OriginalName("AXIS_MODE_POSITION")] Position = 0,
            [pbr::OriginalName("AXIS_MODE_FORCE")] Force = 1,
          }

        }
        #endregion

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmCartesianCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          measuredPosTrackingError_ = other.measuredPosTrackingError_;
          measuredRotTrackingError_ = other.measuredRotTrackingError_;
          measuredPosDistanceToGoal_ = other.measuredPosDistanceToGoal_;
          measuredRotDistanceToGoal_ = other.measuredRotDistanceToGoal_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the pose trajectory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "measured_pos_tracking_error" field.</summary>
        public const int MeasuredPosTrackingErrorFieldNumber = 2;
        private double measuredPosTrackingError_;
        /// <summary>
        /// Current linear tracking error of the tool frame [meters].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MeasuredPosTrackingError {
          get { return measuredPosTrackingError_; }
          set {
            measuredPosTrackingError_ = value;
          }
        }

        /// <summary>Field number for the "measured_rot_tracking_error" field.</summary>
        public const int MeasuredRotTrackingErrorFieldNumber = 3;
        private double measuredRotTrackingError_;
        /// <summary>
        /// Current rotational tracking error of the tool frame [radians].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MeasuredRotTrackingError {
          get { return measuredRotTrackingError_; }
          set {
            measuredRotTrackingError_ = value;
          }
        }

        /// <summary>Field number for the "measured_pos_distance_to_goal" field.</summary>
        public const int MeasuredPosDistanceToGoalFieldNumber = 4;
        private double measuredPosDistanceToGoal_;
        /// <summary>
        /// Linear distance from the tool to the tool trajectory's end point [meters].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MeasuredPosDistanceToGoal {
          get { return measuredPosDistanceToGoal_; }
          set {
            measuredPosDistanceToGoal_ = value;
          }
        }

        /// <summary>Field number for the "measured_rot_distance_to_goal" field.</summary>
        public const int MeasuredRotDistanceToGoalFieldNumber = 5;
        private double measuredRotDistanceToGoal_;
        /// <summary>
        /// Rotational distance from the tool to the trajectory's end point [radians].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MeasuredRotDistanceToGoal {
          get { return measuredRotDistanceToGoal_; }
          set {
            measuredRotDistanceToGoal_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeasuredPosTrackingError, other.MeasuredPosTrackingError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeasuredRotTrackingError, other.MeasuredRotTrackingError)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeasuredPosDistanceToGoal, other.MeasuredPosDistanceToGoal)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MeasuredRotDistanceToGoal, other.MeasuredRotDistanceToGoal)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (MeasuredPosTrackingError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeasuredPosTrackingError);
          if (MeasuredRotTrackingError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeasuredRotTrackingError);
          if (MeasuredPosDistanceToGoal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeasuredPosDistanceToGoal);
          if (MeasuredRotDistanceToGoal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MeasuredRotDistanceToGoal);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (MeasuredPosTrackingError != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(MeasuredPosTrackingError);
          }
          if (MeasuredRotTrackingError != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MeasuredRotTrackingError);
          }
          if (MeasuredPosDistanceToGoal != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(MeasuredPosDistanceToGoal);
          }
          if (MeasuredRotDistanceToGoal != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(MeasuredRotDistanceToGoal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (MeasuredPosTrackingError != 0D) {
            size += 1 + 8;
          }
          if (MeasuredRotTrackingError != 0D) {
            size += 1 + 8;
          }
          if (MeasuredPosDistanceToGoal != 0D) {
            size += 1 + 8;
          }
          if (MeasuredRotDistanceToGoal != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.MeasuredPosTrackingError != 0D) {
            MeasuredPosTrackingError = other.MeasuredPosTrackingError;
          }
          if (other.MeasuredRotTrackingError != 0D) {
            MeasuredRotTrackingError = other.MeasuredRotTrackingError;
          }
          if (other.MeasuredPosDistanceToGoal != 0D) {
            MeasuredPosDistanceToGoal = other.MeasuredPosDistanceToGoal;
          }
          if (other.MeasuredRotDistanceToGoal != 0D) {
            MeasuredRotDistanceToGoal = other.MeasuredRotDistanceToGoal;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.ArmCartesianCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
              case 17: {
                MeasuredPosTrackingError = input.ReadDouble();
                break;
              }
              case 25: {
                MeasuredRotTrackingError = input.ReadDouble();
                break;
              }
              case 33: {
                MeasuredPosDistanceToGoal = input.ReadDouble();
                break;
              }
              case 41: {
                MeasuredRotDistanceToGoal = input.ReadDouble();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Tool frame has reached the end of the trajectory within tracking error bounds.
            /// </summary>
            [pbr::OriginalName("STATUS_TRAJECTORY_COMPLETE")] TrajectoryComplete = 1,
            /// <summary>
            /// Robot is attempting to reach the target.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 2,
            /// <summary>
            /// Tool frame exceeded maximum allowable tracking error from the desired trajectory.
            /// </summary>
            [pbr::OriginalName("STATUS_TRAJECTORY_CANCELLED")] TrajectoryCancelled = 3,
            /// <summary>
            /// The arm has stopped making progress to the goal.  Note, this does not cancel the
            /// trajectory. For example, if the requested goal is too far away, walking the base
            /// robot closer to the goal will cause the arm to continue along the trajectory once the
            /// goal point is inside the workspace.
            /// </summary>
            [pbr::OriginalName("STATUS_TRAJECTORY_STALLED")] TrajectoryStalled = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Specify a set of joint angles to move the arm.
  /// </summary>
  public sealed partial class ArmJointMoveCommand : pb::IMessage<ArmJointMoveCommand> {
    private static readonly pb::MessageParser<ArmJointMoveCommand> _parser = new pb::MessageParser<ArmJointMoveCommand>(() => new ArmJointMoveCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmJointMoveCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointMoveCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointMoveCommand(ArmJointMoveCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointMoveCommand Clone() {
      return new ArmJointMoveCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmJointMoveCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmJointMoveCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmJointMoveCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArmJointMoveCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmJointMoveCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          trajectory_ = other.trajectory_ != null ? other.trajectory_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "trajectory" field.</summary>
        public const int TrajectoryFieldNumber = 1;
        private global::Bosdyn.Api.ArmJointTrajectory trajectory_;
        /// <summary>
        /// Note: Sending a single point empty trajectory will cause the arm to freeze in place. This
        /// is an easy way to lock the arm in its current configuration.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointTrajectory Trajectory {
          get { return trajectory_; }
          set {
            trajectory_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Trajectory, other.Trajectory)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (trajectory_ != null) hash ^= Trajectory.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (trajectory_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Trajectory);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (trajectory_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectory);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.trajectory_ != null) {
            if (trajectory_ == null) {
              Trajectory = new global::Bosdyn.Api.ArmJointTrajectory();
            }
            Trajectory.MergeFrom(other.Trajectory);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (trajectory_ == null) {
                  Trajectory = new global::Bosdyn.Api.ArmJointTrajectory();
                }
                input.ReadMessage(Trajectory);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmJointMoveCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          plannerStatus_ = other.plannerStatus_;
          plannedPoints_ = other.plannedPoints_.Clone();
          timeToGoal_ = other.timeToGoal_ != null ? other.timeToGoal_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "planner_status" field.</summary>
        public const int PlannerStatusFieldNumber = 2;
        private global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.PlannerStatus plannerStatus_ = 0;
        /// <summary>
        /// Current status of the trajectory planner.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.PlannerStatus PlannerStatus {
          get { return plannerStatus_; }
          set {
            plannerStatus_ = value;
          }
        }

        /// <summary>Field number for the "planned_points" field.</summary>
        public const int PlannedPointsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Bosdyn.Api.ArmJointTrajectoryPoint> _repeated_plannedPoints_codec
            = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.ArmJointTrajectoryPoint.Parser);
        private readonly pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint> plannedPoints_ = new pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint>();
        /// <summary>
        /// Based on the user trajectory, the planned knot points that obey acceleration and 
        /// velocity constraints. If these knot points don't match the requested knot points, 
        /// consider increasing velocity/acceleration limits, and/or staying further away from 
        /// joint position limits. In situations where we've modified you last point, we append
        /// a minimum time trajectory (that obeys the velocity and acceleration limits) from the
        /// planner's final point to the requested final point. This means that the length of
        /// planned_points may be one point larger than the requested.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint> PlannedPoints {
          get { return plannedPoints_; }
        }

        /// <summary>Field number for the "time_to_goal" field.</summary>
        public const int TimeToGoalFieldNumber = 4;
        private global::Google.Protobuf.WellKnownTypes.Duration timeToGoal_;
        /// <summary>
        /// Returns amount of time remaining until the joints are at the goal position.  For
        /// multiple point trajectories, this is the time remaining to the final point.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration TimeToGoal {
          get { return timeToGoal_; }
          set {
            timeToGoal_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          if (PlannerStatus != other.PlannerStatus) return false;
          if(!plannedPoints_.Equals(other.plannedPoints_)) return false;
          if (!object.Equals(TimeToGoal, other.TimeToGoal)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (PlannerStatus != 0) hash ^= PlannerStatus.GetHashCode();
          hash ^= plannedPoints_.GetHashCode();
          if (timeToGoal_ != null) hash ^= TimeToGoal.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (PlannerStatus != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) PlannerStatus);
          }
          plannedPoints_.WriteTo(output, _repeated_plannedPoints_codec);
          if (timeToGoal_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(TimeToGoal);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (PlannerStatus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlannerStatus);
          }
          size += plannedPoints_.CalculateSize(_repeated_plannedPoints_codec);
          if (timeToGoal_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToGoal);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.PlannerStatus != 0) {
            PlannerStatus = other.PlannerStatus;
          }
          plannedPoints_.Add(other.plannedPoints_);
          if (other.timeToGoal_ != null) {
            if (timeToGoal_ == null) {
              TimeToGoal = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            TimeToGoal.MergeFrom(other.TimeToGoal);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
              case 16: {
                PlannerStatus = (global::Bosdyn.Api.ArmJointMoveCommand.Types.Feedback.Types.PlannerStatus) input.ReadEnum();
                break;
              }
              case 26: {
                plannedPoints_.AddEntriesFrom(input, _repeated_plannedPoints_codec);
                break;
              }
              case 34: {
                if (timeToGoal_ == null) {
                  TimeToGoal = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(TimeToGoal);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// The arm is at the desired configuration.
            /// </summary>
            [pbr::OriginalName("STATUS_COMPLETE")] Complete = 1,
            /// <summary>
            /// Robot is re-configuring arm to get to desired configuration.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 2,
          }

          public enum PlannerStatus {
            /// <summary>
            /// PLANNER_STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("PLANNER_STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// A solution passing through the desired points and obeying the constraints was found.
            /// </summary>
            [pbr::OriginalName("PLANNER_STATUS_SUCCESS")] Success = 1,
            /// <summary>
            /// The planner had to modify the desired points in order to obey the constraints.  For
            /// example, if you specify a 1 point trajectory, and tell it to get there in a really short
            /// amount of time, but haven't set a high allowable max velocity / acceleration, the planner
            /// will do its best to get as close as possible to the final point, but won't reach it. In
            /// situations where we've modified you last point, we append a minimum time trajectory (that
            /// obeys the velocity and acceleration limits) from the planner's final point to the requested
            /// final point.
            /// </summary>
            [pbr::OriginalName("PLANNER_STATUS_MODIFIED")] Modified = 2,
            /// <summary>
            /// Failed to compute a valid trajectory, will go to first point instead. It is possible
            /// that our optimizer till fail to solve the problem instead of returning a sub-optimal
            /// solution.  This is un-likely to occur.
            /// </summary>
            [pbr::OriginalName("PLANNER_STATUS_FAILED")] Failed = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Position of our 6 arm joints in radians. If a joint angle is not specified,
  /// we will use the joint position at time the message is received on robot.
  /// </summary>
  public sealed partial class ArmJointPosition : pb::IMessage<ArmJointPosition> {
    private static readonly pb::MessageParser<ArmJointPosition> _parser = new pb::MessageParser<ArmJointPosition>(() => new ArmJointPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmJointPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointPosition(ArmJointPosition other) : this() {
      Sh0 = other.Sh0;
      Sh1 = other.Sh1;
      El0 = other.El0;
      El1 = other.El1;
      Wr0 = other.Wr0;
      Wr1 = other.Wr1;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointPosition Clone() {
      return new ArmJointPosition(this);
    }

    /// <summary>Field number for the "sh0" field.</summary>
    public const int Sh0FieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_sh0_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? sh0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Sh0 {
      get { return sh0_; }
      set {
        sh0_ = value;
      }
    }


    /// <summary>Field number for the "sh1" field.</summary>
    public const int Sh1FieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_sh1_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? sh1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Sh1 {
      get { return sh1_; }
      set {
        sh1_ = value;
      }
    }


    /// <summary>Field number for the "el0" field.</summary>
    public const int El0FieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_el0_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? el0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? El0 {
      get { return el0_; }
      set {
        el0_ = value;
      }
    }


    /// <summary>Field number for the "el1" field.</summary>
    public const int El1FieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_el1_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? el1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? El1 {
      get { return el1_; }
      set {
        el1_ = value;
      }
    }


    /// <summary>Field number for the "wr0" field.</summary>
    public const int Wr0FieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_wr0_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? wr0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Wr0 {
      get { return wr0_; }
      set {
        wr0_ = value;
      }
    }


    /// <summary>Field number for the "wr1" field.</summary>
    public const int Wr1FieldNumber = 6;
    private static readonly pb::FieldCodec<double?> _single_wr1_codec = pb::FieldCodec.ForStructWrapper<double>(50);
    private double? wr1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Wr1 {
      get { return wr1_; }
      set {
        wr1_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmJointPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmJointPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sh0, other.Sh0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sh1, other.Sh1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(El0, other.El0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(El1, other.El1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Wr0, other.Wr0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Wr1, other.Wr1)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sh0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sh0);
      if (sh1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sh1);
      if (el0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(El0);
      if (el1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(El1);
      if (wr0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Wr0);
      if (wr1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Wr1);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sh0_ != null) {
        _single_sh0_codec.WriteTagAndValue(output, Sh0);
      }
      if (sh1_ != null) {
        _single_sh1_codec.WriteTagAndValue(output, Sh1);
      }
      if (el0_ != null) {
        _single_el0_codec.WriteTagAndValue(output, El0);
      }
      if (el1_ != null) {
        _single_el1_codec.WriteTagAndValue(output, El1);
      }
      if (wr0_ != null) {
        _single_wr0_codec.WriteTagAndValue(output, Wr0);
      }
      if (wr1_ != null) {
        _single_wr1_codec.WriteTagAndValue(output, Wr1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sh0_ != null) {
        size += _single_sh0_codec.CalculateSizeWithTag(Sh0);
      }
      if (sh1_ != null) {
        size += _single_sh1_codec.CalculateSizeWithTag(Sh1);
      }
      if (el0_ != null) {
        size += _single_el0_codec.CalculateSizeWithTag(El0);
      }
      if (el1_ != null) {
        size += _single_el1_codec.CalculateSizeWithTag(El1);
      }
      if (wr0_ != null) {
        size += _single_wr0_codec.CalculateSizeWithTag(Wr0);
      }
      if (wr1_ != null) {
        size += _single_wr1_codec.CalculateSizeWithTag(Wr1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmJointPosition other) {
      if (other == null) {
        return;
      }
      if (other.sh0_ != null) {
        if (sh0_ == null || other.Sh0 != 0D) {
          Sh0 = other.Sh0;
        }
      }
      if (other.sh1_ != null) {
        if (sh1_ == null || other.Sh1 != 0D) {
          Sh1 = other.Sh1;
        }
      }
      if (other.el0_ != null) {
        if (el0_ == null || other.El0 != 0D) {
          El0 = other.El0;
        }
      }
      if (other.el1_ != null) {
        if (el1_ == null || other.El1 != 0D) {
          El1 = other.El1;
        }
      }
      if (other.wr0_ != null) {
        if (wr0_ == null || other.Wr0 != 0D) {
          Wr0 = other.Wr0;
        }
      }
      if (other.wr1_ != null) {
        if (wr1_ == null || other.Wr1 != 0D) {
          Wr1 = other.Wr1;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_sh0_codec.Read(input);
            if (sh0_ == null || value != 0D) {
              Sh0 = value;
            }
            break;
          }
          case 18: {
            double? value = _single_sh1_codec.Read(input);
            if (sh1_ == null || value != 0D) {
              Sh1 = value;
            }
            break;
          }
          case 26: {
            double? value = _single_el0_codec.Read(input);
            if (el0_ == null || value != 0D) {
              El0 = value;
            }
            break;
          }
          case 34: {
            double? value = _single_el1_codec.Read(input);
            if (el1_ == null || value != 0D) {
              El1 = value;
            }
            break;
          }
          case 42: {
            double? value = _single_wr0_codec.Read(input);
            if (wr0_ == null || value != 0D) {
              Wr0 = value;
            }
            break;
          }
          case 50: {
            double? value = _single_wr1_codec.Read(input);
            if (wr1_ == null || value != 0D) {
              Wr1 = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Velocity of our 6 arm joints in radians / second. If a velocity
  /// for a joint is specified, velocities for all joints we are
  /// trying to move must be specified.
  /// </summary>
  public sealed partial class ArmJointVelocity : pb::IMessage<ArmJointVelocity> {
    private static readonly pb::MessageParser<ArmJointVelocity> _parser = new pb::MessageParser<ArmJointVelocity>(() => new ArmJointVelocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmJointVelocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointVelocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointVelocity(ArmJointVelocity other) : this() {
      Sh0 = other.Sh0;
      Sh1 = other.Sh1;
      El0 = other.El0;
      El1 = other.El1;
      Wr0 = other.Wr0;
      Wr1 = other.Wr1;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointVelocity Clone() {
      return new ArmJointVelocity(this);
    }

    /// <summary>Field number for the "sh0" field.</summary>
    public const int Sh0FieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_sh0_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? sh0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Sh0 {
      get { return sh0_; }
      set {
        sh0_ = value;
      }
    }


    /// <summary>Field number for the "sh1" field.</summary>
    public const int Sh1FieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_sh1_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? sh1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Sh1 {
      get { return sh1_; }
      set {
        sh1_ = value;
      }
    }


    /// <summary>Field number for the "el0" field.</summary>
    public const int El0FieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_el0_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? el0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? El0 {
      get { return el0_; }
      set {
        el0_ = value;
      }
    }


    /// <summary>Field number for the "el1" field.</summary>
    public const int El1FieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_el1_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? el1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? El1 {
      get { return el1_; }
      set {
        el1_ = value;
      }
    }


    /// <summary>Field number for the "wr0" field.</summary>
    public const int Wr0FieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_wr0_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? wr0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Wr0 {
      get { return wr0_; }
      set {
        wr0_ = value;
      }
    }


    /// <summary>Field number for the "wr1" field.</summary>
    public const int Wr1FieldNumber = 6;
    private static readonly pb::FieldCodec<double?> _single_wr1_codec = pb::FieldCodec.ForStructWrapper<double>(50);
    private double? wr1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Wr1 {
      get { return wr1_; }
      set {
        wr1_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmJointVelocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmJointVelocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sh0, other.Sh0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sh1, other.Sh1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(El0, other.El0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(El1, other.El1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Wr0, other.Wr0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Wr1, other.Wr1)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sh0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sh0);
      if (sh1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sh1);
      if (el0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(El0);
      if (el1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(El1);
      if (wr0_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Wr0);
      if (wr1_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Wr1);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sh0_ != null) {
        _single_sh0_codec.WriteTagAndValue(output, Sh0);
      }
      if (sh1_ != null) {
        _single_sh1_codec.WriteTagAndValue(output, Sh1);
      }
      if (el0_ != null) {
        _single_el0_codec.WriteTagAndValue(output, El0);
      }
      if (el1_ != null) {
        _single_el1_codec.WriteTagAndValue(output, El1);
      }
      if (wr0_ != null) {
        _single_wr0_codec.WriteTagAndValue(output, Wr0);
      }
      if (wr1_ != null) {
        _single_wr1_codec.WriteTagAndValue(output, Wr1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sh0_ != null) {
        size += _single_sh0_codec.CalculateSizeWithTag(Sh0);
      }
      if (sh1_ != null) {
        size += _single_sh1_codec.CalculateSizeWithTag(Sh1);
      }
      if (el0_ != null) {
        size += _single_el0_codec.CalculateSizeWithTag(El0);
      }
      if (el1_ != null) {
        size += _single_el1_codec.CalculateSizeWithTag(El1);
      }
      if (wr0_ != null) {
        size += _single_wr0_codec.CalculateSizeWithTag(Wr0);
      }
      if (wr1_ != null) {
        size += _single_wr1_codec.CalculateSizeWithTag(Wr1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmJointVelocity other) {
      if (other == null) {
        return;
      }
      if (other.sh0_ != null) {
        if (sh0_ == null || other.Sh0 != 0D) {
          Sh0 = other.Sh0;
        }
      }
      if (other.sh1_ != null) {
        if (sh1_ == null || other.Sh1 != 0D) {
          Sh1 = other.Sh1;
        }
      }
      if (other.el0_ != null) {
        if (el0_ == null || other.El0 != 0D) {
          El0 = other.El0;
        }
      }
      if (other.el1_ != null) {
        if (el1_ == null || other.El1 != 0D) {
          El1 = other.El1;
        }
      }
      if (other.wr0_ != null) {
        if (wr0_ == null || other.Wr0 != 0D) {
          Wr0 = other.Wr0;
        }
      }
      if (other.wr1_ != null) {
        if (wr1_ == null || other.Wr1 != 0D) {
          Wr1 = other.Wr1;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_sh0_codec.Read(input);
            if (sh0_ == null || value != 0D) {
              Sh0 = value;
            }
            break;
          }
          case 18: {
            double? value = _single_sh1_codec.Read(input);
            if (sh1_ == null || value != 0D) {
              Sh1 = value;
            }
            break;
          }
          case 26: {
            double? value = _single_el0_codec.Read(input);
            if (el0_ == null || value != 0D) {
              El0 = value;
            }
            break;
          }
          case 34: {
            double? value = _single_el1_codec.Read(input);
            if (el1_ == null || value != 0D) {
              El1 = value;
            }
            break;
          }
          case 42: {
            double? value = _single_wr0_codec.Read(input);
            if (wr0_ == null || value != 0D) {
              Wr0 = value;
            }
            break;
          }
          case 50: {
            double? value = _single_wr1_codec.Read(input);
            if (wr1_ == null || value != 0D) {
              Wr1 = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A set of joint angles and velocities that can be used as a point within a joint trajectory.
  /// </summary>
  public sealed partial class ArmJointTrajectoryPoint : pb::IMessage<ArmJointTrajectoryPoint> {
    private static readonly pb::MessageParser<ArmJointTrajectoryPoint> _parser = new pb::MessageParser<ArmJointTrajectoryPoint>(() => new ArmJointTrajectoryPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmJointTrajectoryPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectoryPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectoryPoint(ArmJointTrajectoryPoint other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      timeSinceReference_ = other.timeSinceReference_ != null ? other.timeSinceReference_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectoryPoint Clone() {
      return new ArmJointTrajectoryPoint(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Bosdyn.Api.ArmJointPosition position_;
    /// <summary>
    /// Desired joint angles in radians
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ArmJointPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Bosdyn.Api.ArmJointVelocity velocity_;
    /// <summary>
    /// Optional desired joint velocities in radians / sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ArmJointVelocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "time_since_reference" field.</summary>
    public const int TimeSinceReferenceFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration timeSinceReference_;
    /// <summary>
    /// The time since reference at which we wish to achieve this position / velocity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeSinceReference {
      get { return timeSinceReference_; }
      set {
        timeSinceReference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmJointTrajectoryPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmJointTrajectoryPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(TimeSinceReference, other.TimeSinceReference)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (timeSinceReference_ != null) hash ^= TimeSinceReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (timeSinceReference_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeSinceReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (timeSinceReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeSinceReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmJointTrajectoryPoint other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.ArmJointPosition();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Bosdyn.Api.ArmJointVelocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.timeSinceReference_ != null) {
        if (timeSinceReference_ == null) {
          TimeSinceReference = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeSinceReference.MergeFrom(other.TimeSinceReference);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.ArmJointPosition();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Bosdyn.Api.ArmJointVelocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 26: {
            if (timeSinceReference_ == null) {
              TimeSinceReference = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(TimeSinceReference);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This allows a user to move the arm's joints directly. Each of the arm's joints will never move
  /// faster than maximum_velocity and never accelerate faster than maximum_acceleration. The user can
  /// specify a trajectory of joint positions and optional velocities for the arm to follow. The
  /// trajectory will be acted upon as follows. If a single trajectory point with no time is provided,
  /// the arm will take the joint currently furthest away from the goal pose and plan a minimum time
  /// trajectory such that the joint accelerates at maximum_acceleration, coasts at maximum_velocity,
  /// and decelerates at maximum_acceleration. The other joints will accelerate at
  /// maximum_acceleration, but then coast at a slower speed such that all joints arrive at the goal
  /// pose simultaneously with zero velocity. If the user provides trajectory times, the robot will fit
  /// a piece-wise cubic trajectory (continuous position and velocity) to the user's requested
  /// positions and (optional) velocities. If the requested trajectory is not achievable because it
  /// will violate position limits or the maximum_velocity or maximum_acceleration, the robot will pick
  /// a trajectory that is as close as possible to the user requested without violating velocity or
  /// acceleration limits.
  ///
  /// If the robot is not hitting the desired trajectory, try increasing the time between knot points,
  /// increasing the max velocity and acceleration, or only specifying joint position goals without a
  /// velocity
  /// </summary>
  public sealed partial class ArmJointTrajectory : pb::IMessage<ArmJointTrajectory> {
    private static readonly pb::MessageParser<ArmJointTrajectory> _parser = new pb::MessageParser<ArmJointTrajectory>(() => new ArmJointTrajectory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmJointTrajectory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectory(ArmJointTrajectory other) : this() {
      points_ = other.points_.Clone();
      referenceTime_ = other.referenceTime_ != null ? other.referenceTime_.Clone() : null;
      MaximumVelocity = other.MaximumVelocity;
      MaximumAcceleration = other.MaximumAcceleration;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmJointTrajectory Clone() {
      return new ArmJointTrajectory(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ArmJointTrajectoryPoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.ArmJointTrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint> points_ = new pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint>();
    /// <summary>
    /// The points in our trajectory. (positions, (optional) velocity, (optional) time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ArmJointTrajectoryPoint> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "reference_time" field.</summary>
    public const int ReferenceTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp referenceTime_;
    /// <summary>
    /// All trajectory points specify times relative to this reference time. The reference
    /// time should be in robot clock. If this field is not included, this time will be
    /// the receive time of the command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReferenceTime {
      get { return referenceTime_; }
      set {
        referenceTime_ = value;
      }
    }

    /// <summary>Field number for the "maximum_velocity" field.</summary>
    public const int MaximumVelocityFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_maximumVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? maximumVelocity_;
    /// <summary>
    /// The maximum velocity in rad/s that any joint is allowed to achieve.
    /// If this field is not set, a default value will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MaximumVelocity {
      get { return maximumVelocity_; }
      set {
        maximumVelocity_ = value;
      }
    }


    /// <summary>Field number for the "maximum_acceleration" field.</summary>
    public const int MaximumAccelerationFieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_maximumAcceleration_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? maximumAcceleration_;
    /// <summary>
    /// The maximum acceleration in rad/s^2 that any joint is allowed to
    /// achieve. If this field is not set, a default value will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? MaximumAcceleration {
      get { return maximumAcceleration_; }
      set {
        maximumAcceleration_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmJointTrajectory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmJointTrajectory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      if (!object.Equals(ReferenceTime, other.ReferenceTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumVelocity, other.MaximumVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumAcceleration, other.MaximumAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (referenceTime_ != null) hash ^= ReferenceTime.GetHashCode();
      if (maximumVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumVelocity);
      if (maximumAcceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumAcceleration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (referenceTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReferenceTime);
      }
      if (maximumVelocity_ != null) {
        _single_maximumVelocity_codec.WriteTagAndValue(output, MaximumVelocity);
      }
      if (maximumAcceleration_ != null) {
        _single_maximumAcceleration_codec.WriteTagAndValue(output, MaximumAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (referenceTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceTime);
      }
      if (maximumVelocity_ != null) {
        size += _single_maximumVelocity_codec.CalculateSizeWithTag(MaximumVelocity);
      }
      if (maximumAcceleration_ != null) {
        size += _single_maximumAcceleration_codec.CalculateSizeWithTag(MaximumAcceleration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmJointTrajectory other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      if (other.referenceTime_ != null) {
        if (referenceTime_ == null) {
          ReferenceTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReferenceTime.MergeFrom(other.ReferenceTime);
      }
      if (other.maximumVelocity_ != null) {
        if (maximumVelocity_ == null || other.MaximumVelocity != 0D) {
          MaximumVelocity = other.MaximumVelocity;
        }
      }
      if (other.maximumAcceleration_ != null) {
        if (maximumAcceleration_ == null || other.MaximumAcceleration != 0D) {
          MaximumAcceleration = other.MaximumAcceleration;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 18: {
            if (referenceTime_ == null) {
              ReferenceTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReferenceTime);
            break;
          }
          case 26: {
            double? value = _single_maximumVelocity_codec.Read(input);
            if (maximumVelocity_ == null || value != 0D) {
              MaximumVelocity = value;
            }
            break;
          }
          case 34: {
            double? value = _single_maximumAcceleration_codec.Read(input);
            if (maximumAcceleration_ == null || value != 0D) {
              MaximumAcceleration = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Move the hand in such a way to point it at a position in the world.
  /// </summary>
  public sealed partial class GazeCommand : pb::IMessage<GazeCommand> {
    private static readonly pb::MessageParser<GazeCommand> _parser = new pb::MessageParser<GazeCommand>(() => new GazeCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GazeCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeCommand(GazeCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GazeCommand Clone() {
      return new GazeCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GazeCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GazeCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GazeCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GazeCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.GazeCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          targetTrajectoryInFrame1_ = other.targetTrajectoryInFrame1_ != null ? other.targetTrajectoryInFrame1_.Clone() : null;
          frame1Name_ = other.frame1Name_;
          toolTrajectoryInFrame2_ = other.toolTrajectoryInFrame2_ != null ? other.toolTrajectoryInFrame2_.Clone() : null;
          frame2Name_ = other.frame2Name_;
          wristTformTool_ = other.wristTformTool_ != null ? other.wristTformTool_.Clone() : null;
          TargetTrajectoryInitialVelocity = other.TargetTrajectoryInitialVelocity;
          MaximumAcceleration = other.MaximumAcceleration;
          MaxLinearVelocity = other.MaxLinearVelocity;
          MaxAngularVelocity = other.MaxAngularVelocity;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "target_trajectory_in_frame1" field.</summary>
        public const int TargetTrajectoryInFrame1FieldNumber = 1;
        private global::Bosdyn.Api.Vec3Trajectory targetTrajectoryInFrame1_;
        /// <summary>
        /// Point(s) to look at expressed in frame1.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3Trajectory TargetTrajectoryInFrame1 {
          get { return targetTrajectoryInFrame1_; }
          set {
            targetTrajectoryInFrame1_ = value;
          }
        }

        /// <summary>Field number for the "frame1_name" field.</summary>
        public const int Frame1NameFieldNumber = 2;
        private string frame1Name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Frame1Name {
          get { return frame1Name_; }
          set {
            frame1Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tool_trajectory_in_frame2" field.</summary>
        public const int ToolTrajectoryInFrame2FieldNumber = 10;
        private global::Bosdyn.Api.SE3Trajectory toolTrajectoryInFrame2_;
        /// <summary>
        /// Optional, desired pose of the tool expressed in frame2.  Will be constrained to 'look at'
        /// the target regardless of the requested orientation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Trajectory ToolTrajectoryInFrame2 {
          get { return toolTrajectoryInFrame2_; }
          set {
            toolTrajectoryInFrame2_ = value;
          }
        }

        /// <summary>Field number for the "frame2_name" field.</summary>
        public const int Frame2NameFieldNumber = 11;
        private string frame2Name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Frame2Name {
          get { return frame2Name_; }
          set {
            frame2Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wrist_tform_tool" field.</summary>
        public const int WristTformToolFieldNumber = 9;
        private global::Bosdyn.Api.SE3Pose wristTformTool_;
        /// <summary>
        /// The transformation of the tool pose relative to the parent link (wrist).
        /// If the field is left unset, the transform will default to:
        ///      The position is wrist_tform_hand.position() [20 cm translation in wrist x].
        ///      The rotation is wrist_tform_hand_camera.rotation() [-9 degree pitch about wrist y].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose WristTformTool {
          get { return wristTformTool_; }
          set {
            wristTformTool_ = value;
          }
        }

        /// <summary>Field number for the "target_trajectory_initial_velocity" field.</summary>
        public const int TargetTrajectoryInitialVelocityFieldNumber = 5;
        private static readonly pb::FieldCodec<double?> _single_targetTrajectoryInitialVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(42);
        private double? targetTrajectoryInitialVelocity_;
        /// <summary>
        /// Optional velocity to move the target along the shortest path from the gaze's starting
        /// position to the first point in the target trajectory.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? TargetTrajectoryInitialVelocity {
          get { return targetTrajectoryInitialVelocity_; }
          set {
            targetTrajectoryInitialVelocity_ = value;
          }
        }


        /// <summary>Field number for the "maximum_acceleration" field.</summary>
        public const int MaximumAccelerationFieldNumber = 6;
        private static readonly pb::FieldCodec<double?> _single_maximumAcceleration_codec = pb::FieldCodec.ForStructWrapper<double>(50);
        private double? maximumAcceleration_;
        /// <summary>
        /// Optional Maximum acceleration magnitude of the end-effector.
        /// Valid ranges (0, 20]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumAcceleration {
          get { return maximumAcceleration_; }
          set {
            maximumAcceleration_ = value;
          }
        }


        /// <summary>Field number for the "max_linear_velocity" field.</summary>
        public const int MaxLinearVelocityFieldNumber = 7;
        private static readonly pb::FieldCodec<double?> _single_maxLinearVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(58);
        private double? maxLinearVelocity_;
        /// <summary>
        /// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxLinearVelocity {
          get { return maxLinearVelocity_; }
          set {
            maxLinearVelocity_ = value;
          }
        }


        /// <summary>Field number for the "max_angular_velocity" field.</summary>
        public const int MaxAngularVelocityFieldNumber = 8;
        private static readonly pb::FieldCodec<double?> _single_maxAngularVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(66);
        private double? maxAngularVelocity_;
        /// <summary>
        /// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxAngularVelocity {
          get { return maxAngularVelocity_; }
          set {
            maxAngularVelocity_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TargetTrajectoryInFrame1, other.TargetTrajectoryInFrame1)) return false;
          if (Frame1Name != other.Frame1Name) return false;
          if (!object.Equals(ToolTrajectoryInFrame2, other.ToolTrajectoryInFrame2)) return false;
          if (Frame2Name != other.Frame2Name) return false;
          if (!object.Equals(WristTformTool, other.WristTformTool)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TargetTrajectoryInitialVelocity, other.TargetTrajectoryInitialVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumAcceleration, other.MaximumAcceleration)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxLinearVelocity, other.MaxLinearVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxAngularVelocity, other.MaxAngularVelocity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (targetTrajectoryInFrame1_ != null) hash ^= TargetTrajectoryInFrame1.GetHashCode();
          if (Frame1Name.Length != 0) hash ^= Frame1Name.GetHashCode();
          if (toolTrajectoryInFrame2_ != null) hash ^= ToolTrajectoryInFrame2.GetHashCode();
          if (Frame2Name.Length != 0) hash ^= Frame2Name.GetHashCode();
          if (wristTformTool_ != null) hash ^= WristTformTool.GetHashCode();
          if (targetTrajectoryInitialVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TargetTrajectoryInitialVelocity);
          if (maximumAcceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumAcceleration);
          if (maxLinearVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxLinearVelocity);
          if (maxAngularVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxAngularVelocity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (targetTrajectoryInFrame1_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TargetTrajectoryInFrame1);
          }
          if (Frame1Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Frame1Name);
          }
          if (targetTrajectoryInitialVelocity_ != null) {
            _single_targetTrajectoryInitialVelocity_codec.WriteTagAndValue(output, TargetTrajectoryInitialVelocity);
          }
          if (maximumAcceleration_ != null) {
            _single_maximumAcceleration_codec.WriteTagAndValue(output, MaximumAcceleration);
          }
          if (maxLinearVelocity_ != null) {
            _single_maxLinearVelocity_codec.WriteTagAndValue(output, MaxLinearVelocity);
          }
          if (maxAngularVelocity_ != null) {
            _single_maxAngularVelocity_codec.WriteTagAndValue(output, MaxAngularVelocity);
          }
          if (wristTformTool_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(WristTformTool);
          }
          if (toolTrajectoryInFrame2_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(ToolTrajectoryInFrame2);
          }
          if (Frame2Name.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Frame2Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (targetTrajectoryInFrame1_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetTrajectoryInFrame1);
          }
          if (Frame1Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame1Name);
          }
          if (toolTrajectoryInFrame2_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToolTrajectoryInFrame2);
          }
          if (Frame2Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame2Name);
          }
          if (wristTformTool_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WristTformTool);
          }
          if (targetTrajectoryInitialVelocity_ != null) {
            size += _single_targetTrajectoryInitialVelocity_codec.CalculateSizeWithTag(TargetTrajectoryInitialVelocity);
          }
          if (maximumAcceleration_ != null) {
            size += _single_maximumAcceleration_codec.CalculateSizeWithTag(MaximumAcceleration);
          }
          if (maxLinearVelocity_ != null) {
            size += _single_maxLinearVelocity_codec.CalculateSizeWithTag(MaxLinearVelocity);
          }
          if (maxAngularVelocity_ != null) {
            size += _single_maxAngularVelocity_codec.CalculateSizeWithTag(MaxAngularVelocity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.targetTrajectoryInFrame1_ != null) {
            if (targetTrajectoryInFrame1_ == null) {
              TargetTrajectoryInFrame1 = new global::Bosdyn.Api.Vec3Trajectory();
            }
            TargetTrajectoryInFrame1.MergeFrom(other.TargetTrajectoryInFrame1);
          }
          if (other.Frame1Name.Length != 0) {
            Frame1Name = other.Frame1Name;
          }
          if (other.toolTrajectoryInFrame2_ != null) {
            if (toolTrajectoryInFrame2_ == null) {
              ToolTrajectoryInFrame2 = new global::Bosdyn.Api.SE3Trajectory();
            }
            ToolTrajectoryInFrame2.MergeFrom(other.ToolTrajectoryInFrame2);
          }
          if (other.Frame2Name.Length != 0) {
            Frame2Name = other.Frame2Name;
          }
          if (other.wristTformTool_ != null) {
            if (wristTformTool_ == null) {
              WristTformTool = new global::Bosdyn.Api.SE3Pose();
            }
            WristTformTool.MergeFrom(other.WristTformTool);
          }
          if (other.targetTrajectoryInitialVelocity_ != null) {
            if (targetTrajectoryInitialVelocity_ == null || other.TargetTrajectoryInitialVelocity != 0D) {
              TargetTrajectoryInitialVelocity = other.TargetTrajectoryInitialVelocity;
            }
          }
          if (other.maximumAcceleration_ != null) {
            if (maximumAcceleration_ == null || other.MaximumAcceleration != 0D) {
              MaximumAcceleration = other.MaximumAcceleration;
            }
          }
          if (other.maxLinearVelocity_ != null) {
            if (maxLinearVelocity_ == null || other.MaxLinearVelocity != 0D) {
              MaxLinearVelocity = other.MaxLinearVelocity;
            }
          }
          if (other.maxAngularVelocity_ != null) {
            if (maxAngularVelocity_ == null || other.MaxAngularVelocity != 0D) {
              MaxAngularVelocity = other.MaxAngularVelocity;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (targetTrajectoryInFrame1_ == null) {
                  TargetTrajectoryInFrame1 = new global::Bosdyn.Api.Vec3Trajectory();
                }
                input.ReadMessage(TargetTrajectoryInFrame1);
                break;
              }
              case 18: {
                Frame1Name = input.ReadString();
                break;
              }
              case 42: {
                double? value = _single_targetTrajectoryInitialVelocity_codec.Read(input);
                if (targetTrajectoryInitialVelocity_ == null || value != 0D) {
                  TargetTrajectoryInitialVelocity = value;
                }
                break;
              }
              case 50: {
                double? value = _single_maximumAcceleration_codec.Read(input);
                if (maximumAcceleration_ == null || value != 0D) {
                  MaximumAcceleration = value;
                }
                break;
              }
              case 58: {
                double? value = _single_maxLinearVelocity_codec.Read(input);
                if (maxLinearVelocity_ == null || value != 0D) {
                  MaxLinearVelocity = value;
                }
                break;
              }
              case 66: {
                double? value = _single_maxAngularVelocity_codec.Read(input);
                if (maxAngularVelocity_ == null || value != 0D) {
                  MaxAngularVelocity = value;
                }
                break;
              }
              case 74: {
                if (wristTformTool_ == null) {
                  WristTformTool = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(WristTformTool);
                break;
              }
              case 82: {
                if (toolTrajectoryInFrame2_ == null) {
                  ToolTrajectoryInFrame2 = new global::Bosdyn.Api.SE3Trajectory();
                }
                input.ReadMessage(ToolTrajectoryInFrame2);
                break;
              }
              case 90: {
                Frame2Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.GazeCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          gazingAtTarget_ = other.gazingAtTarget_;
          gazeToTargetRotationMeasured_ = other.gazeToTargetRotationMeasured_;
          handPositionAtGoal_ = other.handPositionAtGoal_;
          handDistanceToGoalMeasured_ = other.handDistanceToGoalMeasured_;
          handRollAtGoal_ = other.handRollAtGoal_;
          handRollToTargetRollMeasured_ = other.handRollToTargetRollMeasured_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.GazeCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.GazeCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "gazing_at_target" field.</summary>
        public const int GazingAtTargetFieldNumber = 2;
        private bool gazingAtTarget_;
        /// <summary>
        /// If we are gazing at the target
        /// Rotation from the current gaze point to the trajectory's end [radians]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool GazingAtTarget {
          get { return gazingAtTarget_; }
          set {
            gazingAtTarget_ = value;
          }
        }

        /// <summary>Field number for the "gaze_to_target_rotation_measured" field.</summary>
        public const int GazeToTargetRotationMeasuredFieldNumber = 5;
        private float gazeToTargetRotationMeasured_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GazeToTargetRotationMeasured {
          get { return gazeToTargetRotationMeasured_; }
          set {
            gazeToTargetRotationMeasured_ = value;
          }
        }

        /// <summary>Field number for the "hand_position_at_goal" field.</summary>
        public const int HandPositionAtGoalFieldNumber = 3;
        private bool handPositionAtGoal_;
        /// <summary>
        /// If the hand's position is at the goal.
        /// Distance from the hand's current position to the trajectory's end [meters]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HandPositionAtGoal {
          get { return handPositionAtGoal_; }
          set {
            handPositionAtGoal_ = value;
          }
        }

        /// <summary>Field number for the "hand_distance_to_goal_measured" field.</summary>
        public const int HandDistanceToGoalMeasuredFieldNumber = 6;
        private float handDistanceToGoalMeasured_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float HandDistanceToGoalMeasured {
          get { return handDistanceToGoalMeasured_; }
          set {
            handDistanceToGoalMeasured_ = value;
          }
        }

        /// <summary>Field number for the "hand_roll_at_goal" field.</summary>
        public const int HandRollAtGoalFieldNumber = 4;
        private bool handRollAtGoal_;
        /// <summary>
        /// If the hand's roll is at the goal.
        /// Rotation from the current hand position to the desired roll at the trajectory's end
        /// [radians]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HandRollAtGoal {
          get { return handRollAtGoal_; }
          set {
            handRollAtGoal_ = value;
          }
        }

        /// <summary>Field number for the "hand_roll_to_target_roll_measured" field.</summary>
        public const int HandRollToTargetRollMeasuredFieldNumber = 7;
        private float handRollToTargetRollMeasured_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float HandRollToTargetRollMeasured {
          get { return handRollToTargetRollMeasured_; }
          set {
            handRollToTargetRollMeasured_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          if (GazingAtTarget != other.GazingAtTarget) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GazeToTargetRotationMeasured, other.GazeToTargetRotationMeasured)) return false;
          if (HandPositionAtGoal != other.HandPositionAtGoal) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HandDistanceToGoalMeasured, other.HandDistanceToGoalMeasured)) return false;
          if (HandRollAtGoal != other.HandRollAtGoal) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HandRollToTargetRollMeasured, other.HandRollToTargetRollMeasured)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (GazingAtTarget != false) hash ^= GazingAtTarget.GetHashCode();
          if (GazeToTargetRotationMeasured != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GazeToTargetRotationMeasured);
          if (HandPositionAtGoal != false) hash ^= HandPositionAtGoal.GetHashCode();
          if (HandDistanceToGoalMeasured != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HandDistanceToGoalMeasured);
          if (HandRollAtGoal != false) hash ^= HandRollAtGoal.GetHashCode();
          if (HandRollToTargetRollMeasured != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HandRollToTargetRollMeasured);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (GazingAtTarget != false) {
            output.WriteRawTag(16);
            output.WriteBool(GazingAtTarget);
          }
          if (HandPositionAtGoal != false) {
            output.WriteRawTag(24);
            output.WriteBool(HandPositionAtGoal);
          }
          if (HandRollAtGoal != false) {
            output.WriteRawTag(32);
            output.WriteBool(HandRollAtGoal);
          }
          if (GazeToTargetRotationMeasured != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(GazeToTargetRotationMeasured);
          }
          if (HandDistanceToGoalMeasured != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(HandDistanceToGoalMeasured);
          }
          if (HandRollToTargetRollMeasured != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(HandRollToTargetRollMeasured);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (GazingAtTarget != false) {
            size += 1 + 1;
          }
          if (GazeToTargetRotationMeasured != 0F) {
            size += 1 + 4;
          }
          if (HandPositionAtGoal != false) {
            size += 1 + 1;
          }
          if (HandDistanceToGoalMeasured != 0F) {
            size += 1 + 4;
          }
          if (HandRollAtGoal != false) {
            size += 1 + 1;
          }
          if (HandRollToTargetRollMeasured != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          if (other.GazingAtTarget != false) {
            GazingAtTarget = other.GazingAtTarget;
          }
          if (other.GazeToTargetRotationMeasured != 0F) {
            GazeToTargetRotationMeasured = other.GazeToTargetRotationMeasured;
          }
          if (other.HandPositionAtGoal != false) {
            HandPositionAtGoal = other.HandPositionAtGoal;
          }
          if (other.HandDistanceToGoalMeasured != 0F) {
            HandDistanceToGoalMeasured = other.HandDistanceToGoalMeasured;
          }
          if (other.HandRollAtGoal != false) {
            HandRollAtGoal = other.HandRollAtGoal;
          }
          if (other.HandRollToTargetRollMeasured != 0F) {
            HandRollToTargetRollMeasured = other.HandRollToTargetRollMeasured;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.GazeCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
              case 16: {
                GazingAtTarget = input.ReadBool();
                break;
              }
              case 24: {
                HandPositionAtGoal = input.ReadBool();
                break;
              }
              case 32: {
                HandRollAtGoal = input.ReadBool();
                break;
              }
              case 45: {
                GazeToTargetRotationMeasured = input.ReadFloat();
                break;
              }
              case 53: {
                HandDistanceToGoalMeasured = input.ReadFloat();
                break;
              }
              case 61: {
                HandRollToTargetRollMeasured = input.ReadFloat();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Robot is gazing at the target at the end of the trajectory.
            /// </summary>
            [pbr::OriginalName("STATUS_TRAJECTORY_COMPLETE")] TrajectoryComplete = 1,
            /// <summary>
            /// Robot is re-configuring arm to gaze at the target.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 2,
            /// <summary>
            /// The arm has stopped making progress to the goal pose for the tool.
            /// Note, this does not cancel the trajectory. For example, if the requested goal is too
            /// far away, walking the base robot closer to the goal will cause the arm to continue
            /// along the trajectory once it can continue.
            /// </summary>
            [pbr::OriginalName("STATUS_TOOL_TRAJECTORY_STALLED")] ToolTrajectoryStalled = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Stop the arm applying minimal forces to the world. For example, if the arm is in the  middle of
  /// opening a heavy door and a stop command is sent, the arm will comply and let the door close.
  /// </summary>
  public sealed partial class ArmStopCommand : pb::IMessage<ArmStopCommand> {
    private static readonly pb::MessageParser<ArmStopCommand> _parser = new pb::MessageParser<ArmStopCommand>(() => new ArmStopCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmStopCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ArmCommandReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmStopCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmStopCommand(ArmStopCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmStopCommand Clone() {
      return new ArmStopCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmStopCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmStopCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmStopCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ArmStopCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Stop command takes no arguments.
      /// </summary>
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmStopCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      /// Stop command provides no feedback
      /// </summary>
      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ArmStopCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
