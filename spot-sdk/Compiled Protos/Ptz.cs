// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ptz.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api.SpotCam {

  /// <summary>Holder for reflection information generated from Protos/ptz.proto</summary>
  public static partial class PtzReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/ptz.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PtzReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQcm90b3MvcHR6LnByb3RvEhNib3NkeW4uYXBpLnNwb3RfY2FtGh5nb29n",
            "bGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aE1Byb3Rvcy9oZWFkZXIucHJv",
            "dG8iuwIKDlB0ekRlc2NyaXB0aW9uEgwKBG5hbWUYASABKAkSPQoJcGFuX2xp",
            "bWl0GAIgASgLMiouYm9zZHluLmFwaS5zcG90X2NhbS5QdHpEZXNjcmlwdGlv",
            "bi5MaW1pdHMSPgoKdGlsdF9saW1pdBgDIAEoCzIqLmJvc2R5bi5hcGkuc3Bv",
            "dF9jYW0uUHR6RGVzY3JpcHRpb24uTGltaXRzEj4KCnpvb21fbGltaXQYBCAB",
            "KAsyKi5ib3NkeW4uYXBpLnNwb3RfY2FtLlB0ekRlc2NyaXB0aW9uLkxpbWl0",
            "cxpcCgZMaW1pdHMSKAoDbWluGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZs",
            "b2F0VmFsdWUSKAoDbWF4GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0",
            "VmFsdWUivwEKC1B0elBvc2l0aW9uEjAKA3B0ehgCIAEoCzIjLmJvc2R5bi5h",
            "cGkuc3BvdF9jYW0uUHR6RGVzY3JpcHRpb24SKAoDcGFuGAMgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSKQoEdGlsdBgEIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5GbG9hdFZhbHVlEikKBHpvb20YBSABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuRmxvYXRWYWx1ZSK/AQoLUHR6VmVsb2NpdHkSMAoDcHR6GAIg",
            "ASgLMiMuYm9zZHluLmFwaS5zcG90X2NhbS5QdHpEZXNjcmlwdGlvbhIoCgNw",
            "YW4YAyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRIpCgR0aWx0",
            "GAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSKQoEem9vbRgF",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlInQKFUdldFB0elBv",
            "c2l0aW9uUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJl",
            "cXVlc3RIZWFkZXISMAoDcHR6GAIgASgLMiMuYm9zZHluLmFwaS5zcG90X2Nh",
            "bS5QdHpEZXNjcmlwdGlvbiJ4ChZHZXRQdHpQb3NpdGlvblJlc3BvbnNlEioK",
            "BmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISMgoI",
            "cG9zaXRpb24YAiABKAsyIC5ib3NkeW4uYXBpLnNwb3RfY2FtLlB0elBvc2l0",
            "aW9uInQKFUdldFB0elZlbG9jaXR5UmVxdWVzdBIpCgZoZWFkZXIYASABKAsy",
            "GS5ib3NkeW4uYXBpLlJlcXVlc3RIZWFkZXISMAoDcHR6GAIgASgLMiMuYm9z",
            "ZHluLmFwaS5zcG90X2NhbS5QdHpEZXNjcmlwdGlvbiJ4ChZHZXRQdHpWZWxv",
            "Y2l0eVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVz",
            "cG9uc2VIZWFkZXISMgoIdmVsb2NpdHkYAiABKAsyIC5ib3NkeW4uYXBpLnNw",
            "b3RfY2FtLlB0elZlbG9jaXR5IjsKDkxpc3RQdHpSZXF1ZXN0EikKBmhlYWRl",
            "chgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJwCg9MaXN0UHR6",
            "UmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25z",
            "ZUhlYWRlchIxCgRwdHpzGAIgAygLMiMuYm9zZHluLmFwaS5zcG90X2NhbS5Q",
            "dHpEZXNjcmlwdGlvbiJ2ChVTZXRQdHpQb3NpdGlvblJlcXVlc3QSKQoGaGVh",
            "ZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEjIKCHBvc2l0",
            "aW9uGAIgASgLMiAuYm9zZHluLmFwaS5zcG90X2NhbS5QdHpQb3NpdGlvbiJ4",
            "ChZTZXRQdHpQb3NpdGlvblJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJv",
            "c2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISMgoIcG9zaXRpb24YAiABKAsyIC5i",
            "b3NkeW4uYXBpLnNwb3RfY2FtLlB0elBvc2l0aW9uInYKFVNldFB0elZlbG9j",
            "aXR5UmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVl",
            "c3RIZWFkZXISMgoIdmVsb2NpdHkYAiABKAsyIC5ib3NkeW4uYXBpLnNwb3Rf",
            "Y2FtLlB0elZlbG9jaXR5IngKFlNldFB0elZlbG9jaXR5UmVzcG9uc2USKgoG",
            "aGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlchIyCgh2",
            "ZWxvY2l0eRgCIAEoCzIgLmJvc2R5bi5hcGkuc3BvdF9jYW0uUHR6VmVsb2Np",
            "dHkiQgoVSW5pdGlhbGl6ZUxlbnNSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZ",
            "LmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJEChZJbml0aWFsaXplTGVuc1Jl",
            "c3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VI",
            "ZWFkZXJCCkIIUHR6UHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.PtzDescription), global::Bosdyn.Api.SpotCam.PtzDescription.Parser, new[]{ "Name", "PanLimit", "TiltLimit", "ZoomLimit" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits), global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits.Parser, new[]{ "Min", "Max" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.PtzPosition), global::Bosdyn.Api.SpotCam.PtzPosition.Parser, new[]{ "Ptz", "Pan", "Tilt", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.PtzVelocity), global::Bosdyn.Api.SpotCam.PtzVelocity.Parser, new[]{ "Ptz", "Pan", "Tilt", "Zoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetPtzPositionRequest), global::Bosdyn.Api.SpotCam.GetPtzPositionRequest.Parser, new[]{ "Header", "Ptz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetPtzPositionResponse), global::Bosdyn.Api.SpotCam.GetPtzPositionResponse.Parser, new[]{ "Header", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetPtzVelocityRequest), global::Bosdyn.Api.SpotCam.GetPtzVelocityRequest.Parser, new[]{ "Header", "Ptz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetPtzVelocityResponse), global::Bosdyn.Api.SpotCam.GetPtzVelocityResponse.Parser, new[]{ "Header", "Velocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListPtzRequest), global::Bosdyn.Api.SpotCam.ListPtzRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListPtzResponse), global::Bosdyn.Api.SpotCam.ListPtzResponse.Parser, new[]{ "Header", "Ptzs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPtzPositionRequest), global::Bosdyn.Api.SpotCam.SetPtzPositionRequest.Parser, new[]{ "Header", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPtzPositionResponse), global::Bosdyn.Api.SpotCam.SetPtzPositionResponse.Parser, new[]{ "Header", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPtzVelocityRequest), global::Bosdyn.Api.SpotCam.SetPtzVelocityRequest.Parser, new[]{ "Header", "Velocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPtzVelocityResponse), global::Bosdyn.Api.SpotCam.SetPtzVelocityResponse.Parser, new[]{ "Header", "Velocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.InitializeLensRequest), global::Bosdyn.Api.SpotCam.InitializeLensRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.InitializeLensResponse), global::Bosdyn.Api.SpotCam.InitializeLensResponse.Parser, new[]{ "Header" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///PtzDescription provides information about a given PTZ. The name is usually all that's required to
  ///describe a PTZ, but ListPtzResponse will include more information.
  /// </summary>
  public sealed partial class PtzDescription : pb::IMessage<PtzDescription> {
    private static readonly pb::MessageParser<PtzDescription> _parser = new pb::MessageParser<PtzDescription>(() => new PtzDescription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PtzDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzDescription(PtzDescription other) : this() {
      name_ = other.name_;
      panLimit_ = other.panLimit_ != null ? other.panLimit_.Clone() : null;
      tiltLimit_ = other.tiltLimit_ != null ? other.tiltLimit_.Clone() : null;
      zoomLimit_ = other.zoomLimit_ != null ? other.zoomLimit_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzDescription Clone() {
      return new PtzDescription(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier of a particular controllable PTZ mechanism (real or virtual).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pan_limit" field.</summary>
    public const int PanLimitFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits panLimit_;
    /// <summary>
    /// If a limit is not set, all positions are valid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits PanLimit {
      get { return panLimit_; }
      set {
        panLimit_ = value;
      }
    }

    /// <summary>Field number for the "tilt_limit" field.</summary>
    public const int TiltLimitFieldNumber = 3;
    private global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits tiltLimit_;
    /// <summary>
    /// Limits in degrees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits TiltLimit {
      get { return tiltLimit_; }
      set {
        tiltLimit_ = value;
      }
    }

    /// <summary>Field number for the "zoom_limit" field.</summary>
    public const int ZoomLimitFieldNumber = 4;
    private global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits zoomLimit_;
    /// <summary>
    /// Limits in zoom level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits ZoomLimit {
      get { return zoomLimit_; }
      set {
        zoomLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PtzDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PtzDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(PanLimit, other.PanLimit)) return false;
      if (!object.Equals(TiltLimit, other.TiltLimit)) return false;
      if (!object.Equals(ZoomLimit, other.ZoomLimit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (panLimit_ != null) hash ^= PanLimit.GetHashCode();
      if (tiltLimit_ != null) hash ^= TiltLimit.GetHashCode();
      if (zoomLimit_ != null) hash ^= ZoomLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (panLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PanLimit);
      }
      if (tiltLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TiltLimit);
      }
      if (zoomLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ZoomLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (panLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PanLimit);
      }
      if (tiltLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TiltLimit);
      }
      if (zoomLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZoomLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PtzDescription other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.panLimit_ != null) {
        if (panLimit_ == null) {
          PanLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
        }
        PanLimit.MergeFrom(other.PanLimit);
      }
      if (other.tiltLimit_ != null) {
        if (tiltLimit_ == null) {
          TiltLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
        }
        TiltLimit.MergeFrom(other.TiltLimit);
      }
      if (other.zoomLimit_ != null) {
        if (zoomLimit_ == null) {
          ZoomLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
        }
        ZoomLimit.MergeFrom(other.ZoomLimit);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (panLimit_ == null) {
              PanLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
            }
            input.ReadMessage(PanLimit);
            break;
          }
          case 26: {
            if (tiltLimit_ == null) {
              TiltLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
            }
            input.ReadMessage(TiltLimit);
            break;
          }
          case 34: {
            if (zoomLimit_ == null) {
              ZoomLimit = new global::Bosdyn.Api.SpotCam.PtzDescription.Types.Limits();
            }
            input.ReadMessage(ZoomLimit);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PtzDescription message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Limits for a single axis.
      /// </summary>
      public sealed partial class Limits : pb::IMessage<Limits> {
        private static readonly pb::MessageParser<Limits> _parser = new pb::MessageParser<Limits>(() => new Limits());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Limits> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SpotCam.PtzDescription.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Limits() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Limits(Limits other) : this() {
          Min = other.Min;
          Max = other.Max;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Limits Clone() {
          return new Limits(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private static readonly pb::FieldCodec<float?> _single_min_codec = pb::FieldCodec.ForStructWrapper<float>(10);
        private float? min_;
        /// <summary>
        /// Units depend on the axis being controlled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float? Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }


        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private static readonly pb::FieldCodec<float?> _single_max_codec = pb::FieldCodec.ForStructWrapper<float>(18);
        private float? max_;
        /// <summary>
        /// Units depend on the axis being controlled.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float? Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Limits);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Limits other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Min, other.Min)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Max, other.Max)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (min_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Min);
          if (max_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Max);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (min_ != null) {
            _single_min_codec.WriteTagAndValue(output, Min);
          }
          if (max_ != null) {
            _single_max_codec.WriteTagAndValue(output, Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (min_ != null) {
            size += _single_min_codec.CalculateSizeWithTag(Min);
          }
          if (max_ != null) {
            size += _single_max_codec.CalculateSizeWithTag(Max);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Limits other) {
          if (other == null) {
            return;
          }
          if (other.min_ != null) {
            if (min_ == null || other.Min != 0F) {
              Min = other.Min;
            }
          }
          if (other.max_ != null) {
            if (max_ == null || other.Max != 0F) {
              Max = other.Max;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                float? value = _single_min_codec.Read(input);
                if (min_ == null || value != 0F) {
                  Min = value;
                }
                break;
              }
              case 18: {
                float? value = _single_max_codec.Read(input);
                if (max_ == null || value != 0F) {
                  Max = value;
                }
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Doubles as a description of current state, or a command for a new position.
  /// </summary>
  public sealed partial class PtzPosition : pb::IMessage<PtzPosition> {
    private static readonly pb::MessageParser<PtzPosition> _parser = new pb::MessageParser<PtzPosition>(() => new PtzPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PtzPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzPosition(PtzPosition other) : this() {
      ptz_ = other.ptz_ != null ? other.ptz_.Clone() : null;
      Pan = other.Pan;
      Tilt = other.Tilt;
      Zoom = other.Zoom;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzPosition Clone() {
      return new PtzPosition(this);
    }

    /// <summary>Field number for the "ptz" field.</summary>
    public const int PtzFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzDescription ptz_;
    /// <summary>
    /// The "mech" ptz can pan [0, 360] degrees,
    /// tilt approximately [-30, 100] degrees where 0 is the horizon, IR and PTZ models differ
    /// and zoom between 1x and 30x.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription Ptz {
      get { return ptz_; }
      set {
        ptz_ = value;
      }
    }

    /// <summary>Field number for the "pan" field.</summary>
    public const int PanFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_pan_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? pan_;
    /// <summary>
    /// degrees
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Pan {
      get { return pan_; }
      set {
        pan_ = value;
      }
    }


    /// <summary>Field number for the "tilt" field.</summary>
    public const int TiltFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_tilt_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? tilt_;
    /// <summary>
    /// degrees
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Tilt {
      get { return tilt_; }
      set {
        tilt_ = value;
      }
    }


    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_zoom_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? zoom_;
    /// <summary>
    /// zoom level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Zoom {
      get { return zoom_; }
      set {
        zoom_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PtzPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PtzPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ptz, other.Ptz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Pan, other.Pan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Tilt, other.Tilt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Zoom, other.Zoom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ptz_ != null) hash ^= Ptz.GetHashCode();
      if (pan_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Pan);
      if (tilt_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Tilt);
      if (zoom_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Zoom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ptz_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ptz);
      }
      if (pan_ != null) {
        _single_pan_codec.WriteTagAndValue(output, Pan);
      }
      if (tilt_ != null) {
        _single_tilt_codec.WriteTagAndValue(output, Tilt);
      }
      if (zoom_ != null) {
        _single_zoom_codec.WriteTagAndValue(output, Zoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ptz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptz);
      }
      if (pan_ != null) {
        size += _single_pan_codec.CalculateSizeWithTag(Pan);
      }
      if (tilt_ != null) {
        size += _single_tilt_codec.CalculateSizeWithTag(Tilt);
      }
      if (zoom_ != null) {
        size += _single_zoom_codec.CalculateSizeWithTag(Zoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PtzPosition other) {
      if (other == null) {
        return;
      }
      if (other.ptz_ != null) {
        if (ptz_ == null) {
          Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
        }
        Ptz.MergeFrom(other.Ptz);
      }
      if (other.pan_ != null) {
        if (pan_ == null || other.Pan != 0F) {
          Pan = other.Pan;
        }
      }
      if (other.tilt_ != null) {
        if (tilt_ == null || other.Tilt != 0F) {
          Tilt = other.Tilt;
        }
      }
      if (other.zoom_ != null) {
        if (zoom_ == null || other.Zoom != 0F) {
          Zoom = other.Zoom;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (ptz_ == null) {
              Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
            }
            input.ReadMessage(Ptz);
            break;
          }
          case 26: {
            float? value = _single_pan_codec.Read(input);
            if (pan_ == null || value != 0F) {
              Pan = value;
            }
            break;
          }
          case 34: {
            float? value = _single_tilt_codec.Read(input);
            if (tilt_ == null || value != 0F) {
              Tilt = value;
            }
            break;
          }
          case 42: {
            float? value = _single_zoom_codec.Read(input);
            if (zoom_ == null || value != 0F) {
              Zoom = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Doubles as a description of current state, or a command for a new velocity.
  /// </summary>
  public sealed partial class PtzVelocity : pb::IMessage<PtzVelocity> {
    private static readonly pb::MessageParser<PtzVelocity> _parser = new pb::MessageParser<PtzVelocity>(() => new PtzVelocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PtzVelocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzVelocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzVelocity(PtzVelocity other) : this() {
      ptz_ = other.ptz_ != null ? other.ptz_.Clone() : null;
      Pan = other.Pan;
      Tilt = other.Tilt;
      Zoom = other.Zoom;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtzVelocity Clone() {
      return new PtzVelocity(this);
    }

    /// <summary>Field number for the "ptz" field.</summary>
    public const int PtzFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzDescription ptz_;
    /// <summary>
    /// The "mech" ptz cannot be used with Velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription Ptz {
      get { return ptz_; }
      set {
        ptz_ = value;
      }
    }

    /// <summary>Field number for the "pan" field.</summary>
    public const int PanFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_pan_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? pan_;
    /// <summary>
    /// degrees/second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Pan {
      get { return pan_; }
      set {
        pan_ = value;
      }
    }


    /// <summary>Field number for the "tilt" field.</summary>
    public const int TiltFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_tilt_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? tilt_;
    /// <summary>
    /// degrees/second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Tilt {
      get { return tilt_; }
      set {
        tilt_ = value;
      }
    }


    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_zoom_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? zoom_;
    /// <summary>
    /// zoom level/second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Zoom {
      get { return zoom_; }
      set {
        zoom_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PtzVelocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PtzVelocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ptz, other.Ptz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Pan, other.Pan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Tilt, other.Tilt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Zoom, other.Zoom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ptz_ != null) hash ^= Ptz.GetHashCode();
      if (pan_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Pan);
      if (tilt_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Tilt);
      if (zoom_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Zoom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ptz_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ptz);
      }
      if (pan_ != null) {
        _single_pan_codec.WriteTagAndValue(output, Pan);
      }
      if (tilt_ != null) {
        _single_tilt_codec.WriteTagAndValue(output, Tilt);
      }
      if (zoom_ != null) {
        _single_zoom_codec.WriteTagAndValue(output, Zoom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ptz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptz);
      }
      if (pan_ != null) {
        size += _single_pan_codec.CalculateSizeWithTag(Pan);
      }
      if (tilt_ != null) {
        size += _single_tilt_codec.CalculateSizeWithTag(Tilt);
      }
      if (zoom_ != null) {
        size += _single_zoom_codec.CalculateSizeWithTag(Zoom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PtzVelocity other) {
      if (other == null) {
        return;
      }
      if (other.ptz_ != null) {
        if (ptz_ == null) {
          Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
        }
        Ptz.MergeFrom(other.Ptz);
      }
      if (other.pan_ != null) {
        if (pan_ == null || other.Pan != 0F) {
          Pan = other.Pan;
        }
      }
      if (other.tilt_ != null) {
        if (tilt_ == null || other.Tilt != 0F) {
          Tilt = other.Tilt;
        }
      }
      if (other.zoom_ != null) {
        if (zoom_ == null || other.Zoom != 0F) {
          Zoom = other.Zoom;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (ptz_ == null) {
              Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
            }
            input.ReadMessage(Ptz);
            break;
          }
          case 26: {
            float? value = _single_pan_codec.Read(input);
            if (pan_ == null || value != 0F) {
              Pan = value;
            }
            break;
          }
          case 34: {
            float? value = _single_tilt_codec.Read(input);
            if (tilt_ == null || value != 0F) {
              Tilt = value;
            }
            break;
          }
          case 42: {
            float? value = _single_zoom_codec.Read(input);
            if (zoom_ == null || value != 0F) {
              Zoom = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request the current position of a ptz.
  /// </summary>
  public sealed partial class GetPtzPositionRequest : pb::IMessage<GetPtzPositionRequest> {
    private static readonly pb::MessageParser<GetPtzPositionRequest> _parser = new pb::MessageParser<GetPtzPositionRequest>(() => new GetPtzPositionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPtzPositionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionRequest(GetPtzPositionRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      ptz_ = other.ptz_ != null ? other.ptz_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionRequest Clone() {
      return new GetPtzPositionRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ptz" field.</summary>
    public const int PtzFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzDescription ptz_;
    /// <summary>
    /// Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription Ptz {
      get { return ptz_; }
      set {
        ptz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPtzPositionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPtzPositionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Ptz, other.Ptz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ptz_ != null) hash ^= Ptz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ptz_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ptz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ptz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPtzPositionRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ptz_ != null) {
        if (ptz_ == null) {
          Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
        }
        Ptz.MergeFrom(other.Ptz);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (ptz_ == null) {
              Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
            }
            input.ReadMessage(Ptz);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provides the current measured position.
  /// </summary>
  public sealed partial class GetPtzPositionResponse : pb::IMessage<GetPtzPositionResponse> {
    private static readonly pb::MessageParser<GetPtzPositionResponse> _parser = new pb::MessageParser<GetPtzPositionResponse>(() => new GetPtzPositionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPtzPositionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionResponse(GetPtzPositionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzPositionResponse Clone() {
      return new GetPtzPositionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzPosition position_;
    /// <summary>
    /// Current position of the mechanism.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPtzPositionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPtzPositionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPtzPositionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request the velocity of a ptz
  /// </summary>
  public sealed partial class GetPtzVelocityRequest : pb::IMessage<GetPtzVelocityRequest> {
    private static readonly pb::MessageParser<GetPtzVelocityRequest> _parser = new pb::MessageParser<GetPtzVelocityRequest>(() => new GetPtzVelocityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPtzVelocityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityRequest(GetPtzVelocityRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      ptz_ = other.ptz_ != null ? other.ptz_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityRequest Clone() {
      return new GetPtzVelocityRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ptz" field.</summary>
    public const int PtzFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzDescription ptz_;
    /// <summary>
    /// Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzDescription Ptz {
      get { return ptz_; }
      set {
        ptz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPtzVelocityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPtzVelocityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Ptz, other.Ptz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ptz_ != null) hash ^= Ptz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ptz_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ptz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ptz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ptz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPtzVelocityRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ptz_ != null) {
        if (ptz_ == null) {
          Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
        }
        Ptz.MergeFrom(other.Ptz);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (ptz_ == null) {
              Ptz = new global::Bosdyn.Api.SpotCam.PtzDescription();
            }
            input.ReadMessage(Ptz);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provides the current measured velocity.
  /// </summary>
  public sealed partial class GetPtzVelocityResponse : pb::IMessage<GetPtzVelocityResponse> {
    private static readonly pb::MessageParser<GetPtzVelocityResponse> _parser = new pb::MessageParser<GetPtzVelocityResponse>(() => new GetPtzVelocityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPtzVelocityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityResponse(GetPtzVelocityResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPtzVelocityResponse Clone() {
      return new GetPtzVelocityResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzVelocity velocity_;
    /// <summary>
    /// Current velocity of the mechanism.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzVelocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPtzVelocityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPtzVelocityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPtzVelocityResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request all available ptzs on the SpotCam.
  /// </summary>
  public sealed partial class ListPtzRequest : pb::IMessage<ListPtzRequest> {
    private static readonly pb::MessageParser<ListPtzRequest> _parser = new pb::MessageParser<ListPtzRequest>(() => new ListPtzRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPtzRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzRequest(ListPtzRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzRequest Clone() {
      return new ListPtzRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPtzRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPtzRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPtzRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provide all available ptz on the SpotCam.
  /// </summary>
  public sealed partial class ListPtzResponse : pb::IMessage<ListPtzResponse> {
    private static readonly pb::MessageParser<ListPtzResponse> _parser = new pb::MessageParser<ListPtzResponse>(() => new ListPtzResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPtzResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzResponse(ListPtzResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      ptzs_ = other.ptzs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPtzResponse Clone() {
      return new ListPtzResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ptzs" field.</summary>
    public const int PtzsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SpotCam.PtzDescription> _repeated_ptzs_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SpotCam.PtzDescription.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SpotCam.PtzDescription> ptzs_ = new pbc::RepeatedField<global::Bosdyn.Api.SpotCam.PtzDescription>();
    /// <summary>
    /// List of ptzs, real and virtual.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SpotCam.PtzDescription> Ptzs {
      get { return ptzs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPtzResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPtzResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!ptzs_.Equals(other.ptzs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= ptzs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      ptzs_.WriteTo(output, _repeated_ptzs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += ptzs_.CalculateSize(_repeated_ptzs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPtzResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      ptzs_.Add(other.ptzs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            ptzs_.AddEntriesFrom(input, _repeated_ptzs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command the ptz to move to a position.
  /// </summary>
  public sealed partial class SetPtzPositionRequest : pb::IMessage<SetPtzPositionRequest> {
    private static readonly pb::MessageParser<SetPtzPositionRequest> _parser = new pb::MessageParser<SetPtzPositionRequest>(() => new SetPtzPositionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPtzPositionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionRequest(SetPtzPositionRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionRequest Clone() {
      return new SetPtzPositionRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzPosition position_;
    /// <summary>
    /// Desired position to achieve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPtzPositionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPtzPositionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPtzPositionRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of a SetPtzPositionRequest.
  /// </summary>
  public sealed partial class SetPtzPositionResponse : pb::IMessage<SetPtzPositionResponse> {
    private static readonly pb::MessageParser<SetPtzPositionResponse> _parser = new pb::MessageParser<SetPtzPositionResponse>(() => new SetPtzPositionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPtzPositionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionResponse(SetPtzPositionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzPositionResponse Clone() {
      return new SetPtzPositionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzPosition position_;
    /// <summary>
    /// Applied desired position.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPtzPositionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPtzPositionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPtzPositionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Bosdyn.Api.SpotCam.PtzPosition();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command a velocity for a ptz.
  /// </summary>
  public sealed partial class SetPtzVelocityRequest : pb::IMessage<SetPtzVelocityRequest> {
    private static readonly pb::MessageParser<SetPtzVelocityRequest> _parser = new pb::MessageParser<SetPtzVelocityRequest>(() => new SetPtzVelocityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPtzVelocityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityRequest(SetPtzVelocityRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityRequest Clone() {
      return new SetPtzVelocityRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzVelocity velocity_;
    /// <summary>
    /// Desired velocity to achieve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzVelocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPtzVelocityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPtzVelocityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPtzVelocityRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of a SetPtzVelocityRequest.
  /// </summary>
  public sealed partial class SetPtzVelocityResponse : pb::IMessage<SetPtzVelocityResponse> {
    private static readonly pb::MessageParser<SetPtzVelocityResponse> _parser = new pb::MessageParser<SetPtzVelocityResponse>(() => new SetPtzVelocityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPtzVelocityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityResponse(SetPtzVelocityResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPtzVelocityResponse Clone() {
      return new SetPtzVelocityResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.PtzVelocity velocity_;
    /// <summary>
    /// Applied desired position.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.PtzVelocity Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPtzVelocityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPtzVelocityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (velocity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Velocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPtzVelocityResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (velocity_ == null) {
              Velocity = new global::Bosdyn.Api.SpotCam.PtzVelocity();
            }
            input.ReadMessage(Velocity);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command to reset PTZ autofocus
  /// </summary>
  public sealed partial class InitializeLensRequest : pb::IMessage<InitializeLensRequest> {
    private static readonly pb::MessageParser<InitializeLensRequest> _parser = new pb::MessageParser<InitializeLensRequest>(() => new InitializeLensRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeLensRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensRequest(InitializeLensRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensRequest Clone() {
      return new InitializeLensRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeLensRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeLensRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeLensRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of a InitializeLensRequest.
  /// </summary>
  public sealed partial class InitializeLensResponse : pb::IMessage<InitializeLensResponse> {
    private static readonly pb::MessageParser<InitializeLensResponse> _parser = new pb::MessageParser<InitializeLensResponse>(() => new InitializeLensResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeLensResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.PtzReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensResponse(InitializeLensResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeLensResponse Clone() {
      return new InitializeLensResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeLensResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeLensResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeLensResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
