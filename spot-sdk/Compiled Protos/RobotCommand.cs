// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/robot_command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/robot_command.proto</summary>
  public static partial class RobotCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/robot_command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQcm90b3Mvcm9ib3RfY29tbWFuZC5wcm90bxIKYm9zZHluLmFwaRoeUHJv",
            "dG9zL2Z1bGxfYm9keV9jb21tYW5kLnByb3RvGhNQcm90b3MvaGVhZGVyLnBy",
            "b3RvGhJQcm90b3MvbGVhc2UucHJvdG8aHVByb3Rvcy9tb2JpbGl0eV9jb21t",
            "YW5kLnByb3RvGiFQcm90b3Mvc3luY2hyb25pemVkX2NvbW1hbmQucHJvdG8i",
            "6QEKDFJvYm90Q29tbWFuZBJAChFmdWxsX2JvZHlfY29tbWFuZBgBIAEoCzIj",
            "LmJvc2R5bi5hcGkuRnVsbEJvZHlDb21tYW5kLlJlcXVlc3RIABJHChRzeW5j",
            "aHJvbml6ZWRfY29tbWFuZBgDIAEoCzInLmJvc2R5bi5hcGkuU3luY2hyb25p",
            "emVkQ29tbWFuZC5SZXF1ZXN0SAASQwoQbW9iaWxpdHlfY29tbWFuZBgCIAEo",
            "CzIjLmJvc2R5bi5hcGkuTW9iaWxpdHlDb21tYW5kLlJlcXVlc3RCAhgBSABC",
            "CQoHY29tbWFuZCL3AQoUUm9ib3RDb21tYW5kRmVlZGJhY2sSQgoSZnVsbF9i",
            "b2R5X2ZlZWRiYWNrGAIgASgLMiQuYm9zZHluLmFwaS5GdWxsQm9keUNvbW1h",
            "bmQuRmVlZGJhY2tIABJJChVzeW5jaHJvbml6ZWRfZmVlZGJhY2sYAyABKAsy",
            "KC5ib3NkeW4uYXBpLlN5bmNocm9uaXplZENvbW1hbmQuRmVlZGJhY2tIABJF",
            "ChFtb2JpbGl0eV9mZWVkYmFjaxgBIAEoCzIkLmJvc2R5bi5hcGkuTW9iaWxp",
            "dHlDb21tYW5kLkZlZWRiYWNrQgIYAUgAQgkKB2NvbW1hbmQipwEKE1JvYm90",
            "Q29tbWFuZFJlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5S",
            "ZXF1ZXN0SGVhZGVyEiAKBWxlYXNlGAIgASgLMhEuYm9zZHluLmFwaS5MZWFz",
            "ZRIpCgdjb21tYW5kGAMgASgLMhguYm9zZHluLmFwaS5Sb2JvdENvbW1hbmQS",
            "GAoQY2xvY2tfaWRlbnRpZmllchgEIAEoCSLSAwoUUm9ib3RDb21tYW5kUmVz",
            "cG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhl",
            "YWRlchI0ChBsZWFzZV91c2VfcmVzdWx0GAIgASgLMhouYm9zZHluLmFwaS5M",
            "ZWFzZVVzZVJlc3VsdBI3CgZzdGF0dXMYAyABKA4yJy5ib3NkeW4uYXBpLlJv",
            "Ym90Q29tbWFuZFJlc3BvbnNlLlN0YXR1cxIPCgdtZXNzYWdlGAQgASgJEhgK",
            "EHJvYm90X2NvbW1hbmRfaWQYBSABKA0i8wEKBlN0YXR1cxISCg5TVEFUVVNf",
            "VU5LTk9XThAAEg0KCVNUQVRVU19PSxABEhoKFlNUQVRVU19JTlZBTElEX1JF",
            "UVVFU1QQAhIWChJTVEFUVVNfVU5TVVBQT1JURUQQAxIWChJTVEFUVVNfTk9f",
            "VElNRVNZTkMQBBISCg5TVEFUVVNfRVhQSVJFRBAFEhYKElNUQVRVU19UT09f",
            "RElTVEFOVBAGEhkKFVNUQVRVU19OT1RfUE9XRVJFRF9PThAHEhkKFVNUQVRV",
            "U19CRUhBVklPUl9GQVVMVBAJEhgKFFNUQVRVU19VTktOT1dOX0ZSQU1FEAgi",
            "YgobUm9ib3RDb21tYW5kRmVlZGJhY2tSZXF1ZXN0EikKBmhlYWRlchgBIAEo",
            "CzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchIYChByb2JvdF9jb21tYW5k",
            "X2lkGAIgASgNIpoDChxSb2JvdENvbW1hbmRGZWVkYmFja1Jlc3BvbnNlEioK",
            "BmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISNAoQ",
            "bGVhc2VfdXNlX3Jlc3VsdBgFIAEoCzIaLmJvc2R5bi5hcGkuTGVhc2VVc2VS",
            "ZXN1bHQSQwoGc3RhdHVzGAIgASgOMi8uYm9zZHluLmFwaS5Sb2JvdENvbW1h",
            "bmRGZWVkYmFja1Jlc3BvbnNlLlN0YXR1c0ICGAESEwoHbWVzc2FnZRgDIAEo",
            "CUICGAESMgoIZmVlZGJhY2sYBCABKAsyIC5ib3NkeW4uYXBpLlJvYm90Q29t",
            "bWFuZEZlZWRiYWNrIokBCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABIV",
            "ChFTVEFUVVNfUFJPQ0VTU0lORxABEh0KGVNUQVRVU19DT01NQU5EX09WRVJS",
            "SURERU4QAhIcChhTVEFUVVNfQ09NTUFORF9USU1FRF9PVVQQAxIXChNTVEFU",
            "VVNfUk9CT1RfRlJPWkVOEAQigwEKGUNsZWFyQmVoYXZpb3JGYXVsdFJlcXVl",
            "c3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVy",
            "EiAKBWxlYXNlGAIgASgLMhEuYm9zZHluLmFwaS5MZWFzZRIZChFiZWhhdmlv",
            "cl9mYXVsdF9pZBgDIAEoDSKHAgoaQ2xlYXJCZWhhdmlvckZhdWx0UmVzcG9u",
            "c2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRl",
            "chI0ChBsZWFzZV91c2VfcmVzdWx0GAIgASgLMhouYm9zZHluLmFwaS5MZWFz",
            "ZVVzZVJlc3VsdBI9CgZzdGF0dXMYAyABKA4yLS5ib3NkeW4uYXBpLkNsZWFy",
            "QmVoYXZpb3JGYXVsdFJlc3BvbnNlLlN0YXR1cyJICgZTdGF0dXMSEgoOU1RB",
            "VFVTX1VOS05PV04QABISCg5TVEFUVVNfQ0xFQVJFRBABEhYKElNUQVRVU19O",
            "T1RfQ0xFQVJFRBACQhNCEVJvYm90Q29tbWFuZFByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.FullBodyCommandReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.LeaseReflection.Descriptor, global::Bosdyn.Api.MobilityCommandReflection.Descriptor, global::Bosdyn.Api.SynchronizedCommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommand), global::Bosdyn.Api.RobotCommand.Parser, new[]{ "FullBodyCommand", "SynchronizedCommand", "MobilityCommand" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommandFeedback), global::Bosdyn.Api.RobotCommandFeedback.Parser, new[]{ "FullBodyFeedback", "SynchronizedFeedback", "MobilityFeedback" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommandRequest), global::Bosdyn.Api.RobotCommandRequest.Parser, new[]{ "Header", "Lease", "Command", "ClockIdentifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommandResponse), global::Bosdyn.Api.RobotCommandResponse.Parser, new[]{ "Header", "LeaseUseResult", "Status", "Message", "RobotCommandId" }, null, new[]{ typeof(global::Bosdyn.Api.RobotCommandResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommandFeedbackRequest), global::Bosdyn.Api.RobotCommandFeedbackRequest.Parser, new[]{ "Header", "RobotCommandId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotCommandFeedbackResponse), global::Bosdyn.Api.RobotCommandFeedbackResponse.Parser, new[]{ "Header", "LeaseUseResult", "Status", "Message", "Feedback" }, null, new[]{ typeof(global::Bosdyn.Api.RobotCommandFeedbackResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClearBehaviorFaultRequest), global::Bosdyn.Api.ClearBehaviorFaultRequest.Parser, new[]{ "Header", "Lease", "BehaviorFaultId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClearBehaviorFaultResponse), global::Bosdyn.Api.ClearBehaviorFaultResponse.Parser, new[]{ "Header", "LeaseUseResult", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.ClearBehaviorFaultResponse.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A command for a robot to execute.
  /// The server decides if a set of commands is valid for a given robot and configuration.
  /// </summary>
  public sealed partial class RobotCommand : pb::IMessage<RobotCommand> {
    private static readonly pb::MessageParser<RobotCommand> _parser = new pb::MessageParser<RobotCommand>(() => new RobotCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommand(RobotCommand other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.FullBodyCommand:
          FullBodyCommand = other.FullBodyCommand.Clone();
          break;
        case CommandOneofCase.SynchronizedCommand:
          SynchronizedCommand = other.SynchronizedCommand.Clone();
          break;
        case CommandOneofCase.MobilityCommand:
          MobilityCommand = other.MobilityCommand.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommand Clone() {
      return new RobotCommand(this);
    }

    /// <summary>Field number for the "full_body_command" field.</summary>
    public const int FullBodyCommandFieldNumber = 1;
    /// <summary>
    /// Commands which require control of entire robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FullBodyCommand.Types.Request FullBodyCommand {
      get { return commandCase_ == CommandOneofCase.FullBodyCommand ? (global::Bosdyn.Api.FullBodyCommand.Types.Request) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.FullBodyCommand;
      }
    }

    /// <summary>Field number for the "synchronized_command" field.</summary>
    public const int SynchronizedCommandFieldNumber = 3;
    /// <summary>
    /// A synchronized command, for partial or full control of robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SynchronizedCommand.Types.Request SynchronizedCommand {
      get { return commandCase_ == CommandOneofCase.SynchronizedCommand ? (global::Bosdyn.Api.SynchronizedCommand.Types.Request) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SynchronizedCommand;
      }
    }

    /// <summary>Field number for the "mobility_command" field.</summary>
    public const int MobilityCommandFieldNumber = 2;
    /// <summary>
    /// *** Deprecation Warning ***
    /// DEPRECATED as of 2.1.0: A mobility command for a robot to execute.
    /// The following fields will be deprecated and moved to 'reserved' in a future release.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MobilityCommand.Types.Request MobilityCommand {
      get { return commandCase_ == CommandOneofCase.MobilityCommand ? (global::Bosdyn.Api.MobilityCommand.Types.Request) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MobilityCommand;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      FullBodyCommand = 1,
      SynchronizedCommand = 3,
      MobilityCommand = 2,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FullBodyCommand, other.FullBodyCommand)) return false;
      if (!object.Equals(SynchronizedCommand, other.SynchronizedCommand)) return false;
      if (!object.Equals(MobilityCommand, other.MobilityCommand)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.FullBodyCommand) hash ^= FullBodyCommand.GetHashCode();
      if (commandCase_ == CommandOneofCase.SynchronizedCommand) hash ^= SynchronizedCommand.GetHashCode();
      if (commandCase_ == CommandOneofCase.MobilityCommand) hash ^= MobilityCommand.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.FullBodyCommand) {
        output.WriteRawTag(10);
        output.WriteMessage(FullBodyCommand);
      }
      if (commandCase_ == CommandOneofCase.MobilityCommand) {
        output.WriteRawTag(18);
        output.WriteMessage(MobilityCommand);
      }
      if (commandCase_ == CommandOneofCase.SynchronizedCommand) {
        output.WriteRawTag(26);
        output.WriteMessage(SynchronizedCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.FullBodyCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FullBodyCommand);
      }
      if (commandCase_ == CommandOneofCase.SynchronizedCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizedCommand);
      }
      if (commandCase_ == CommandOneofCase.MobilityCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MobilityCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommand other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.FullBodyCommand:
          if (FullBodyCommand == null) {
            FullBodyCommand = new global::Bosdyn.Api.FullBodyCommand.Types.Request();
          }
          FullBodyCommand.MergeFrom(other.FullBodyCommand);
          break;
        case CommandOneofCase.SynchronizedCommand:
          if (SynchronizedCommand == null) {
            SynchronizedCommand = new global::Bosdyn.Api.SynchronizedCommand.Types.Request();
          }
          SynchronizedCommand.MergeFrom(other.SynchronizedCommand);
          break;
        case CommandOneofCase.MobilityCommand:
          if (MobilityCommand == null) {
            MobilityCommand = new global::Bosdyn.Api.MobilityCommand.Types.Request();
          }
          MobilityCommand.MergeFrom(other.MobilityCommand);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bosdyn.Api.FullBodyCommand.Types.Request subBuilder = new global::Bosdyn.Api.FullBodyCommand.Types.Request();
            if (commandCase_ == CommandOneofCase.FullBodyCommand) {
              subBuilder.MergeFrom(FullBodyCommand);
            }
            input.ReadMessage(subBuilder);
            FullBodyCommand = subBuilder;
            break;
          }
          case 18: {
            global::Bosdyn.Api.MobilityCommand.Types.Request subBuilder = new global::Bosdyn.Api.MobilityCommand.Types.Request();
            if (commandCase_ == CommandOneofCase.MobilityCommand) {
              subBuilder.MergeFrom(MobilityCommand);
            }
            input.ReadMessage(subBuilder);
            MobilityCommand = subBuilder;
            break;
          }
          case 26: {
            global::Bosdyn.Api.SynchronizedCommand.Types.Request subBuilder = new global::Bosdyn.Api.SynchronizedCommand.Types.Request();
            if (commandCase_ == CommandOneofCase.SynchronizedCommand) {
              subBuilder.MergeFrom(SynchronizedCommand);
            }
            input.ReadMessage(subBuilder);
            SynchronizedCommand = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command specific feedback. Distance to goal, estimated time remaining, probability of
  /// success, etc. Note that the feedback should directly mirror the command request.
  /// </summary>
  public sealed partial class RobotCommandFeedback : pb::IMessage<RobotCommandFeedback> {
    private static readonly pb::MessageParser<RobotCommandFeedback> _parser = new pb::MessageParser<RobotCommandFeedback>(() => new RobotCommandFeedback());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommandFeedback> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedback() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedback(RobotCommandFeedback other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.FullBodyFeedback:
          FullBodyFeedback = other.FullBodyFeedback.Clone();
          break;
        case CommandOneofCase.SynchronizedFeedback:
          SynchronizedFeedback = other.SynchronizedFeedback.Clone();
          break;
        case CommandOneofCase.MobilityFeedback:
          MobilityFeedback = other.MobilityFeedback.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedback Clone() {
      return new RobotCommandFeedback(this);
    }

    /// <summary>Field number for the "full_body_feedback" field.</summary>
    public const int FullBodyFeedbackFieldNumber = 2;
    /// <summary>
    /// Commands which require control of entire robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FullBodyCommand.Types.Feedback FullBodyFeedback {
      get { return commandCase_ == CommandOneofCase.FullBodyFeedback ? (global::Bosdyn.Api.FullBodyCommand.Types.Feedback) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.FullBodyFeedback;
      }
    }

    /// <summary>Field number for the "synchronized_feedback" field.</summary>
    public const int SynchronizedFeedbackFieldNumber = 3;
    /// <summary>
    /// A synchronized command, for partial or full control of robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SynchronizedCommand.Types.Feedback SynchronizedFeedback {
      get { return commandCase_ == CommandOneofCase.SynchronizedFeedback ? (global::Bosdyn.Api.SynchronizedCommand.Types.Feedback) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SynchronizedFeedback;
      }
    }

    /// <summary>Field number for the "mobility_feedback" field.</summary>
    public const int MobilityFeedbackFieldNumber = 1;
    /// <summary>
    /// *** Deprecation Warning ***
    /// DEPRECATED as of 2.1.0: Command to control mobility system of a robot.
    /// The following fields will be deprecated and moved to 'reserved' in a future release.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MobilityCommand.Types.Feedback MobilityFeedback {
      get { return commandCase_ == CommandOneofCase.MobilityFeedback ? (global::Bosdyn.Api.MobilityCommand.Types.Feedback) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MobilityFeedback;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      FullBodyFeedback = 2,
      SynchronizedFeedback = 3,
      MobilityFeedback = 1,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommandFeedback);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommandFeedback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FullBodyFeedback, other.FullBodyFeedback)) return false;
      if (!object.Equals(SynchronizedFeedback, other.SynchronizedFeedback)) return false;
      if (!object.Equals(MobilityFeedback, other.MobilityFeedback)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.FullBodyFeedback) hash ^= FullBodyFeedback.GetHashCode();
      if (commandCase_ == CommandOneofCase.SynchronizedFeedback) hash ^= SynchronizedFeedback.GetHashCode();
      if (commandCase_ == CommandOneofCase.MobilityFeedback) hash ^= MobilityFeedback.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.MobilityFeedback) {
        output.WriteRawTag(10);
        output.WriteMessage(MobilityFeedback);
      }
      if (commandCase_ == CommandOneofCase.FullBodyFeedback) {
        output.WriteRawTag(18);
        output.WriteMessage(FullBodyFeedback);
      }
      if (commandCase_ == CommandOneofCase.SynchronizedFeedback) {
        output.WriteRawTag(26);
        output.WriteMessage(SynchronizedFeedback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.FullBodyFeedback) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FullBodyFeedback);
      }
      if (commandCase_ == CommandOneofCase.SynchronizedFeedback) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizedFeedback);
      }
      if (commandCase_ == CommandOneofCase.MobilityFeedback) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MobilityFeedback);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommandFeedback other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.FullBodyFeedback:
          if (FullBodyFeedback == null) {
            FullBodyFeedback = new global::Bosdyn.Api.FullBodyCommand.Types.Feedback();
          }
          FullBodyFeedback.MergeFrom(other.FullBodyFeedback);
          break;
        case CommandOneofCase.SynchronizedFeedback:
          if (SynchronizedFeedback == null) {
            SynchronizedFeedback = new global::Bosdyn.Api.SynchronizedCommand.Types.Feedback();
          }
          SynchronizedFeedback.MergeFrom(other.SynchronizedFeedback);
          break;
        case CommandOneofCase.MobilityFeedback:
          if (MobilityFeedback == null) {
            MobilityFeedback = new global::Bosdyn.Api.MobilityCommand.Types.Feedback();
          }
          MobilityFeedback.MergeFrom(other.MobilityFeedback);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bosdyn.Api.MobilityCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.MobilityCommand.Types.Feedback();
            if (commandCase_ == CommandOneofCase.MobilityFeedback) {
              subBuilder.MergeFrom(MobilityFeedback);
            }
            input.ReadMessage(subBuilder);
            MobilityFeedback = subBuilder;
            break;
          }
          case 18: {
            global::Bosdyn.Api.FullBodyCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.FullBodyCommand.Types.Feedback();
            if (commandCase_ == CommandOneofCase.FullBodyFeedback) {
              subBuilder.MergeFrom(FullBodyFeedback);
            }
            input.ReadMessage(subBuilder);
            FullBodyFeedback = subBuilder;
            break;
          }
          case 26: {
            global::Bosdyn.Api.SynchronizedCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.SynchronizedCommand.Types.Feedback();
            if (commandCase_ == CommandOneofCase.SynchronizedFeedback) {
              subBuilder.MergeFrom(SynchronizedFeedback);
            }
            input.ReadMessage(subBuilder);
            SynchronizedFeedback = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A RobotCommand request message includes the lease and command as well as a clock
  /// identifier to ensure timesync when issuing commands with a fixed length.
  /// </summary>
  public sealed partial class RobotCommandRequest : pb::IMessage<RobotCommandRequest> {
    private static readonly pb::MessageParser<RobotCommandRequest> _parser = new pb::MessageParser<RobotCommandRequest>(() => new RobotCommandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandRequest(RobotCommandRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      command_ = other.command_ != null ? other.command_.Clone() : null;
      clockIdentifier_ = other.clockIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandRequest Clone() {
      return new RobotCommandRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to show ownership of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private global::Bosdyn.Api.RobotCommand command_;
    /// <summary>
    /// A command for a robot to execute. A command can be comprised of several subcommands.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotCommand Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "clock_identifier" field.</summary>
    public const int ClockIdentifierFieldNumber = 4;
    private string clockIdentifier_ = "";
    /// <summary>
    /// Identifier provided by the time sync service to verify time sync between robot and client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClockIdentifier {
      get { return clockIdentifier_; }
      set {
        clockIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(Command, other.Command)) return false;
      if (ClockIdentifier != other.ClockIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (command_ != null) hash ^= Command.GetHashCode();
      if (ClockIdentifier.Length != 0) hash ^= ClockIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (command_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Command);
      }
      if (ClockIdentifier.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClockIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (command_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
      }
      if (ClockIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClockIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.command_ != null) {
        if (command_ == null) {
          Command = new global::Bosdyn.Api.RobotCommand();
        }
        Command.MergeFrom(other.Command);
      }
      if (other.ClockIdentifier.Length != 0) {
        ClockIdentifier = other.ClockIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 26: {
            if (command_ == null) {
              Command = new global::Bosdyn.Api.RobotCommand();
            }
            input.ReadMessage(Command);
            break;
          }
          case 34: {
            ClockIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotCommand response message contains a robot command id that can be used to poll the
  /// robot command service for feedback on the state of the command.
  /// </summary>
  public sealed partial class RobotCommandResponse : pb::IMessage<RobotCommandResponse> {
    private static readonly pb::MessageParser<RobotCommandResponse> _parser = new pb::MessageParser<RobotCommandResponse>(() => new RobotCommandResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandResponse(RobotCommandResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      status_ = other.status_;
      message_ = other.message_;
      robotCommandId_ = other.robotCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandResponse Clone() {
      return new RobotCommandResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 2;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Details about how the lease was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Bosdyn.Api.RobotCommandResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for a request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotCommandResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    /// Human-readable error description.  Not for programmatic analysis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robot_command_id" field.</summary>
    public const int RobotCommandIdFieldNumber = 5;
    private uint robotCommandId_;
    /// <summary>
    /// Unique identifier for the command, If empty, command was not accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotCommandId {
      get { return robotCommandId_; }
      set {
        robotCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (RobotCommandId != other.RobotCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (RobotCommandId != 0) hash ^= RobotCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaseUseResult);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (RobotCommandId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RobotCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RobotCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommandResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.RobotCommandId != 0) {
        RobotCommandId = other.RobotCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
          case 24: {
            Status = (global::Bosdyn.Api.RobotCommandResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 40: {
            RobotCommandId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotCommandResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// An unknown / unexpected error occurred.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Request was accepted.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// [Programming Error] Request was invalid / malformed in some way.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_REQUEST")] InvalidRequest = 2,
        /// <summary>
        /// [Programming Error] The robot does not understand this command.
        /// </summary>
        [pbr::OriginalName("STATUS_UNSUPPORTED")] Unsupported = 3,
        /// <summary>
        /// [Timesync Error] Client has not done timesync with robot.
        /// </summary>
        [pbr::OriginalName("STATUS_NO_TIMESYNC")] NoTimesync = 4,
        /// <summary>
        /// [Timesync Error] The command was received after its end_time had already passed.
        /// </summary>
        [pbr::OriginalName("STATUS_EXPIRED")] Expired = 5,
        /// <summary>
        /// [Timesync Error] The command end time was too far in the future.
        /// </summary>
        [pbr::OriginalName("STATUS_TOO_DISTANT")] TooDistant = 6,
        /// <summary>
        /// [Hardware Error] The robot must be powered on to accept a command.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_POWERED_ON")] NotPoweredOn = 7,
        /// <summary>
        /// [Robot State Error] The robot must not have behavior faults.
        /// </summary>
        [pbr::OriginalName("STATUS_BEHAVIOR_FAULT")] BehaviorFault = 9,
        /// <summary>
        /// [Frame Error] The frame_name for a command was not a known frame.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN_FRAME")] UnknownFrame = 8,
      }

    }
    #endregion

  }

  /// <summary>
  /// The RobotCommandFeedback request message, which can get the feedback for a specific
  /// robot command id number.
  /// </summary>
  public sealed partial class RobotCommandFeedbackRequest : pb::IMessage<RobotCommandFeedbackRequest> {
    private static readonly pb::MessageParser<RobotCommandFeedbackRequest> _parser = new pb::MessageParser<RobotCommandFeedbackRequest>(() => new RobotCommandFeedbackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommandFeedbackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackRequest(RobotCommandFeedbackRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      robotCommandId_ = other.robotCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackRequest Clone() {
      return new RobotCommandFeedbackRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "robot_command_id" field.</summary>
    public const int RobotCommandIdFieldNumber = 2;
    private uint robotCommandId_;
    /// <summary>
    /// Unique identifier for the command, provided by StartRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotCommandId {
      get { return robotCommandId_; }
      set {
        robotCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommandFeedbackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommandFeedbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RobotCommandId != other.RobotCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RobotCommandId != 0) hash ^= RobotCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RobotCommandId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RobotCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RobotCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommandFeedbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RobotCommandId != 0) {
        RobotCommandId = other.RobotCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            RobotCommandId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotCommandFeedback response message, which contains the progress of the robot command.
  /// </summary>
  public sealed partial class RobotCommandFeedbackResponse : pb::IMessage<RobotCommandFeedbackResponse> {
    private static readonly pb::MessageParser<RobotCommandFeedbackResponse> _parser = new pb::MessageParser<RobotCommandFeedbackResponse>(() => new RobotCommandFeedbackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotCommandFeedbackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackResponse(RobotCommandFeedbackResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      status_ = other.status_;
      message_ = other.message_;
      feedback_ = other.feedback_ != null ? other.feedback_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotCommandFeedbackResponse Clone() {
      return new RobotCommandFeedbackResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 5;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Details about how the lease was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.RobotCommandFeedbackResponse.Types.Status status_ = 0;
    /// <summary>
    /// DEPRECATED as of 2.1.0: General status whether or not command is still processing.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotCommandFeedbackResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// DEPRECATED as of 2.1.0: Human-readable status message.  Not for programmatic analysis.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feedback" field.</summary>
    public const int FeedbackFieldNumber = 4;
    private global::Bosdyn.Api.RobotCommandFeedback feedback_;
    /// <summary>
    /// Command specific feedback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotCommandFeedback Feedback {
      get { return feedback_; }
      set {
        feedback_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotCommandFeedbackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotCommandFeedbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Feedback, other.Feedback)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (feedback_ != null) hash ^= Feedback.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (feedback_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Feedback);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LeaseUseResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (feedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feedback);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotCommandFeedbackResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.feedback_ != null) {
        if (feedback_ == null) {
          Feedback = new global::Bosdyn.Api.RobotCommandFeedback();
        }
        Feedback.MergeFrom(other.Feedback);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.RobotCommandFeedbackResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (feedback_ == null) {
              Feedback = new global::Bosdyn.Api.RobotCommandFeedback();
            }
            input.ReadMessage(Feedback);
            break;
          }
          case 42: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotCommandFeedbackResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// Status enum is DEPRECATED as of 2.1.0. Behavior execution is in an unknown / unexpected state.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Status enum is DEPRECATED as of 2.1.0. The robot is actively working on the command
        /// </summary>
        [pbr::OriginalName("STATUS_PROCESSING")] Processing = 1,
        /// <summary>
        /// Status enum is DEPRECATED as of 2.1.0. The command was replaced by a new command
        /// </summary>
        [pbr::OriginalName("STATUS_COMMAND_OVERRIDDEN")] CommandOverridden = 2,
        /// <summary>
        /// Status enum is DEPRECATED as of 2.1.0. The command expired
        /// </summary>
        [pbr::OriginalName("STATUS_COMMAND_TIMED_OUT")] CommandTimedOut = 3,
        /// <summary>
        /// Status enum is DEPRECATED as of 2.1.0. The robot is in an unsafe state, and will only respond to known safe commands.
        /// </summary>
        [pbr::OriginalName("STATUS_ROBOT_FROZEN")] RobotFrozen = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// A ClearBehaviorFault request message has the associated behavior fault id to be cleared.
  /// </summary>
  public sealed partial class ClearBehaviorFaultRequest : pb::IMessage<ClearBehaviorFaultRequest> {
    private static readonly pb::MessageParser<ClearBehaviorFaultRequest> _parser = new pb::MessageParser<ClearBehaviorFaultRequest>(() => new ClearBehaviorFaultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBehaviorFaultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultRequest(ClearBehaviorFaultRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      behaviorFaultId_ = other.behaviorFaultId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultRequest Clone() {
      return new ClearBehaviorFaultRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to show ownership of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "behavior_fault_id" field.</summary>
    public const int BehaviorFaultIdFieldNumber = 3;
    private uint behaviorFaultId_;
    /// <summary>
    /// Unique identifier for the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BehaviorFaultId {
      get { return behaviorFaultId_; }
      set {
        behaviorFaultId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBehaviorFaultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBehaviorFaultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (BehaviorFaultId != other.BehaviorFaultId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (BehaviorFaultId != 0) hash ^= BehaviorFaultId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (BehaviorFaultId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BehaviorFaultId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (BehaviorFaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BehaviorFaultId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBehaviorFaultRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.BehaviorFaultId != 0) {
        BehaviorFaultId = other.BehaviorFaultId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 24: {
            BehaviorFaultId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A ClearBehaviorFault response message has status indicating whether the service cleared
  /// the fault or not.
  /// </summary>
  public sealed partial class ClearBehaviorFaultResponse : pb::IMessage<ClearBehaviorFaultResponse> {
    private static readonly pb::MessageParser<ClearBehaviorFaultResponse> _parser = new pb::MessageParser<ClearBehaviorFaultResponse>(() => new ClearBehaviorFaultResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBehaviorFaultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotCommandReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultResponse(ClearBehaviorFaultResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBehaviorFaultResponse Clone() {
      return new ClearBehaviorFaultResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 2;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Details about how the lease was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Bosdyn.Api.ClearBehaviorFaultResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for a request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ClearBehaviorFaultResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBehaviorFaultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBehaviorFaultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaseUseResult);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBehaviorFaultResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
          case 24: {
            Status = (global::Bosdyn.Api.ClearBehaviorFaultResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClearBehaviorFaultResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// An unknown / unexpected error occurred.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The BehaviorFault has been cleared.
        /// </summary>
        [pbr::OriginalName("STATUS_CLEARED")] Cleared = 1,
        /// <summary>
        /// The BehaviorFault could not be cleared.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_CLEARED")] NotCleared = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
