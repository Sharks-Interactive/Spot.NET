// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/parameter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/parameter.proto</summary>
  public static partial class ParameterReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/parameter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ParameterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90b3MvcGFyYW1ldGVyLnByb3RvEgpib3NkeW4uYXBpGh5nb29nbGUv",
            "cHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1l",
            "c3RhbXAucHJvdG8ikgIKCVBhcmFtZXRlchINCgVsYWJlbBgBIAEoCRINCgV1",
            "bml0cxgCIAEoCRITCglpbnRfdmFsdWUYAyABKANIABIVCgtmbG9hdF92YWx1",
            "ZRgEIAEoAUgAEi8KCXRpbWVzdGFtcBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXBIABItCghkdXJhdGlvbhgGIAEoCzIZLmdvb2dsZS5wcm90",
            "b2J1Zi5EdXJhdGlvbkgAEhYKDHN0cmluZ192YWx1ZRgHIAEoCUgAEhQKCmJv",
            "b2xfdmFsdWUYCCABKAhIABIUCgp1aW50X3ZhbHVlGAogASgESAASDQoFbm90",
            "ZXMYCSABKAlCCAoGdmFsdWVzQhxCDlBhcmFtZXRlclByb3RvWgpib3NkeW4v",
            "YXBpYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Parameter), global::Bosdyn.Api.Parameter.Parser, new[]{ "Label", "Units", "IntValue", "FloatValue", "Timestamp", "Duration", "StringValue", "BoolValue", "UintValue", "Notes" }, new[]{ "Values" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A generic parameter message used by the robot state service to describe different,
  /// parameterized aspects of the robot.
  /// </summary>
  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ParameterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      label_ = other.label_;
      units_ = other.units_;
      notes_ = other.notes_;
      switch (other.ValuesCase) {
        case ValuesOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValuesOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValuesOneofCase.Timestamp:
          Timestamp = other.Timestamp.Clone();
          break;
        case ValuesOneofCase.Duration:
          Duration = other.Duration.Clone();
          break;
        case ValuesOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValuesOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValuesOneofCase.UintValue:
          UintValue = other.UintValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    /// <summary>
    /// Name of parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private string units_ = "";
    /// <summary>
    /// Units of parameter value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Units {
      get { return units_; }
      set {
        units_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 3;
    /// <summary>
    /// Value of a countable measure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return valuesCase_ == ValuesOneofCase.IntValue ? (long) values_ : 0L; }
      set {
        values_ = value;
        valuesCase_ = ValuesOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 4;
    /// <summary>
    /// Value of a continuous measure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FloatValue {
      get { return valuesCase_ == ValuesOneofCase.FloatValue ? (double) values_ : 0D; }
      set {
        values_ = value;
        valuesCase_ = ValuesOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    /// <summary>
    /// A point in time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return valuesCase_ == ValuesOneofCase.Timestamp ? (global::Google.Protobuf.WellKnownTypes.Timestamp) values_ : null; }
      set {
        values_ = value;
        valuesCase_ = value == null ? ValuesOneofCase.None : ValuesOneofCase.Timestamp;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    /// <summary>
    /// A time duration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return valuesCase_ == ValuesOneofCase.Duration ? (global::Google.Protobuf.WellKnownTypes.Duration) values_ : null; }
      set {
        values_ = value;
        valuesCase_ = value == null ? ValuesOneofCase.None : ValuesOneofCase.Duration;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 7;
    /// <summary>
    /// Value as a string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valuesCase_ == ValuesOneofCase.StringValue ? (string) values_ : ""; }
      set {
        values_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valuesCase_ = ValuesOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 8;
    /// <summary>
    /// Value as true/false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valuesCase_ == ValuesOneofCase.BoolValue ? (bool) values_ : false; }
      set {
        values_ = value;
        valuesCase_ = ValuesOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "uint_value" field.</summary>
    public const int UintValueFieldNumber = 10;
    /// <summary>
    /// Unsigned integer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UintValue {
      get { return valuesCase_ == ValuesOneofCase.UintValue ? (ulong) values_ : 0UL; }
      set {
        values_ = value;
        valuesCase_ = ValuesOneofCase.UintValue;
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 9;
    private string notes_ = "";
    /// <summary>
    /// Description of the parameter or its value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object values_;
    /// <summary>Enum of possible cases for the "values" oneof.</summary>
    public enum ValuesOneofCase {
      None = 0,
      IntValue = 3,
      FloatValue = 4,
      Timestamp = 5,
      Duration = 6,
      StringValue = 7,
      BoolValue = 8,
      UintValue = 10,
    }
    private ValuesOneofCase valuesCase_ = ValuesOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValuesOneofCase ValuesCase {
      get { return valuesCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValues() {
      valuesCase_ = ValuesOneofCase.None;
      values_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Units != other.Units) return false;
      if (IntValue != other.IntValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (UintValue != other.UintValue) return false;
      if (Notes != other.Notes) return false;
      if (ValuesCase != other.ValuesCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Units.Length != 0) hash ^= Units.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.FloatValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FloatValue);
      if (valuesCase_ == ValuesOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.Duration) hash ^= Duration.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valuesCase_ == ValuesOneofCase.UintValue) hash ^= UintValue.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      hash ^= (int) valuesCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Units.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Units);
      }
      if (valuesCase_ == ValuesOneofCase.IntValue) {
        output.WriteRawTag(24);
        output.WriteInt64(IntValue);
      }
      if (valuesCase_ == ValuesOneofCase.FloatValue) {
        output.WriteRawTag(33);
        output.WriteDouble(FloatValue);
      }
      if (valuesCase_ == ValuesOneofCase.Timestamp) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (valuesCase_ == ValuesOneofCase.Duration) {
        output.WriteRawTag(50);
        output.WriteMessage(Duration);
      }
      if (valuesCase_ == ValuesOneofCase.StringValue) {
        output.WriteRawTag(58);
        output.WriteString(StringValue);
      }
      if (valuesCase_ == ValuesOneofCase.BoolValue) {
        output.WriteRawTag(64);
        output.WriteBool(BoolValue);
      }
      if (Notes.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Notes);
      }
      if (valuesCase_ == ValuesOneofCase.UintValue) {
        output.WriteRawTag(80);
        output.WriteUInt64(UintValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Units.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Units);
      }
      if (valuesCase_ == ValuesOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      if (valuesCase_ == ValuesOneofCase.FloatValue) {
        size += 1 + 8;
      }
      if (valuesCase_ == ValuesOneofCase.Timestamp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (valuesCase_ == ValuesOneofCase.Duration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (valuesCase_ == ValuesOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valuesCase_ == ValuesOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valuesCase_ == ValuesOneofCase.UintValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UintValue);
      }
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Units.Length != 0) {
        Units = other.Units;
      }
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      switch (other.ValuesCase) {
        case ValuesOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValuesOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValuesOneofCase.Timestamp:
          if (Timestamp == null) {
            Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Timestamp.MergeFrom(other.Timestamp);
          break;
        case ValuesOneofCase.Duration:
          if (Duration == null) {
            Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Duration.MergeFrom(other.Duration);
          break;
        case ValuesOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValuesOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValuesOneofCase.UintValue:
          UintValue = other.UintValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 18: {
            Units = input.ReadString();
            break;
          }
          case 24: {
            IntValue = input.ReadInt64();
            break;
          }
          case 33: {
            FloatValue = input.ReadDouble();
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (valuesCase_ == ValuesOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (valuesCase_ == ValuesOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 58: {
            StringValue = input.ReadString();
            break;
          }
          case 64: {
            BoolValue = input.ReadBool();
            break;
          }
          case 74: {
            Notes = input.ReadString();
            break;
          }
          case 80: {
            UintValue = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
