// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/payload_registration_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// This service provides a way to register new payloads.
  /// </summary>
  public static partial class PayloadRegistrationService
  {
    static readonly string __ServiceName = "bosdyn.api.PayloadRegistrationService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterPayloadRequest> __Marshaller_bosdyn_api_RegisterPayloadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterPayloadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterPayloadResponse> __Marshaller_bosdyn_api_RegisterPayloadResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterPayloadResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.UpdatePayloadVersionRequest> __Marshaller_bosdyn_api_UpdatePayloadVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.UpdatePayloadVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.UpdatePayloadVersionResponse> __Marshaller_bosdyn_api_UpdatePayloadVersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.UpdatePayloadVersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetPayloadAuthTokenRequest> __Marshaller_bosdyn_api_GetPayloadAuthTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetPayloadAuthTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetPayloadAuthTokenResponse> __Marshaller_bosdyn_api_GetPayloadAuthTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetPayloadAuthTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.UpdatePayloadAttachedRequest> __Marshaller_bosdyn_api_UpdatePayloadAttachedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.UpdatePayloadAttachedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.UpdatePayloadAttachedResponse> __Marshaller_bosdyn_api_UpdatePayloadAttachedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.UpdatePayloadAttachedResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.RegisterPayloadRequest, global::Bosdyn.Api.RegisterPayloadResponse> __Method_RegisterPayload = new grpc::Method<global::Bosdyn.Api.RegisterPayloadRequest, global::Bosdyn.Api.RegisterPayloadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterPayload",
        __Marshaller_bosdyn_api_RegisterPayloadRequest,
        __Marshaller_bosdyn_api_RegisterPayloadResponse);

    static readonly grpc::Method<global::Bosdyn.Api.UpdatePayloadVersionRequest, global::Bosdyn.Api.UpdatePayloadVersionResponse> __Method_UpdatePayloadVersion = new grpc::Method<global::Bosdyn.Api.UpdatePayloadVersionRequest, global::Bosdyn.Api.UpdatePayloadVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePayloadVersion",
        __Marshaller_bosdyn_api_UpdatePayloadVersionRequest,
        __Marshaller_bosdyn_api_UpdatePayloadVersionResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetPayloadAuthTokenRequest, global::Bosdyn.Api.GetPayloadAuthTokenResponse> __Method_GetPayloadAuthToken = new grpc::Method<global::Bosdyn.Api.GetPayloadAuthTokenRequest, global::Bosdyn.Api.GetPayloadAuthTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPayloadAuthToken",
        __Marshaller_bosdyn_api_GetPayloadAuthTokenRequest,
        __Marshaller_bosdyn_api_GetPayloadAuthTokenResponse);

    static readonly grpc::Method<global::Bosdyn.Api.UpdatePayloadAttachedRequest, global::Bosdyn.Api.UpdatePayloadAttachedResponse> __Method_UpdatePayloadAttached = new grpc::Method<global::Bosdyn.Api.UpdatePayloadAttachedRequest, global::Bosdyn.Api.UpdatePayloadAttachedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePayloadAttached",
        __Marshaller_bosdyn_api_UpdatePayloadAttachedRequest,
        __Marshaller_bosdyn_api_UpdatePayloadAttachedResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.PayloadRegistrationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PayloadRegistrationService</summary>
    [grpc::BindServiceMethod(typeof(PayloadRegistrationService), "BindService")]
    public abstract partial class PayloadRegistrationServiceBase
    {
      /// <summary>
      /// Register a payload with the directory.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RegisterPayloadResponse> RegisterPayload(global::Bosdyn.Api.RegisterPayloadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the version for the registered payload.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.UpdatePayloadVersionResponse> UpdatePayloadVersion(global::Bosdyn.Api.UpdatePayloadVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the authentication token information associated with a given payload.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetPayloadAuthTokenResponse> GetPayloadAuthToken(global::Bosdyn.Api.GetPayloadAuthTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Tell the robot whether the specified payload is attached..
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.UpdatePayloadAttachedResponse> UpdatePayloadAttached(global::Bosdyn.Api.UpdatePayloadAttachedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PayloadRegistrationService</summary>
    public partial class PayloadRegistrationServiceClient : grpc::ClientBase<PayloadRegistrationServiceClient>
    {
      /// <summary>Creates a new client for PayloadRegistrationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PayloadRegistrationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PayloadRegistrationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PayloadRegistrationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PayloadRegistrationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PayloadRegistrationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Register a payload with the directory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterPayloadResponse RegisterPayload(global::Bosdyn.Api.RegisterPayloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a payload with the directory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterPayloadResponse RegisterPayload(global::Bosdyn.Api.RegisterPayloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterPayload, null, options, request);
      }
      /// <summary>
      /// Register a payload with the directory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterPayloadResponse> RegisterPayloadAsync(global::Bosdyn.Api.RegisterPayloadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterPayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register a payload with the directory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterPayloadResponse> RegisterPayloadAsync(global::Bosdyn.Api.RegisterPayloadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterPayload, null, options, request);
      }
      /// <summary>
      /// Update the version for the registered payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.UpdatePayloadVersionResponse UpdatePayloadVersion(global::Bosdyn.Api.UpdatePayloadVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePayloadVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the version for the registered payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.UpdatePayloadVersionResponse UpdatePayloadVersion(global::Bosdyn.Api.UpdatePayloadVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePayloadVersion, null, options, request);
      }
      /// <summary>
      /// Update the version for the registered payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.UpdatePayloadVersionResponse> UpdatePayloadVersionAsync(global::Bosdyn.Api.UpdatePayloadVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePayloadVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the version for the registered payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.UpdatePayloadVersionResponse> UpdatePayloadVersionAsync(global::Bosdyn.Api.UpdatePayloadVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePayloadVersion, null, options, request);
      }
      /// <summary>
      /// Get the authentication token information associated with a given payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetPayloadAuthTokenResponse GetPayloadAuthToken(global::Bosdyn.Api.GetPayloadAuthTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPayloadAuthToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the authentication token information associated with a given payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetPayloadAuthTokenResponse GetPayloadAuthToken(global::Bosdyn.Api.GetPayloadAuthTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPayloadAuthToken, null, options, request);
      }
      /// <summary>
      /// Get the authentication token information associated with a given payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetPayloadAuthTokenResponse> GetPayloadAuthTokenAsync(global::Bosdyn.Api.GetPayloadAuthTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPayloadAuthTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the authentication token information associated with a given payload.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetPayloadAuthTokenResponse> GetPayloadAuthTokenAsync(global::Bosdyn.Api.GetPayloadAuthTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPayloadAuthToken, null, options, request);
      }
      /// <summary>
      /// Tell the robot whether the specified payload is attached..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.UpdatePayloadAttachedResponse UpdatePayloadAttached(global::Bosdyn.Api.UpdatePayloadAttachedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePayloadAttached(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tell the robot whether the specified payload is attached..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.UpdatePayloadAttachedResponse UpdatePayloadAttached(global::Bosdyn.Api.UpdatePayloadAttachedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePayloadAttached, null, options, request);
      }
      /// <summary>
      /// Tell the robot whether the specified payload is attached..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.UpdatePayloadAttachedResponse> UpdatePayloadAttachedAsync(global::Bosdyn.Api.UpdatePayloadAttachedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePayloadAttachedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tell the robot whether the specified payload is attached..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.UpdatePayloadAttachedResponse> UpdatePayloadAttachedAsync(global::Bosdyn.Api.UpdatePayloadAttachedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePayloadAttached, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PayloadRegistrationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PayloadRegistrationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PayloadRegistrationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterPayload, serviceImpl.RegisterPayload)
          .AddMethod(__Method_UpdatePayloadVersion, serviceImpl.UpdatePayloadVersion)
          .AddMethod(__Method_GetPayloadAuthToken, serviceImpl.GetPayloadAuthToken)
          .AddMethod(__Method_UpdatePayloadAttached, serviceImpl.UpdatePayloadAttached).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PayloadRegistrationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterPayload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RegisterPayloadRequest, global::Bosdyn.Api.RegisterPayloadResponse>(serviceImpl.RegisterPayload));
      serviceBinder.AddMethod(__Method_UpdatePayloadVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.UpdatePayloadVersionRequest, global::Bosdyn.Api.UpdatePayloadVersionResponse>(serviceImpl.UpdatePayloadVersion));
      serviceBinder.AddMethod(__Method_GetPayloadAuthToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetPayloadAuthTokenRequest, global::Bosdyn.Api.GetPayloadAuthTokenResponse>(serviceImpl.GetPayloadAuthToken));
      serviceBinder.AddMethod(__Method_UpdatePayloadAttached, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.UpdatePayloadAttachedRequest, global::Bosdyn.Api.UpdatePayloadAttachedResponse>(serviceImpl.UpdatePayloadAttached));
    }

  }
}
#endregion
