// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/time_sync.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/time_sync.proto</summary>
  public static partial class TimeSyncReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/time_sync.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TimeSyncReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90b3MvdGltZV9zeW5jLnByb3RvEgpib3NkeW4uYXBpGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVy",
            "YXRpb24ucHJvdG8aE1Byb3Rvcy9oZWFkZXIucHJvdG8izwEKEVRpbWVTeW5j",
            "Um91bmRUcmlwEi0KCWNsaWVudF90eBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASLQoJc2VydmVyX3J4GAIgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBItCglzZXJ2ZXJfdHgYAyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEi0KCWNsaWVudF9yeBgEIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXAidQoQVGltZVN5bmNFc3RpbWF0ZRIyCg9yb3Vu",
            "ZF90cmlwX3RpbWUYASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24S",
            "LQoKY2xvY2tfc2tldxgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "biKXAgoNVGltZVN5bmNTdGF0ZRIzCg1iZXN0X2VzdGltYXRlGAEgASgLMhwu",
            "Ym9zZHluLmFwaS5UaW1lU3luY0VzdGltYXRlEjAKBnN0YXR1cxgCIAEoDjIg",
            "LmJvc2R5bi5hcGkuVGltZVN5bmNTdGF0ZS5TdGF0dXMSNAoQbWVhc3VyZW1l",
            "bnRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiaQoG",
            "U3RhdHVzEhIKDlNUQVRVU19VTktOT1dOEAASDQoJU1RBVFVTX09LEAESHgoa",
            "U1RBVFVTX01PUkVfU0FNUExFU19ORUVERUQQAhIcChhTVEFUVVNfU0VSVklD",
            "RV9OT1RfUkVBRFkQAyKYAQoVVGltZVN5bmNVcGRhdGVSZXF1ZXN0EikKBmhl",
            "YWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchI6ChNwcmV2",
            "aW91c19yb3VuZF90cmlwGAIgASgLMh0uYm9zZHluLmFwaS5UaW1lU3luY1Jv",
            "dW5kVHJpcBIYChBjbG9ja19pZGVudGlmaWVyGAMgASgJIsEBChZUaW1lU3lu",
            "Y1VwZGF0ZVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGku",
            "UmVzcG9uc2VIZWFkZXISNwoRcHJldmlvdXNfZXN0aW1hdGUYAiABKAsyHC5i",
            "b3NkeW4uYXBpLlRpbWVTeW5jRXN0aW1hdGUSKAoFc3RhdGUYAyABKAsyGS5i",
            "b3NkeW4uYXBpLlRpbWVTeW5jU3RhdGUSGAoQY2xvY2tfaWRlbnRpZmllchgE",
            "IAEoCUIPQg1UaW1lU3luY1Byb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TimeSyncRoundTrip), global::Bosdyn.Api.TimeSyncRoundTrip.Parser, new[]{ "ClientTx", "ServerRx", "ServerTx", "ClientRx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TimeSyncEstimate), global::Bosdyn.Api.TimeSyncEstimate.Parser, new[]{ "RoundTripTime", "ClockSkew" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TimeSyncState), global::Bosdyn.Api.TimeSyncState.Parser, new[]{ "BestEstimate", "Status", "MeasurementTime" }, null, new[]{ typeof(global::Bosdyn.Api.TimeSyncState.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TimeSyncUpdateRequest), global::Bosdyn.Api.TimeSyncUpdateRequest.Parser, new[]{ "Header", "PreviousRoundTrip", "ClockIdentifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TimeSyncUpdateResponse), global::Bosdyn.Api.TimeSyncUpdateResponse.Parser, new[]{ "Header", "PreviousEstimate", "State", "ClockIdentifier" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Timestamp information from a full GRPC call round-trip.
  /// These are used to estimate the round-trip communication time and difference between
  /// client and server clocks.
  /// </summary>
  public sealed partial class TimeSyncRoundTrip : pb::IMessage<TimeSyncRoundTrip> {
    private static readonly pb::MessageParser<TimeSyncRoundTrip> _parser = new pb::MessageParser<TimeSyncRoundTrip>(() => new TimeSyncRoundTrip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSyncRoundTrip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.TimeSyncReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncRoundTrip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncRoundTrip(TimeSyncRoundTrip other) : this() {
      clientTx_ = other.clientTx_ != null ? other.clientTx_.Clone() : null;
      serverRx_ = other.serverRx_ != null ? other.serverRx_.Clone() : null;
      serverTx_ = other.serverTx_ != null ? other.serverTx_.Clone() : null;
      clientRx_ = other.clientRx_ != null ? other.clientRx_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncRoundTrip Clone() {
      return new TimeSyncRoundTrip(this);
    }

    /// <summary>Field number for the "client_tx" field.</summary>
    public const int ClientTxFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clientTx_;
    /// <summary>
    /// Client system time when the message was sent, if not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClientTx {
      get { return clientTx_; }
      set {
        clientTx_ = value;
      }
    }

    /// <summary>Field number for the "server_rx" field.</summary>
    public const int ServerRxFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp serverRx_;
    /// <summary>
    /// Server system time when the message was received, if not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ServerRx {
      get { return serverRx_; }
      set {
        serverRx_ = value;
      }
    }

    /// <summary>Field number for the "server_tx" field.</summary>
    public const int ServerTxFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp serverTx_;
    /// <summary>
    /// Server system time when the response was sent, if not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ServerTx {
      get { return serverTx_; }
      set {
        serverTx_ = value;
      }
    }

    /// <summary>Field number for the "client_rx" field.</summary>
    public const int ClientRxFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clientRx_;
    /// <summary>
    /// Client time when the response was received, if not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClientRx {
      get { return clientRx_; }
      set {
        clientRx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSyncRoundTrip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSyncRoundTrip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClientTx, other.ClientTx)) return false;
      if (!object.Equals(ServerRx, other.ServerRx)) return false;
      if (!object.Equals(ServerTx, other.ServerTx)) return false;
      if (!object.Equals(ClientRx, other.ClientRx)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clientTx_ != null) hash ^= ClientTx.GetHashCode();
      if (serverRx_ != null) hash ^= ServerRx.GetHashCode();
      if (serverTx_ != null) hash ^= ServerTx.GetHashCode();
      if (clientRx_ != null) hash ^= ClientRx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clientTx_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClientTx);
      }
      if (serverRx_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerRx);
      }
      if (serverTx_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServerTx);
      }
      if (clientRx_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClientRx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clientTx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientTx);
      }
      if (serverRx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerRx);
      }
      if (serverTx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerTx);
      }
      if (clientRx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientRx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSyncRoundTrip other) {
      if (other == null) {
        return;
      }
      if (other.clientTx_ != null) {
        if (clientTx_ == null) {
          ClientTx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClientTx.MergeFrom(other.ClientTx);
      }
      if (other.serverRx_ != null) {
        if (serverRx_ == null) {
          ServerRx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ServerRx.MergeFrom(other.ServerRx);
      }
      if (other.serverTx_ != null) {
        if (serverTx_ == null) {
          ServerTx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ServerTx.MergeFrom(other.ServerTx);
      }
      if (other.clientRx_ != null) {
        if (clientRx_ == null) {
          ClientRx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClientRx.MergeFrom(other.ClientRx);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clientTx_ == null) {
              ClientTx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClientTx);
            break;
          }
          case 18: {
            if (serverRx_ == null) {
              ServerRx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ServerRx);
            break;
          }
          case 26: {
            if (serverTx_ == null) {
              ServerTx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ServerTx);
            break;
          }
          case 34: {
            if (clientRx_ == null) {
              ClientRx = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClientRx);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Estimate of network speed and clock skew.  Both for the last
  /// complete sample and a recent average.  Populated by the server.
  /// </summary>
  public sealed partial class TimeSyncEstimate : pb::IMessage<TimeSyncEstimate> {
    private static readonly pb::MessageParser<TimeSyncEstimate> _parser = new pb::MessageParser<TimeSyncEstimate>(() => new TimeSyncEstimate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSyncEstimate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.TimeSyncReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncEstimate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncEstimate(TimeSyncEstimate other) : this() {
      roundTripTime_ = other.roundTripTime_ != null ? other.roundTripTime_.Clone() : null;
      clockSkew_ = other.clockSkew_ != null ? other.clockSkew_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncEstimate Clone() {
      return new TimeSyncEstimate(this);
    }

    /// <summary>Field number for the "round_trip_time" field.</summary>
    public const int RoundTripTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration roundTripTime_;
    /// <summary>
    /// Observed network delay (excludes processing between server_rx and server_tx).
    /// If zero, this estimate is unpopulated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration RoundTripTime {
      get { return roundTripTime_; }
      set {
        roundTripTime_ = value;
      }
    }

    /// <summary>Field number for the "clock_skew" field.</summary>
    public const int ClockSkewFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration clockSkew_;
    /// <summary>
    /// Add the skew to the client system clock to get the server clock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration ClockSkew {
      get { return clockSkew_; }
      set {
        clockSkew_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSyncEstimate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSyncEstimate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoundTripTime, other.RoundTripTime)) return false;
      if (!object.Equals(ClockSkew, other.ClockSkew)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roundTripTime_ != null) hash ^= RoundTripTime.GetHashCode();
      if (clockSkew_ != null) hash ^= ClockSkew.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roundTripTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoundTripTime);
      }
      if (clockSkew_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClockSkew);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roundTripTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundTripTime);
      }
      if (clockSkew_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClockSkew);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSyncEstimate other) {
      if (other == null) {
        return;
      }
      if (other.roundTripTime_ != null) {
        if (roundTripTime_ == null) {
          RoundTripTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RoundTripTime.MergeFrom(other.RoundTripTime);
      }
      if (other.clockSkew_ != null) {
        if (clockSkew_ == null) {
          ClockSkew = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        ClockSkew.MergeFrom(other.ClockSkew);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roundTripTime_ == null) {
              RoundTripTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RoundTripTime);
            break;
          }
          case 18: {
            if (clockSkew_ == null) {
              ClockSkew = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(ClockSkew);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Current best estimate status of time sync.
  /// </summary>
  public sealed partial class TimeSyncState : pb::IMessage<TimeSyncState> {
    private static readonly pb::MessageParser<TimeSyncState> _parser = new pb::MessageParser<TimeSyncState>(() => new TimeSyncState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSyncState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.TimeSyncReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncState(TimeSyncState other) : this() {
      bestEstimate_ = other.bestEstimate_ != null ? other.bestEstimate_.Clone() : null;
      status_ = other.status_;
      measurementTime_ = other.measurementTime_ != null ? other.measurementTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncState Clone() {
      return new TimeSyncState(this);
    }

    /// <summary>Field number for the "best_estimate" field.</summary>
    public const int BestEstimateFieldNumber = 1;
    private global::Bosdyn.Api.TimeSyncEstimate bestEstimate_;
    /// <summary>
    /// Best clock synchronization estimate currently available, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TimeSyncEstimate BestEstimate {
      get { return bestEstimate_; }
      set {
        bestEstimate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.TimeSyncState.Types.Status status_ = 0;
    /// <summary>
    /// STATUS_OK once time sync is established.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TimeSyncState.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "measurement_time" field.</summary>
    public const int MeasurementTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp measurementTime_;
    /// <summary>
    /// Time of best estimate, in server time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MeasurementTime {
      get { return measurementTime_; }
      set {
        measurementTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSyncState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSyncState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BestEstimate, other.BestEstimate)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(MeasurementTime, other.MeasurementTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bestEstimate_ != null) hash ^= BestEstimate.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (measurementTime_ != null) hash ^= MeasurementTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bestEstimate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BestEstimate);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (measurementTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MeasurementTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bestEstimate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestEstimate);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (measurementTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeasurementTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSyncState other) {
      if (other == null) {
        return;
      }
      if (other.bestEstimate_ != null) {
        if (bestEstimate_ == null) {
          BestEstimate = new global::Bosdyn.Api.TimeSyncEstimate();
        }
        BestEstimate.MergeFrom(other.BestEstimate);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.measurementTime_ != null) {
        if (measurementTime_ == null) {
          MeasurementTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MeasurementTime.MergeFrom(other.MeasurementTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bestEstimate_ == null) {
              BestEstimate = new global::Bosdyn.Api.TimeSyncEstimate();
            }
            input.ReadMessage(BestEstimate);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.TimeSyncState.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (measurementTime_ == null) {
              MeasurementTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MeasurementTime);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TimeSyncState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// Invalid, do not use.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Clock skew is available.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// More updates are required to establish a synchronization estimate.
        /// </summary>
        [pbr::OriginalName("STATUS_MORE_SAMPLES_NEEDED")] MoreSamplesNeeded = 2,
        /// <summary>
        /// Server still establishing time sync internally.
        /// </summary>
        [pbr::OriginalName("STATUS_SERVICE_NOT_READY")] ServiceNotReady = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request message for a time-sync Update RPC.
  /// </summary>
  public sealed partial class TimeSyncUpdateRequest : pb::IMessage<TimeSyncUpdateRequest> {
    private static readonly pb::MessageParser<TimeSyncUpdateRequest> _parser = new pb::MessageParser<TimeSyncUpdateRequest>(() => new TimeSyncUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSyncUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.TimeSyncReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateRequest(TimeSyncUpdateRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      previousRoundTrip_ = other.previousRoundTrip_ != null ? other.previousRoundTrip_.Clone() : null;
      clockIdentifier_ = other.clockIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateRequest Clone() {
      return new TimeSyncUpdateRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "previous_round_trip" field.</summary>
    public const int PreviousRoundTripFieldNumber = 2;
    private global::Bosdyn.Api.TimeSyncRoundTrip previousRoundTrip_;
    /// <summary>
    /// Round-trip timing information from the previous Update request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TimeSyncRoundTrip PreviousRoundTrip {
      get { return previousRoundTrip_; }
      set {
        previousRoundTrip_ = value;
      }
    }

    /// <summary>Field number for the "clock_identifier" field.</summary>
    public const int ClockIdentifierFieldNumber = 3;
    private string clockIdentifier_ = "";
    /// <summary>
    /// Identifier to verify time sync between robot and client. If unset, server will assign
    /// one to client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClockIdentifier {
      get { return clockIdentifier_; }
      set {
        clockIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSyncUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSyncUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(PreviousRoundTrip, other.PreviousRoundTrip)) return false;
      if (ClockIdentifier != other.ClockIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (previousRoundTrip_ != null) hash ^= PreviousRoundTrip.GetHashCode();
      if (ClockIdentifier.Length != 0) hash ^= ClockIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (previousRoundTrip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreviousRoundTrip);
      }
      if (ClockIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClockIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (previousRoundTrip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousRoundTrip);
      }
      if (ClockIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClockIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSyncUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.previousRoundTrip_ != null) {
        if (previousRoundTrip_ == null) {
          PreviousRoundTrip = new global::Bosdyn.Api.TimeSyncRoundTrip();
        }
        PreviousRoundTrip.MergeFrom(other.PreviousRoundTrip);
      }
      if (other.ClockIdentifier.Length != 0) {
        ClockIdentifier = other.ClockIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (previousRoundTrip_ == null) {
              PreviousRoundTrip = new global::Bosdyn.Api.TimeSyncRoundTrip();
            }
            input.ReadMessage(PreviousRoundTrip);
            break;
          }
          case 26: {
            ClockIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message for a time-sync Update RPC.
  /// </summary>
  public sealed partial class TimeSyncUpdateResponse : pb::IMessage<TimeSyncUpdateResponse> {
    private static readonly pb::MessageParser<TimeSyncUpdateResponse> _parser = new pb::MessageParser<TimeSyncUpdateResponse>(() => new TimeSyncUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSyncUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.TimeSyncReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateResponse(TimeSyncUpdateResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      previousEstimate_ = other.previousEstimate_ != null ? other.previousEstimate_.Clone() : null;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      clockIdentifier_ = other.clockIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSyncUpdateResponse Clone() {
      return new TimeSyncUpdateResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "previous_estimate" field.</summary>
    public const int PreviousEstimateFieldNumber = 2;
    private global::Bosdyn.Api.TimeSyncEstimate previousEstimate_;
    /// <summary>
    /// Clock synchronization estimate from the previous RPC round-trip, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TimeSyncEstimate PreviousEstimate {
      get { return previousEstimate_; }
      set {
        previousEstimate_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Bosdyn.Api.TimeSyncState state_;
    /// <summary>
    /// Current best clock synchronization estimate according to server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TimeSyncState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "clock_identifier" field.</summary>
    public const int ClockIdentifierFieldNumber = 4;
    private string clockIdentifier_ = "";
    /// <summary>
    /// Identifier to verify time sync between robot and client. Assigned upon first Request and
    /// echoed with each subsequent request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClockIdentifier {
      get { return clockIdentifier_; }
      set {
        clockIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSyncUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSyncUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(PreviousEstimate, other.PreviousEstimate)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (ClockIdentifier != other.ClockIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (previousEstimate_ != null) hash ^= PreviousEstimate.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (ClockIdentifier.Length != 0) hash ^= ClockIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (previousEstimate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreviousEstimate);
      }
      if (state_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
      if (ClockIdentifier.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClockIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (previousEstimate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousEstimate);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (ClockIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClockIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSyncUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.previousEstimate_ != null) {
        if (previousEstimate_ == null) {
          PreviousEstimate = new global::Bosdyn.Api.TimeSyncEstimate();
        }
        PreviousEstimate.MergeFrom(other.PreviousEstimate);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::Bosdyn.Api.TimeSyncState();
        }
        State.MergeFrom(other.State);
      }
      if (other.ClockIdentifier.Length != 0) {
        ClockIdentifier = other.ClockIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (previousEstimate_ == null) {
              PreviousEstimate = new global::Bosdyn.Api.TimeSyncEstimate();
            }
            input.ReadMessage(PreviousEstimate);
            break;
          }
          case 26: {
            if (state_ == null) {
              State = new global::Bosdyn.Api.TimeSyncState();
            }
            input.ReadMessage(State);
            break;
          }
          case 34: {
            ClockIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
