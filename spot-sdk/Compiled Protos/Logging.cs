// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/logging.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api.SpotCam {

  /// <summary>Holder for reflection information generated from Protos/logging.proto</summary>
  public static partial class LoggingReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/logging.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoggingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3MvbG9nZ2luZy5wcm90bxITYm9zZHluLmFwaS5zcG90X2NhbRoT",
            "UHJvdG9zL2NhbWVyYS5wcm90bxoTUHJvdG9zL2hlYWRlci5wcm90bxoXUHJv",
            "dG9zL2RhdGFfY2h1bmsucHJvdG8aElByb3Rvcy9pbWFnZS5wcm90bxoVUHJv",
            "dG9zL2dlb21ldHJ5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvIqMHCghMb2dwb2ludBIMCgRuYW1lGAEgASgJEjYKBHR5cGUYAiAB",
            "KA4yKC5ib3NkeW4uYXBpLnNwb3RfY2FtLkxvZ3BvaW50LlJlY29yZFR5cGUS",
            "NwoGc3RhdHVzGAMgASgOMicuYm9zZHluLmFwaS5zcG90X2NhbS5Mb2dwb2lu",
            "dC5Mb2dTdGF0dXMSPwoMcXVldWVfc3RhdHVzGAggASgOMikuYm9zZHluLmFw",
            "aS5zcG90X2NhbS5Mb2dwb2ludC5RdWV1ZVN0YXR1cxILCgN0YWcYBCABKAkS",
            "LQoJdGltZXN0YW1wGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBI/CgxpbWFnZV9wYXJhbXMYBiABKAsyKS5ib3NkeW4uYXBpLnNwb3RfY2Ft",
            "LkxvZ3BvaW50LkltYWdlUGFyYW1zEj4KC2NhbGlicmF0aW9uGAcgAygLMiku",
            "Ym9zZHluLmFwaS5zcG90X2NhbS5Mb2dwb2ludC5DYWxpYnJhdGlvbhpbCgtJ",
            "bWFnZVBhcmFtcxINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUSLQoG",
            "Zm9ybWF0GAMgASgOMh0uYm9zZHluLmFwaS5JbWFnZS5QaXhlbEZvcm1hdBqO",
            "AgoLQ2FsaWJyYXRpb24SDwoHeG9mZnNldBgBIAEoBRIPCgd5b2Zmc2V0GAIg",
            "ASgFEg0KBXdpZHRoGAMgASgFEg4KBmhlaWdodBgEIAEoBRIXCg9iYXNlX2Zy",
            "YW1lX25hbWUYByABKAkSMgoRYmFzZV90ZnJvbV9zZW5zb3IYBSABKAsyEy5i",
            "b3NkeW4uYXBpLlNFM1Bvc2VCAhgBEi4KEWJhc2VfdGZvcm1fc2Vuc29yGAgg",
            "ASgLMhMuYm9zZHluLmFwaS5TRTNQb3NlEkEKCmludHJpbnNpY3MYBiABKAsy",
            "LS5ib3NkeW4uYXBpLnNwb3RfY2FtLkNhbWVyYS5QaW5ob2xlSW50cmluc2lj",
            "cyIcCgpSZWNvcmRUeXBlEg4KClNUSUxMSU1BR0UQACJHCglMb2dTdGF0dXMS",
            "CgoGRkFJTEVEEAASCgoGUVVFVUVEEAESDAoIQ09NUExFVEUQAhIUCgdVTktO",
            "T1dOEP///////////wEiRQoLUXVldWVTdGF0dXMSEgoOUVVFVUVEX1VOS05P",
            "V04QABIRCg1RVUVVRURfUkVOREVSEAESDwoLUVVFVUVEX0RJU0sQAiJoCg1E",
            "ZWxldGVSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVx",
            "dWVzdEhlYWRlchIsCgVwb2ludBgCIAEoCzIdLmJvc2R5bi5hcGkuc3BvdF9j",
            "YW0uTG9ncG9pbnQiPAoORGVsZXRlUmVzcG9uc2USKgoGaGVhZGVyGAEgASgL",
            "MhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlciJrChBHZXRTdGF0dXNSZXF1",
            "ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRl",
            "chIsCgVwb2ludBgCIAEoCzIdLmJvc2R5bi5hcGkuc3BvdF9jYW0uTG9ncG9p",
            "bnQibQoRR2V0U3RhdHVzUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9z",
            "ZHluLmFwaS5SZXNwb25zZUhlYWRlchIsCgVwb2ludBgCIAEoCzIdLmJvc2R5",
            "bi5hcGkuc3BvdF9jYW0uTG9ncG9pbnQiagoPUmV0cmlldmVSZXF1ZXN0EikK",
            "BmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchIsCgVw",
            "b2ludBgCIAEoCzIdLmJvc2R5bi5hcGkuc3BvdF9jYW0uTG9ncG9pbnQilAEK",
            "EFJldHJpZXZlUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFw",
            "aS5SZXNwb25zZUhlYWRlchIvCghsb2dwb2ludBgCIAEoCzIdLmJvc2R5bi5h",
            "cGkuc3BvdF9jYW0uTG9ncG9pbnQSIwoEZGF0YRgDIAEoCzIVLmJvc2R5bi5h",
            "cGkuRGF0YUNodW5rInEKFlJldHJpZXZlUmF3RGF0YVJlcXVlc3QSKQoGaGVh",
            "ZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEiwKBXBvaW50",
            "GAIgASgLMh0uYm9zZHluLmFwaS5zcG90X2NhbS5Mb2dwb2ludCKbAQoXUmV0",
            "cmlldmVSYXdEYXRhUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHlu",
            "LmFwaS5SZXNwb25zZUhlYWRlchIvCghsb2dwb2ludBgCIAEoCzIdLmJvc2R5",
            "bi5hcGkuc3BvdF9jYW0uTG9ncG9pbnQSIwoEZGF0YRgDIAEoCzIVLmJvc2R5",
            "bi5hcGkuRGF0YUNodW5rIqsBCgxTdG9yZVJlcXVlc3QSKQoGaGVhZGVyGAEg",
            "ASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEisKBmNhbWVyYRgCIAEo",
            "CzIbLmJvc2R5bi5hcGkuc3BvdF9jYW0uQ2FtZXJhEjYKBHR5cGUYAyABKA4y",
            "KC5ib3NkeW4uYXBpLnNwb3RfY2FtLkxvZ3BvaW50LlJlY29yZFR5cGUSCwoD",
            "dGFnGAQgASgJImkKDVN0b3JlUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhou",
            "Ym9zZHluLmFwaS5SZXNwb25zZUhlYWRlchIsCgVwb2ludBgCIAEoCzIdLmJv",
            "c2R5bi5hcGkuc3BvdF9jYW0uTG9ncG9pbnQiZQoKVGFnUmVxdWVzdBIpCgZo",
            "ZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVlc3RIZWFkZXISLAoFcG9p",
            "bnQYAiABKAsyHS5ib3NkeW4uYXBpLnNwb3RfY2FtLkxvZ3BvaW50IjkKC1Rh",
            "Z1Jlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9u",
            "c2VIZWFkZXIiPwoSTGlzdENhbWVyYXNSZXF1ZXN0EikKBmhlYWRlchgBIAEo",
            "CzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJvChNMaXN0Q2FtZXJhc1Jl",
            "c3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VI",
            "ZWFkZXISLAoHY2FtZXJhcxgCIAMoCzIbLmJvc2R5bi5hcGkuc3BvdF9jYW0u",
            "Q2FtZXJhIkEKFExpc3RMb2dwb2ludHNSZXF1ZXN0EikKBmhlYWRlchgBIAEo",
            "CzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJ1ChVMaXN0TG9ncG9pbnRz",
            "UmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25z",
            "ZUhlYWRlchIwCglsb2dwb2ludHMYAiADKAsyHS5ib3NkeW4uYXBpLnNwb3Rf",
            "Y2FtLkxvZ3BvaW50IlUKFFNldFBhc3NwaHJhc2VSZXF1ZXN0EikKBmhlYWRl",
            "chgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchISCgpwYXNzcGhy",
            "YXNlGAIgASgJIkMKFVNldFBhc3NwaHJhc2VSZXNwb25zZRIqCgZoZWFkZXIY",
            "ASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyIrQBCgxEZWJ1Z1Jl",
            "cXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVh",
            "ZGVyEhoKEmVuYWJsZV90ZW1wZXJhdHVyZRgCIAEoCBIXCg9lbmFibGVfaHVt",
            "aWRpdHkYAyABKAgSEgoKZW5hYmxlX0JJVBgEIAEoCBIUCgxlbmFibGVfc2hv",
            "Y2sYBSABKAgSGgoSZW5hYmxlX3N5c3RlbV9zdGF0GAYgASgIIjsKDURlYnVn",
            "UmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25z",
            "ZUhlYWRlckIOQgxMb2dnaW5nUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.SpotCam.CameraReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.DataChunkReflection.Descriptor, global::Bosdyn.Api.ImageReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Logpoint), global::Bosdyn.Api.SpotCam.Logpoint.Parser, new[]{ "Name", "Type", "Status", "QueueStatus", "Tag", "Timestamp", "ImageParams", "Calibration" }, null, new[]{ typeof(global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType), typeof(global::Bosdyn.Api.SpotCam.Logpoint.Types.LogStatus), typeof(global::Bosdyn.Api.SpotCam.Logpoint.Types.QueueStatus) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams), global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams.Parser, new[]{ "Width", "Height", "Format" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration), global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration.Parser, new[]{ "Xoffset", "Yoffset", "Width", "Height", "BaseFrameName", "BaseTfromSensor", "BaseTformSensor", "Intrinsics" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.DeleteRequest), global::Bosdyn.Api.SpotCam.DeleteRequest.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.DeleteResponse), global::Bosdyn.Api.SpotCam.DeleteResponse.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetStatusRequest), global::Bosdyn.Api.SpotCam.GetStatusRequest.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.GetStatusResponse), global::Bosdyn.Api.SpotCam.GetStatusResponse.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.RetrieveRequest), global::Bosdyn.Api.SpotCam.RetrieveRequest.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.RetrieveResponse), global::Bosdyn.Api.SpotCam.RetrieveResponse.Parser, new[]{ "Header", "Logpoint", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.RetrieveRawDataRequest), global::Bosdyn.Api.SpotCam.RetrieveRawDataRequest.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.RetrieveRawDataResponse), global::Bosdyn.Api.SpotCam.RetrieveRawDataResponse.Parser, new[]{ "Header", "Logpoint", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.StoreRequest), global::Bosdyn.Api.SpotCam.StoreRequest.Parser, new[]{ "Header", "Camera", "Type", "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.StoreResponse), global::Bosdyn.Api.SpotCam.StoreResponse.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.TagRequest), global::Bosdyn.Api.SpotCam.TagRequest.Parser, new[]{ "Header", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.TagResponse), global::Bosdyn.Api.SpotCam.TagResponse.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListCamerasRequest), global::Bosdyn.Api.SpotCam.ListCamerasRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListCamerasResponse), global::Bosdyn.Api.SpotCam.ListCamerasResponse.Parser, new[]{ "Header", "Cameras" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListLogpointsRequest), global::Bosdyn.Api.SpotCam.ListLogpointsRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.ListLogpointsResponse), global::Bosdyn.Api.SpotCam.ListLogpointsResponse.Parser, new[]{ "Header", "Logpoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPassphraseRequest), global::Bosdyn.Api.SpotCam.SetPassphraseRequest.Parser, new[]{ "Header", "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.SetPassphraseResponse), global::Bosdyn.Api.SpotCam.SetPassphraseResponse.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.DebugRequest), global::Bosdyn.Api.SpotCam.DebugRequest.Parser, new[]{ "Header", "EnableTemperature", "EnableHumidity", "EnableBIT", "EnableShock", "EnableSystemStat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.DebugResponse), global::Bosdyn.Api.SpotCam.DebugResponse.Parser, new[]{ "Header" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A representation of a stored data acquisition.
  /// </summary>
  public sealed partial class Logpoint : pb::IMessage<Logpoint> {
    private static readonly pb::MessageParser<Logpoint> _parser = new pb::MessageParser<Logpoint>(() => new Logpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logpoint(Logpoint other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      status_ = other.status_;
      queueStatus_ = other.queueStatus_;
      tag_ = other.tag_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      imageParams_ = other.imageParams_ != null ? other.imageParams_.Clone() : null;
      calibration_ = other.calibration_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logpoint Clone() {
      return new Logpoint(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Unique identifier for a data acquisition event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType type_ = 0;
    /// <summary>
    /// Type of data held in this log point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Bosdyn.Api.SpotCam.Logpoint.Types.LogStatus status_ = 0;
    /// <summary>
    /// Current stage of acquisition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint.Types.LogStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "queue_status" field.</summary>
    public const int QueueStatusFieldNumber = 8;
    private global::Bosdyn.Api.SpotCam.Logpoint.Types.QueueStatus queueStatus_ = 0;
    /// <summary>
    /// Only filled out when status == QUEUED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint.Types.QueueStatus QueueStatus {
      get { return queueStatus_; }
      set {
        queueStatus_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 4;
    private string tag_ = "";
    /// <summary>
    /// An arbitrary string to be stored with the log data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Time of acquisition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "image_params" field.</summary>
    public const int ImageParamsFieldNumber = 6;
    private global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams imageParams_;
    /// <summary>
    /// Image format of the stored data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams ImageParams {
      get { return imageParams_; }
      set {
        imageParams_ = value;
      }
    }

    /// <summary>Field number for the "calibration" field.</summary>
    public const int CalibrationFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration> _repeated_calibration_codec
        = pb::FieldCodec.ForMessage(58, global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration> calibration_ = new pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration>();
    /// <summary>
    /// Camera data for all sub-images contained within the image data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint.Types.Calibration> Calibration {
      get { return calibration_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (QueueStatus != other.QueueStatus) return false;
      if (Tag != other.Tag) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(ImageParams, other.ImageParams)) return false;
      if(!calibration_.Equals(other.calibration_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (QueueStatus != 0) hash ^= QueueStatus.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (imageParams_ != null) hash ^= ImageParams.GetHashCode();
      hash ^= calibration_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Tag);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (imageParams_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ImageParams);
      }
      calibration_.WriteTo(output, _repeated_calibration_codec);
      if (QueueStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) QueueStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (QueueStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QueueStatus);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (imageParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageParams);
      }
      size += calibration_.CalculateSize(_repeated_calibration_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logpoint other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.QueueStatus != 0) {
        QueueStatus = other.QueueStatus;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.imageParams_ != null) {
        if (imageParams_ == null) {
          ImageParams = new global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams();
        }
        ImageParams.MergeFrom(other.ImageParams);
      }
      calibration_.Add(other.calibration_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType) input.ReadEnum();
            break;
          }
          case 24: {
            Status = (global::Bosdyn.Api.SpotCam.Logpoint.Types.LogStatus) input.ReadEnum();
            break;
          }
          case 34: {
            Tag = input.ReadString();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 50: {
            if (imageParams_ == null) {
              ImageParams = new global::Bosdyn.Api.SpotCam.Logpoint.Types.ImageParams();
            }
            input.ReadMessage(ImageParams);
            break;
          }
          case 58: {
            calibration_.AddEntriesFrom(input, _repeated_calibration_codec);
            break;
          }
          case 64: {
            QueueStatus = (global::Bosdyn.Api.SpotCam.Logpoint.Types.QueueStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Logpoint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible types of media that can be stored.
      /// </summary>
      public enum RecordType {
        [pbr::OriginalName("STILLIMAGE")] Stillimage = 0,
      }

      /// <summary>
      /// Possible stages of data acquisition.
      /// </summary>
      public enum LogStatus {
        [pbr::OriginalName("FAILED")] Failed = 0,
        /// <summary>
        ///the logpoint has been queued to be downloaded from the renderer
        /// </summary>
        [pbr::OriginalName("QUEUED")] Queued = 1,
        /// <summary>
        /// the logpoint is written to the disk
        /// </summary>
        [pbr::OriginalName("COMPLETE")] Complete = 2,
        [pbr::OriginalName("UNKNOWN")] Unknown = -1,
      }

      public enum QueueStatus {
        [pbr::OriginalName("QUEUED_UNKNOWN")] QueuedUnknown = 0,
        /// <summary>
        /// The logpoint has been queued to be downloaded from the renderer
        /// </summary>
        [pbr::OriginalName("QUEUED_RENDER")] QueuedRender = 1,
        /// <summary>
        /// The logpoint is in general ram, and will be written to the disk when resources allow
        /// </summary>
        [pbr::OriginalName("QUEUED_DISK")] QueuedDisk = 2,
      }

      /// <summary>
      /// Description of image format.
      /// </summary>
      public sealed partial class ImageParams : pb::IMessage<ImageParams> {
        private static readonly pb::MessageParser<ImageParams> _parser = new pb::MessageParser<ImageParams>(() => new ImageParams());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageParams> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SpotCam.Logpoint.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageParams() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageParams(ImageParams other) : this() {
          width_ = other.width_;
          height_ = other.height_;
          format_ = other.format_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageParams Clone() {
          return new ImageParams(this);
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 3;
        private global::Bosdyn.Api.Image.Types.PixelFormat format_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Image.Types.PixelFormat Format {
          get { return format_; }
          set {
            format_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageParams);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageParams other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          if (Format != other.Format) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (Format != 0) hash ^= Format.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Width != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Height);
          }
          if (Format != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Format);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (Format != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageParams other) {
          if (other == null) {
            return;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          if (other.Format != 0) {
            Format = other.Format;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Width = input.ReadInt32();
                break;
              }
              case 16: {
                Height = input.ReadInt32();
                break;
              }
              case 24: {
                Format = (global::Bosdyn.Api.Image.Types.PixelFormat) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Data describing the camera intrinsics and extrinsics for a window of the image.
      /// </summary>
      public sealed partial class Calibration : pb::IMessage<Calibration> {
        private static readonly pb::MessageParser<Calibration> _parser = new pb::MessageParser<Calibration>(() => new Calibration());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Calibration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SpotCam.Logpoint.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Calibration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Calibration(Calibration other) : this() {
          xoffset_ = other.xoffset_;
          yoffset_ = other.yoffset_;
          width_ = other.width_;
          height_ = other.height_;
          baseFrameName_ = other.baseFrameName_;
          baseTfromSensor_ = other.baseTfromSensor_ != null ? other.baseTfromSensor_.Clone() : null;
          baseTformSensor_ = other.baseTformSensor_ != null ? other.baseTformSensor_.Clone() : null;
          intrinsics_ = other.intrinsics_ != null ? other.intrinsics_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Calibration Clone() {
          return new Calibration(this);
        }

        /// <summary>Field number for the "xoffset" field.</summary>
        public const int XoffsetFieldNumber = 1;
        private int xoffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Xoffset {
          get { return xoffset_; }
          set {
            xoffset_ = value;
          }
        }

        /// <summary>Field number for the "yoffset" field.</summary>
        public const int YoffsetFieldNumber = 2;
        private int yoffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Yoffset {
          get { return yoffset_; }
          set {
            yoffset_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 4;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        /// <summary>Field number for the "base_frame_name" field.</summary>
        public const int BaseFrameNameFieldNumber = 7;
        private string baseFrameName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BaseFrameName {
          get { return baseFrameName_; }
          set {
            baseFrameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "base_tfrom_sensor" field.</summary>
        public const int BaseTfromSensorFieldNumber = 5;
        private global::Bosdyn.Api.SE3Pose baseTfromSensor_;
        /// <summary>
        /// 'base_tfrom_sensor' defines the transform from the specific camera to the named base from.
        /// This is deprecated in favor of 'base_tform_sensor' which follows the intended naming convention
        /// and FrameTree directionality convention of the Spot system as defined in geometry.proto.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose BaseTfromSensor {
          get { return baseTfromSensor_; }
          set {
            baseTfromSensor_ = value;
          }
        }

        /// <summary>Field number for the "base_tform_sensor" field.</summary>
        public const int BaseTformSensorFieldNumber = 8;
        private global::Bosdyn.Api.SE3Pose baseTformSensor_;
        /// <summary>
        /// The transform from the named base frame to this specific camera
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SE3Pose BaseTformSensor {
          get { return baseTformSensor_; }
          set {
            baseTformSensor_ = value;
          }
        }

        /// <summary>Field number for the "intrinsics" field.</summary>
        public const int IntrinsicsFieldNumber = 6;
        private global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics intrinsics_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics Intrinsics {
          get { return intrinsics_; }
          set {
            intrinsics_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Calibration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Calibration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Xoffset != other.Xoffset) return false;
          if (Yoffset != other.Yoffset) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          if (BaseFrameName != other.BaseFrameName) return false;
          if (!object.Equals(BaseTfromSensor, other.BaseTfromSensor)) return false;
          if (!object.Equals(BaseTformSensor, other.BaseTformSensor)) return false;
          if (!object.Equals(Intrinsics, other.Intrinsics)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Xoffset != 0) hash ^= Xoffset.GetHashCode();
          if (Yoffset != 0) hash ^= Yoffset.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (BaseFrameName.Length != 0) hash ^= BaseFrameName.GetHashCode();
          if (baseTfromSensor_ != null) hash ^= BaseTfromSensor.GetHashCode();
          if (baseTformSensor_ != null) hash ^= BaseTformSensor.GetHashCode();
          if (intrinsics_ != null) hash ^= Intrinsics.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Xoffset != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Xoffset);
          }
          if (Yoffset != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Yoffset);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Height);
          }
          if (baseTfromSensor_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(BaseTfromSensor);
          }
          if (intrinsics_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Intrinsics);
          }
          if (BaseFrameName.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(BaseFrameName);
          }
          if (baseTformSensor_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(BaseTformSensor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Xoffset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xoffset);
          }
          if (Yoffset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Yoffset);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (BaseFrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseFrameName);
          }
          if (baseTfromSensor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseTfromSensor);
          }
          if (baseTformSensor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseTformSensor);
          }
          if (intrinsics_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intrinsics);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Calibration other) {
          if (other == null) {
            return;
          }
          if (other.Xoffset != 0) {
            Xoffset = other.Xoffset;
          }
          if (other.Yoffset != 0) {
            Yoffset = other.Yoffset;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          if (other.BaseFrameName.Length != 0) {
            BaseFrameName = other.BaseFrameName;
          }
          if (other.baseTfromSensor_ != null) {
            if (baseTfromSensor_ == null) {
              BaseTfromSensor = new global::Bosdyn.Api.SE3Pose();
            }
            BaseTfromSensor.MergeFrom(other.BaseTfromSensor);
          }
          if (other.baseTformSensor_ != null) {
            if (baseTformSensor_ == null) {
              BaseTformSensor = new global::Bosdyn.Api.SE3Pose();
            }
            BaseTformSensor.MergeFrom(other.BaseTformSensor);
          }
          if (other.intrinsics_ != null) {
            if (intrinsics_ == null) {
              Intrinsics = new global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics();
            }
            Intrinsics.MergeFrom(other.Intrinsics);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Xoffset = input.ReadInt32();
                break;
              }
              case 16: {
                Yoffset = input.ReadInt32();
                break;
              }
              case 24: {
                Width = input.ReadInt32();
                break;
              }
              case 32: {
                Height = input.ReadInt32();
                break;
              }
              case 42: {
                if (baseTfromSensor_ == null) {
                  BaseTfromSensor = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(BaseTfromSensor);
                break;
              }
              case 50: {
                if (intrinsics_ == null) {
                  Intrinsics = new global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics();
                }
                input.ReadMessage(Intrinsics);
                break;
              }
              case 58: {
                BaseFrameName = input.ReadString();
                break;
              }
              case 66: {
                if (baseTformSensor_ == null) {
                  BaseTformSensor = new global::Bosdyn.Api.SE3Pose();
                }
                input.ReadMessage(BaseTformSensor);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Delete a log point from the store.
  /// </summary>
  public sealed partial class DeleteRequest : pb::IMessage<DeleteRequest> {
    private static readonly pb::MessageParser<DeleteRequest> _parser = new pb::MessageParser<DeleteRequest>(() => new DeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest(DeleteRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRequest Clone() {
      return new DeleteRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// Log point to delete.  Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to a deletion with any errors that occurred.
  /// </summary>
  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for status about the current stage of data acquisition.
  /// </summary>
  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// Log point to query.  Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provide an update on the stage of data acquisition.
  /// </summary>
  public sealed partial class GetStatusResponse : pb::IMessage<GetStatusResponse> {
    private static readonly pb::MessageParser<GetStatusResponse> _parser = new pb::MessageParser<GetStatusResponse>(() => new GetStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse(GetStatusResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse Clone() {
      return new GetStatusResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// The logpoint returned here can be used to add a tag to the Logpoint later
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Retrieve the binary data associated with a log point.
  /// </summary>
  public sealed partial class RetrieveRequest : pb::IMessage<RetrieveRequest> {
    private static readonly pb::MessageParser<RetrieveRequest> _parser = new pb::MessageParser<RetrieveRequest>(() => new RetrieveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRequest(RetrieveRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRequest Clone() {
      return new RetrieveRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// Log point to retrieve.  Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provide the data stored at a log point.
  /// Store() dictates what processing happens in this response.
  /// c0 -> c4 will return the raw (rgb24) fisheye image of the camera at that index.
  /// Storing a panorama will process the data into a stitched image.
  /// </summary>
  public sealed partial class RetrieveResponse : pb::IMessage<RetrieveResponse> {
    private static readonly pb::MessageParser<RetrieveResponse> _parser = new pb::MessageParser<RetrieveResponse>(() => new RetrieveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveResponse(RetrieveResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      logpoint_ = other.logpoint_ != null ? other.logpoint_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveResponse Clone() {
      return new RetrieveResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "logpoint" field.</summary>
    public const int LogpointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint logpoint_;
    /// <summary>
    /// Log point retrieved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Logpoint {
      get { return logpoint_; }
      set {
        logpoint_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Bosdyn.Api.DataChunk data_;
    /// <summary>
    /// Data chunk bytes field should be concatenated together to recover the binary data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DataChunk Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Logpoint, other.Logpoint)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (logpoint_ != null) hash ^= Logpoint.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (logpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Logpoint);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (logpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logpoint);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.logpoint_ != null) {
        if (logpoint_ == null) {
          Logpoint = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Logpoint.MergeFrom(other.Logpoint);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Bosdyn.Api.DataChunk();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (logpoint_ == null) {
              Logpoint = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Logpoint);
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Bosdyn.Api.DataChunk();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Retrieve the binary data associated with a log point, with no processing applied.
  /// Storing a panorama will retrieve tiled individual images.
  /// For IR, the temperature at each pixel is 0.1 * the int value in Kelvin.
  /// </summary>
  public sealed partial class RetrieveRawDataRequest : pb::IMessage<RetrieveRawDataRequest> {
    private static readonly pb::MessageParser<RetrieveRawDataRequest> _parser = new pb::MessageParser<RetrieveRawDataRequest>(() => new RetrieveRawDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveRawDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataRequest(RetrieveRawDataRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataRequest Clone() {
      return new RetrieveRawDataRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// Log point to retrieve.  Only the name is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveRawDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveRawDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveRawDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RetrieveRawDataResponse : pb::IMessage<RetrieveRawDataResponse> {
    private static readonly pb::MessageParser<RetrieveRawDataResponse> _parser = new pb::MessageParser<RetrieveRawDataResponse>(() => new RetrieveRawDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveRawDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataResponse(RetrieveRawDataResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      logpoint_ = other.logpoint_ != null ? other.logpoint_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveRawDataResponse Clone() {
      return new RetrieveRawDataResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "logpoint" field.</summary>
    public const int LogpointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint logpoint_;
    /// <summary>
    /// Log point retrieved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Logpoint {
      get { return logpoint_; }
      set {
        logpoint_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Bosdyn.Api.DataChunk data_;
    /// <summary>
    /// Data chunk bytes field should be concatenated together to recover the binary data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DataChunk Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveRawDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveRawDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Logpoint, other.Logpoint)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (logpoint_ != null) hash ^= Logpoint.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (logpoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Logpoint);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (logpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logpoint);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveRawDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.logpoint_ != null) {
        if (logpoint_ == null) {
          Logpoint = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Logpoint.MergeFrom(other.Logpoint);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Bosdyn.Api.DataChunk();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (logpoint_ == null) {
              Logpoint = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Logpoint);
            break;
          }
          case 26: {
            if (data_ == null) {
              Data = new global::Bosdyn.Api.DataChunk();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Trigger a data acquisition.
  /// </summary>
  public sealed partial class StoreRequest : pb::IMessage<StoreRequest> {
    private static readonly pb::MessageParser<StoreRequest> _parser = new pb::MessageParser<StoreRequest>(() => new StoreRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreRequest(StoreRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      camera_ = other.camera_ != null ? other.camera_.Clone() : null;
      type_ = other.type_;
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreRequest Clone() {
      return new StoreRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Camera camera_;
    /// <summary>
    /// Which camera to capture.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Camera Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType type_ = 0;
    /// <summary>
    /// Type of data capture to perform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 4;
    private string tag_ = "";
    /// <summary>
    /// Metadata to associate with the store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (Type != other.Type) return false;
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (camera_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Camera);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          Camera = new global::Bosdyn.Api.SpotCam.Camera();
        }
        Camera.MergeFrom(other.Camera);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (camera_ == null) {
              Camera = new global::Bosdyn.Api.SpotCam.Camera();
            }
            input.ReadMessage(Camera);
            break;
          }
          case 24: {
            Type = (global::Bosdyn.Api.SpotCam.Logpoint.Types.RecordType) input.ReadEnum();
            break;
          }
          case 34: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of data acquisition trigger.
  /// </summary>
  public sealed partial class StoreResponse : pb::IMessage<StoreResponse> {
    private static readonly pb::MessageParser<StoreResponse> _parser = new pb::MessageParser<StoreResponse>(() => new StoreResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreResponse(StoreResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreResponse Clone() {
      return new StoreResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// The log point returned here can be used to add a tag to the Logpoint later
    /// It will very likely be in th 'QUEUED' state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Add tag metadata to an existing log point.
  /// </summary>
  public sealed partial class TagRequest : pb::IMessage<TagRequest> {
    private static readonly pb::MessageParser<TagRequest> _parser = new pb::MessageParser<TagRequest>(() => new TagRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagRequest(TagRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      point_ = other.point_ != null ? other.point_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagRequest Clone() {
      return new TagRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::Bosdyn.Api.SpotCam.Logpoint point_;
    /// <summary>
    /// Logpoint to add metadata to. Name and tag are used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Logpoint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          Point = new global::Bosdyn.Api.SpotCam.Logpoint();
        }
        Point.MergeFrom(other.Point);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (point_ == null) {
              Point = new global::Bosdyn.Api.SpotCam.Logpoint();
            }
            input.ReadMessage(Point);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of adding tag metadata to a log point.
  /// </summary>
  public sealed partial class TagResponse : pb::IMessage<TagResponse> {
    private static readonly pb::MessageParser<TagResponse> _parser = new pb::MessageParser<TagResponse>(() => new TagResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagResponse(TagResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagResponse Clone() {
      return new TagResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request the available cameras.
  /// </summary>
  public sealed partial class ListCamerasRequest : pb::IMessage<ListCamerasRequest> {
    private static readonly pb::MessageParser<ListCamerasRequest> _parser = new pb::MessageParser<ListCamerasRequest>(() => new ListCamerasRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCamerasRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasRequest(ListCamerasRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasRequest Clone() {
      return new ListCamerasRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCamerasRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCamerasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCamerasRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provide the list of available cameras.
  /// </summary>
  public sealed partial class ListCamerasResponse : pb::IMessage<ListCamerasResponse> {
    private static readonly pb::MessageParser<ListCamerasResponse> _parser = new pb::MessageParser<ListCamerasResponse>(() => new ListCamerasResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCamerasResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasResponse(ListCamerasResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      cameras_ = other.cameras_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCamerasResponse Clone() {
      return new ListCamerasResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "cameras" field.</summary>
    public const int CamerasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SpotCam.Camera> _repeated_cameras_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SpotCam.Camera.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Camera> cameras_ = new pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Camera>();
    /// <summary>
    /// List of all cameras which can be used in a StoreRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Camera> Cameras {
      get { return cameras_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCamerasResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCamerasResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!cameras_.Equals(other.cameras_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= cameras_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      cameras_.WriteTo(output, _repeated_cameras_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += cameras_.CalculateSize(_repeated_cameras_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCamerasResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      cameras_.Add(other.cameras_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            cameras_.AddEntriesFrom(input, _repeated_cameras_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// List all available log points, whether they have completed or not.
  /// </summary>
  public sealed partial class ListLogpointsRequest : pb::IMessage<ListLogpointsRequest> {
    private static readonly pb::MessageParser<ListLogpointsRequest> _parser = new pb::MessageParser<ListLogpointsRequest>(() => new ListLogpointsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLogpointsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsRequest(ListLogpointsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsRequest Clone() {
      return new ListLogpointsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLogpointsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLogpointsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLogpointsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Provide all log points in the system.
  /// </summary>
  public sealed partial class ListLogpointsResponse : pb::IMessage<ListLogpointsResponse> {
    private static readonly pb::MessageParser<ListLogpointsResponse> _parser = new pb::MessageParser<ListLogpointsResponse>(() => new ListLogpointsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLogpointsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsResponse(ListLogpointsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      logpoints_ = other.logpoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLogpointsResponse Clone() {
      return new ListLogpointsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "logpoints" field.</summary>
    public const int LogpointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SpotCam.Logpoint> _repeated_logpoints_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SpotCam.Logpoint.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint> logpoints_ = new pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint>();
    /// <summary>
    /// List of all the individual log points concatenated into a list.
    /// This stream may take a long time to complete if there are a lot of stored images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SpotCam.Logpoint> Logpoints {
      get { return logpoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLogpointsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLogpointsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!logpoints_.Equals(other.logpoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= logpoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      logpoints_.WriteTo(output, _repeated_logpoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += logpoints_.CalculateSize(_repeated_logpoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLogpointsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      logpoints_.Add(other.logpoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            logpoints_.AddEntriesFrom(input, _repeated_logpoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set encryption for the disk.
  /// </summary>
  public sealed partial class SetPassphraseRequest : pb::IMessage<SetPassphraseRequest> {
    private static readonly pb::MessageParser<SetPassphraseRequest> _parser = new pb::MessageParser<SetPassphraseRequest>(() => new SetPassphraseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPassphraseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseRequest(SetPassphraseRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      passphrase_ = other.passphrase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseRequest Clone() {
      return new SetPassphraseRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 2;
    private string passphrase_ = "";
    /// <summary>
    /// After setting the passphrase, please reboot the system to
    /// remount the encrypted filesystem layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPassphraseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPassphraseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Passphrase != other.Passphrase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Passphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passphrase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passphrase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPassphraseRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Passphrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response from setting the disk encryption.
  /// After setting the passphrase, please reboot the system to
  /// remount the encrypted filesystem layer.
  /// </summary>
  public sealed partial class SetPassphraseResponse : pb::IMessage<SetPassphraseResponse> {
    private static readonly pb::MessageParser<SetPassphraseResponse> _parser = new pb::MessageParser<SetPassphraseResponse>(() => new SetPassphraseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPassphraseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseResponse(SetPassphraseResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPassphraseResponse Clone() {
      return new SetPassphraseResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPassphraseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPassphraseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPassphraseResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Change debug logging settings on the SpotCam.
  /// </summary>
  public sealed partial class DebugRequest : pb::IMessage<DebugRequest> {
    private static readonly pb::MessageParser<DebugRequest> _parser = new pb::MessageParser<DebugRequest>(() => new DebugRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugRequest(DebugRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      enableTemperature_ = other.enableTemperature_;
      enableHumidity_ = other.enableHumidity_;
      enableBIT_ = other.enableBIT_;
      enableShock_ = other.enableShock_;
      enableSystemStat_ = other.enableSystemStat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugRequest Clone() {
      return new DebugRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "enable_temperature" field.</summary>
    public const int EnableTemperatureFieldNumber = 2;
    private bool enableTemperature_;
    /// <summary>
    /// Set true to enable logging of temperature data;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableTemperature {
      get { return enableTemperature_; }
      set {
        enableTemperature_ = value;
      }
    }

    /// <summary>Field number for the "enable_humidity" field.</summary>
    public const int EnableHumidityFieldNumber = 3;
    private bool enableHumidity_;
    /// <summary>
    /// Set true to enable logging of humidity data;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableHumidity {
      get { return enableHumidity_; }
      set {
        enableHumidity_ = value;
      }
    }

    /// <summary>Field number for the "enable_BIT" field.</summary>
    public const int EnableBITFieldNumber = 4;
    private bool enableBIT_;
    /// <summary>
    /// Set true to enable logging of BIT events;
    /// BIT events are always recorded to volatile memory
    /// and can be viewed (and cleared) with the Health service,
    /// but this enables writing them to disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableBIT {
      get { return enableBIT_; }
      set {
        enableBIT_ = value;
      }
    }

    /// <summary>Field number for the "enable_shock" field.</summary>
    public const int EnableShockFieldNumber = 5;
    private bool enableShock_;
    /// <summary>
    /// Set true to enable logging of Shock data;
    /// this is on by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableShock {
      get { return enableShock_; }
      set {
        enableShock_ = value;
      }
    }

    /// <summary>Field number for the "enable_system_stat" field.</summary>
    public const int EnableSystemStatFieldNumber = 6;
    private bool enableSystemStat_;
    /// <summary>
    /// Set to true to enable logging of system load stats
    /// cpu, gpu, memory, and network utilization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSystemStat {
      get { return enableSystemStat_; }
      set {
        enableSystemStat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (EnableTemperature != other.EnableTemperature) return false;
      if (EnableHumidity != other.EnableHumidity) return false;
      if (EnableBIT != other.EnableBIT) return false;
      if (EnableShock != other.EnableShock) return false;
      if (EnableSystemStat != other.EnableSystemStat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (EnableTemperature != false) hash ^= EnableTemperature.GetHashCode();
      if (EnableHumidity != false) hash ^= EnableHumidity.GetHashCode();
      if (EnableBIT != false) hash ^= EnableBIT.GetHashCode();
      if (EnableShock != false) hash ^= EnableShock.GetHashCode();
      if (EnableSystemStat != false) hash ^= EnableSystemStat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (EnableTemperature != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableTemperature);
      }
      if (EnableHumidity != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnableHumidity);
      }
      if (EnableBIT != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableBIT);
      }
      if (EnableShock != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableShock);
      }
      if (EnableSystemStat != false) {
        output.WriteRawTag(48);
        output.WriteBool(EnableSystemStat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (EnableTemperature != false) {
        size += 1 + 1;
      }
      if (EnableHumidity != false) {
        size += 1 + 1;
      }
      if (EnableBIT != false) {
        size += 1 + 1;
      }
      if (EnableShock != false) {
        size += 1 + 1;
      }
      if (EnableSystemStat != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.EnableTemperature != false) {
        EnableTemperature = other.EnableTemperature;
      }
      if (other.EnableHumidity != false) {
        EnableHumidity = other.EnableHumidity;
      }
      if (other.EnableBIT != false) {
        EnableBIT = other.EnableBIT;
      }
      if (other.EnableShock != false) {
        EnableShock = other.EnableShock;
      }
      if (other.EnableSystemStat != false) {
        EnableSystemStat = other.EnableSystemStat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            EnableTemperature = input.ReadBool();
            break;
          }
          case 24: {
            EnableHumidity = input.ReadBool();
            break;
          }
          case 32: {
            EnableBIT = input.ReadBool();
            break;
          }
          case 40: {
            EnableShock = input.ReadBool();
            break;
          }
          case 48: {
            EnableSystemStat = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response with any errors for debug setting changes.
  /// </summary>
  public sealed partial class DebugResponse : pb::IMessage<DebugResponse> {
    private static readonly pb::MessageParser<DebugResponse> _parser = new pb::MessageParser<DebugResponse>(() => new DebugResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.LoggingReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugResponse(DebugResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugResponse Clone() {
      return new DebugResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
