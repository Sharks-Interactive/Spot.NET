// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/power.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/power.proto</summary>
  public static partial class PowerReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/power.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PowerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvcG93ZXIucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rvcy9oZWFk",
            "ZXIucHJvdG8aElByb3Rvcy9sZWFzZS5wcm90bxoUUHJvdG9zL2xpY2Vuc2Uu",
            "cHJvdG8aGFByb3Rvcy9yb2JvdF9zdGF0ZS5wcm90byK9AwoTUG93ZXJDb21t",
            "YW5kUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVl",
            "c3RIZWFkZXISIAoFbGVhc2UYAiABKAsyES5ib3NkeW4uYXBpLkxlYXNlEjgK",
            "B3JlcXVlc3QYAyABKA4yJy5ib3NkeW4uYXBpLlBvd2VyQ29tbWFuZFJlcXVl",
            "c3QuUmVxdWVzdCKeAgoHUmVxdWVzdBITCg9SRVFVRVNUX1VOS05PV04QABIT",
            "CgtSRVFVRVNUX09GRhABGgIIARISCgpSRVFVRVNUX09OEAIaAggBEhYKElJF",
            "UVVFU1RfT0ZGX01PVE9SUxABEhUKEVJFUVVFU1RfT05fTU9UT1JTEAISFQoR",
            "UkVRVUVTVF9PRkZfUk9CT1QQAxIXChNSRVFVRVNUX0NZQ0xFX1JPQk9UEAQS",
            "HQoZUkVRVUVTVF9PRkZfUEFZTE9BRF9QT1JUUxAFEhwKGFJFUVVFU1RfT05f",
            "UEFZTE9BRF9QT1JUUxAGEhoKFlJFUVVFU1RfT0ZGX1dJRklfUkFESU8QBxIZ",
            "ChVSRVFVRVNUX09OX1dJRklfUkFESU8QCBoCEAEirAIKFFBvd2VyQ29tbWFu",
            "ZFJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9u",
            "c2VIZWFkZXISNAoQbGVhc2VfdXNlX3Jlc3VsdBgCIAEoCzIaLmJvc2R5bi5h",
            "cGkuTGVhc2VVc2VSZXN1bHQSLgoGc3RhdHVzGAMgASgOMh4uYm9zZHluLmFw",
            "aS5Qb3dlckNvbW1hbmRTdGF0dXMSGAoQcG93ZXJfY29tbWFuZF9pZBgEIAEo",
            "DRI2Cg5saWNlbnNlX3N0YXR1cxgFIAEoDjIeLmJvc2R5bi5hcGkuTGljZW5z",
            "ZUluZm8uU3RhdHVzEjAKD2Jsb2NraW5nX2ZhdWx0cxgGIAMoCzIXLmJvc2R5",
            "bi5hcGkuU3lzdGVtRmF1bHQiYgobUG93ZXJDb21tYW5kRmVlZGJhY2tSZXF1",
            "ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRl",
            "chIYChBwb3dlcl9jb21tYW5kX2lkGAIgASgNIqwBChxQb3dlckNvbW1hbmRG",
            "ZWVkYmFja1Jlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGku",
            "UmVzcG9uc2VIZWFkZXISLgoGc3RhdHVzGAIgASgOMh4uYm9zZHluLmFwaS5Q",
            "b3dlckNvbW1hbmRTdGF0dXMSMAoPYmxvY2tpbmdfZmF1bHRzGAMgAygLMhcu",
            "Ym9zZHluLmFwaS5TeXN0ZW1GYXVsdCrIAgoSUG93ZXJDb21tYW5kU3RhdHVz",
            "EhIKDlNUQVRVU19VTktOT1dOEAASFgoSU1RBVFVTX0lOX1BST0dSRVNTEAES",
            "EgoOU1RBVFVTX1NVQ0NFU1MQAhIgChxTVEFUVVNfU0hPUkVfUE9XRVJfQ09O",
            "TkVDVEVEEAMSGgoWU1RBVFVTX0JBVFRFUllfTUlTU0lORxAEEh4KGlNUQVRV",
            "U19DT01NQU5EX0lOX1BST0dSRVNTEAUSEwoPU1RBVFVTX0VTVE9QUEVEEAYS",
            "EgoOU1RBVFVTX0ZBVUxURUQQBxIZChVTVEFUVVNfSU5URVJOQUxfRVJST1IQ",
            "CBIYChRTVEFUVVNfTElDRU5TRV9FUlJPUhAJEh8KG0lOQ09NUEFUSUJMRV9I",
            "QVJEV0FSRV9FUlJPUhAKEhUKEVNUQVRVU19PVkVSUklEREVOEAtCDEIKUG93",
            "ZXJQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.LeaseReflection.Descriptor, global::Bosdyn.Api.LicenseReflection.Descriptor, global::Bosdyn.Api.RobotStateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bosdyn.Api.PowerCommandStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PowerCommandRequest), global::Bosdyn.Api.PowerCommandRequest.Parser, new[]{ "Header", "Lease", "Request" }, null, new[]{ typeof(global::Bosdyn.Api.PowerCommandRequest.Types.Request) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PowerCommandResponse), global::Bosdyn.Api.PowerCommandResponse.Parser, new[]{ "Header", "LeaseUseResult", "Status", "PowerCommandId", "LicenseStatus", "BlockingFaults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PowerCommandFeedbackRequest), global::Bosdyn.Api.PowerCommandFeedbackRequest.Parser, new[]{ "Header", "PowerCommandId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PowerCommandFeedbackResponse), global::Bosdyn.Api.PowerCommandFeedbackResponse.Parser, new[]{ "Header", "Status", "BlockingFaults" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Feedback on the current state of a power command on the robot.
  /// </summary>
  public enum PowerCommandStatus {
    /// <summary>
    /// Status is not specified.
    /// </summary>
    [pbr::OriginalName("STATUS_UNKNOWN")] StatusUnknown = 0,
    /// <summary>
    /// Power command is executing.
    /// </summary>
    [pbr::OriginalName("STATUS_IN_PROGRESS")] StatusInProgress = 1,
    /// <summary>
    /// Power command succeeded.
    /// </summary>
    [pbr::OriginalName("STATUS_SUCCESS")] StatusSuccess = 2,
    /// <summary>
    /// ERROR: Robot cannot be powered on while on wall power.
    /// </summary>
    [pbr::OriginalName("STATUS_SHORE_POWER_CONNECTED")] StatusShorePowerConnected = 3,
    /// <summary>
    /// ERROR: Battery not inserted into robot.
    /// </summary>
    [pbr::OriginalName("STATUS_BATTERY_MISSING")] StatusBatteryMissing = 4,
    /// <summary>
    /// ERROR: Power command cant be overwritten.
    /// </summary>
    [pbr::OriginalName("STATUS_COMMAND_IN_PROGRESS")] StatusCommandInProgress = 5,
    /// <summary>
    /// ERROR: Cannot power on while estopped. A robot may have multiple estops.
    /// Inspect EStopState for additional info.
    /// </summary>
    [pbr::OriginalName("STATUS_ESTOPPED")] StatusEstopped = 6,
    /// <summary>
    /// ERROR: Cannot power due to a fault. Inspect FaultState for more info.
    /// </summary>
    [pbr::OriginalName("STATUS_FAULTED")] StatusFaulted = 7,
    /// <summary>
    /// ERROR: Internal error occurred, may be clear-able by issuing a power off command.
    /// </summary>
    [pbr::OriginalName("STATUS_INTERNAL_ERROR")] StatusInternalError = 8,
    /// <summary>
    /// ERROR: License check failed. Check license_status field for details.
    /// </summary>
    [pbr::OriginalName("STATUS_LICENSE_ERROR")] StatusLicenseError = 9,
    /// <summary>
    /// ERROR: The Spot hardware is not compatible with the request request.
    /// </summary>
    [pbr::OriginalName("INCOMPATIBLE_HARDWARE_ERROR")] IncompatibleHardwareError = 10,
    /// <summary>
    /// ERROR: Robot has overridden the power command and disabled motor power. In the case
    /// of a commanded power OFF, robot will report SUCCESS if power is disabled.
    /// </summary>
    [pbr::OriginalName("STATUS_OVERRIDDEN")] StatusOverridden = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The PowerCommand request which specifies a change in the robot's motor power.
  /// </summary>
  public sealed partial class PowerCommandRequest : pb::IMessage<PowerCommandRequest> {
    private static readonly pb::MessageParser<PowerCommandRequest> _parser = new pb::MessageParser<PowerCommandRequest>(() => new PowerCommandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PowerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandRequest(PowerCommandRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      request_ = other.request_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandRequest Clone() {
      return new PowerCommandRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to show ownership of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::Bosdyn.Api.PowerCommandRequest.Types.Request request_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerCommandRequest.Types.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (Request != other.Request) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (Request != 0) hash ^= Request.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (Request != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (Request != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Request);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.Request != 0) {
        Request = other.Request;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 24: {
            Request = (global::Bosdyn.Api.PowerCommandRequest.Types.Request) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PowerCommandRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Commands for the robot to execute.
      /// Note that not all Spot robots are compatible with all these commands. Check your robot's
      /// HardwareConfiguration in bosdyn.api.robot_state.
      /// </summary>
      public enum Request {
        /// <summary>
        /// Invalid request; do not use.
        /// </summary>
        [pbr::OriginalName("REQUEST_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cut power to motors immediately.
        /// </summary>
        [pbr::OriginalName("REQUEST_OFF")] Off = 1,
        /// <summary>
        /// Turn on power to the robot motors.
        /// </summary>
        [pbr::OriginalName("REQUEST_ON")] On = 2,
        /// <summary>
        /// Cut power to motors immediately.
        /// </summary>
        [pbr::OriginalName("REQUEST_OFF_MOTORS", PreferredAlias = false)] OffMotors = 1,
        /// <summary>
        /// Turn on power to the robot motors.
        /// </summary>
        [pbr::OriginalName("REQUEST_ON_MOTORS", PreferredAlias = false)] OnMotors = 2,
        /// <summary>
        /// Turn off the robot. Same as physical switch.
        /// </summary>
        [pbr::OriginalName("REQUEST_OFF_ROBOT")] OffRobot = 3,
        /// <summary>
        /// Power cycle the robot. Same as physical switch.
        /// </summary>
        [pbr::OriginalName("REQUEST_CYCLE_ROBOT")] CycleRobot = 4,
        /// <summary>
        /// Cut power to the payload ports.
        /// </summary>
        [pbr::OriginalName("REQUEST_OFF_PAYLOAD_PORTS")] OffPayloadPorts = 5,
        /// <summary>
        /// Turn on power to the payload ports.
        /// </summary>
        [pbr::OriginalName("REQUEST_ON_PAYLOAD_PORTS")] OnPayloadPorts = 6,
        /// <summary>
        /// Cut power to the hardware Wi-Fi radio.
        /// </summary>
        [pbr::OriginalName("REQUEST_OFF_WIFI_RADIO")] OffWifiRadio = 7,
        /// <summary>
        /// Power on the hardware Wi-Fi radio.
        /// </summary>
        [pbr::OriginalName("REQUEST_ON_WIFI_RADIO")] OnWifiRadio = 8,
      }

    }
    #endregion

  }

  /// <summary>
  /// The PowerCommand response message which contains a unique identifier that can be used to
  /// get feedback on the progress of a power command from the power service.
  /// </summary>
  public sealed partial class PowerCommandResponse : pb::IMessage<PowerCommandResponse> {
    private static readonly pb::MessageParser<PowerCommandResponse> _parser = new pb::MessageParser<PowerCommandResponse>(() => new PowerCommandResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerCommandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PowerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandResponse(PowerCommandResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      status_ = other.status_;
      powerCommandId_ = other.powerCommandId_;
      licenseStatus_ = other.licenseStatus_;
      blockingFaults_ = other.blockingFaults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandResponse Clone() {
      return new PowerCommandResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 2;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Details about how the lease was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Bosdyn.Api.PowerCommandStatus status_ = 0;
    /// <summary>
    /// Current feedback of specified command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerCommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "power_command_id" field.</summary>
    public const int PowerCommandIdFieldNumber = 4;
    private uint powerCommandId_;
    /// <summary>
    /// Unique identifier for the command, If empty, was not accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerCommandId {
      get { return powerCommandId_; }
      set {
        powerCommandId_ = value;
      }
    }

    /// <summary>Field number for the "license_status" field.</summary>
    public const int LicenseStatusFieldNumber = 5;
    private global::Bosdyn.Api.LicenseInfo.Types.Status licenseStatus_ = 0;
    /// <summary>
    /// License check status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LicenseInfo.Types.Status LicenseStatus {
      get { return licenseStatus_; }
      set {
        licenseStatus_ = value;
      }
    }

    /// <summary>Field number for the "blocking_faults" field.</summary>
    public const int BlockingFaultsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SystemFault> _repeated_blockingFaults_codec
        = pb::FieldCodec.ForMessage(50, global::Bosdyn.Api.SystemFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SystemFault> blockingFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.SystemFault>();
    /// <summary>
    /// Optional list of active faults blocking success of the PowerCommandRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SystemFault> BlockingFaults {
      get { return blockingFaults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerCommandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerCommandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      if (Status != other.Status) return false;
      if (PowerCommandId != other.PowerCommandId) return false;
      if (LicenseStatus != other.LicenseStatus) return false;
      if(!blockingFaults_.Equals(other.blockingFaults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (PowerCommandId != 0) hash ^= PowerCommandId.GetHashCode();
      if (LicenseStatus != 0) hash ^= LicenseStatus.GetHashCode();
      hash ^= blockingFaults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaseUseResult);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (PowerCommandId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PowerCommandId);
      }
      if (LicenseStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LicenseStatus);
      }
      blockingFaults_.WriteTo(output, _repeated_blockingFaults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (PowerCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerCommandId);
      }
      if (LicenseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LicenseStatus);
      }
      size += blockingFaults_.CalculateSize(_repeated_blockingFaults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerCommandResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.PowerCommandId != 0) {
        PowerCommandId = other.PowerCommandId;
      }
      if (other.LicenseStatus != 0) {
        LicenseStatus = other.LicenseStatus;
      }
      blockingFaults_.Add(other.blockingFaults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
          case 24: {
            Status = (global::Bosdyn.Api.PowerCommandStatus) input.ReadEnum();
            break;
          }
          case 32: {
            PowerCommandId = input.ReadUInt32();
            break;
          }
          case 40: {
            LicenseStatus = (global::Bosdyn.Api.LicenseInfo.Types.Status) input.ReadEnum();
            break;
          }
          case 50: {
            blockingFaults_.AddEntriesFrom(input, _repeated_blockingFaults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The PowerCommandFeedback request message, which can get the feedback for a specific
  /// power command id number.
  /// </summary>
  public sealed partial class PowerCommandFeedbackRequest : pb::IMessage<PowerCommandFeedbackRequest> {
    private static readonly pb::MessageParser<PowerCommandFeedbackRequest> _parser = new pb::MessageParser<PowerCommandFeedbackRequest>(() => new PowerCommandFeedbackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerCommandFeedbackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PowerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackRequest(PowerCommandFeedbackRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      powerCommandId_ = other.powerCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackRequest Clone() {
      return new PowerCommandFeedbackRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "power_command_id" field.</summary>
    public const int PowerCommandIdFieldNumber = 2;
    private uint powerCommandId_;
    /// <summary>
    /// Unique identifier for the command of which feedback is desired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerCommandId {
      get { return powerCommandId_; }
      set {
        powerCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerCommandFeedbackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerCommandFeedbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (PowerCommandId != other.PowerCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (PowerCommandId != 0) hash ^= PowerCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (PowerCommandId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PowerCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (PowerCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerCommandFeedbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.PowerCommandId != 0) {
        PowerCommandId = other.PowerCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            PowerCommandId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The PowerCommandFeedback response message, which contains the progress of the power command.
  /// </summary>
  public sealed partial class PowerCommandFeedbackResponse : pb::IMessage<PowerCommandFeedbackResponse> {
    private static readonly pb::MessageParser<PowerCommandFeedbackResponse> _parser = new pb::MessageParser<PowerCommandFeedbackResponse>(() => new PowerCommandFeedbackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerCommandFeedbackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.PowerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackResponse(PowerCommandFeedbackResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      blockingFaults_ = other.blockingFaults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCommandFeedbackResponse Clone() {
      return new PowerCommandFeedbackResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.PowerCommandStatus status_ = 0;
    /// <summary>
    /// Current status of specified command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerCommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "blocking_faults" field.</summary>
    public const int BlockingFaultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SystemFault> _repeated_blockingFaults_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.SystemFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SystemFault> blockingFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.SystemFault>();
    /// <summary>
    /// Optional list of active faults blocking success of the PowerCommandRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SystemFault> BlockingFaults {
      get { return blockingFaults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerCommandFeedbackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerCommandFeedbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if(!blockingFaults_.Equals(other.blockingFaults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= blockingFaults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      blockingFaults_.WriteTo(output, _repeated_blockingFaults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += blockingFaults_.CalculateSize(_repeated_blockingFaults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerCommandFeedbackResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      blockingFaults_.Add(other.blockingFaults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.PowerCommandStatus) input.ReadEnum();
            break;
          }
          case 26: {
            blockingFaults_.AddEntriesFrom(input, _repeated_blockingFaults_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
