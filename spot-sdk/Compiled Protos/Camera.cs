// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api.SpotCam {

  /// <summary>Holder for reflection information generated from Protos/camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b3MvY2FtZXJhLnByb3RvEhNib3NkeW4uYXBpLnNwb3RfY2FtGhVQ",
            "cm90b3MvZ2VvbWV0cnkucHJvdG8ivgQKBkNhbWVyYRIMCgRuYW1lGAEgASgJ",
            "EiQKCnJlc29sdXRpb24YAiABKAsyEC5ib3NkeW4uYXBpLlZlYzISFwoPYmFz",
            "ZV9mcmFtZV9uYW1lGAMgASgJEjIKEWJhc2VfdGZyb21fc2Vuc29yGAQgASgL",
            "MhMuYm9zZHluLmFwaS5TRTNQb3NlQgIYARIuChFiYXNlX3Rmb3JtX3NlbnNv",
            "chgHIAEoCzITLmJvc2R5bi5hcGkuU0UzUG9zZRJACgdwaW5ob2xlGAUgASgL",
            "Mi0uYm9zZHluLmFwaS5zcG90X2NhbS5DYW1lcmEuUGluaG9sZUludHJpbnNp",
            "Y3NIABJACglzcGhlcmljYWwYBiABKAsyKy5ib3NkeW4uYXBpLnNwb3RfY2Ft",
            "LkNhbWVyYS5TcGhlcmljYWxMaW1pdHNIABqTAQoRUGluaG9sZUludHJpbnNp",
            "Y3MSJgoMZm9jYWxfbGVuZ3RoGAEgASgLMhAuYm9zZHluLmFwaS5WZWMyEiYK",
            "DGNlbnRlcl9wb2ludBgCIAEoCzIQLmJvc2R5bi5hcGkuVmVjMhIKCgJrMRgD",
            "IAEoAhIKCgJrMhgEIAEoAhIKCgJrMxgFIAEoAhIKCgJrNBgGIAEoAhpbCg9T",
            "cGhlcmljYWxMaW1pdHMSIwoJbWluX2FuZ2xlGAEgASgLMhAuYm9zZHluLmFw",
            "aS5WZWMyEiMKCW1heF9hbmdsZRgCIAEoCzIQLmJvc2R5bi5hcGkuVmVjMkIM",
            "CgppbnRyaW5zaWNzQg1CC0NhbWVyYVByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Camera), global::Bosdyn.Api.SpotCam.Camera.Parser, new[]{ "Name", "Resolution", "BaseFrameName", "BaseTfromSensor", "BaseTformSensor", "Pinhole", "Spherical" }, new[]{ "Intrinsics" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics), global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics.Parser, new[]{ "FocalLength", "CenterPoint", "K1", "K2", "K3", "K4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits), global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits.Parser, new[]{ "MinAngle", "MaxAngle" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Camera : pb::IMessage<Camera> {
    private static readonly pb::MessageParser<Camera> _parser = new pb::MessageParser<Camera>(() => new Camera());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Camera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.SpotCam.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera(Camera other) : this() {
      name_ = other.name_;
      resolution_ = other.resolution_ != null ? other.resolution_.Clone() : null;
      baseFrameName_ = other.baseFrameName_;
      baseTfromSensor_ = other.baseTfromSensor_ != null ? other.baseTfromSensor_.Clone() : null;
      baseTformSensor_ = other.baseTformSensor_ != null ? other.baseTformSensor_.Clone() : null;
      switch (other.IntrinsicsCase) {
        case IntrinsicsOneofCase.Pinhole:
          Pinhole = other.Pinhole.Clone();
          break;
        case IntrinsicsOneofCase.Spherical:
          Spherical = other.Spherical.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera Clone() {
      return new Camera(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier for the camera.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 2;
    private global::Bosdyn.Api.Vec2 resolution_;
    /// <summary>
    /// Resolution of the sensor, where x = width and y = height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "base_frame_name" field.</summary>
    public const int BaseFrameNameFieldNumber = 3;
    private string baseFrameName_ = "";
    /// <summary>
    /// The frame name for the parent frame of this camera. This frame will show up in the FrameTreeSnapshot
    /// grabbed from the payload registration service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseFrameName {
      get { return baseFrameName_; }
      set {
        baseFrameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_tfrom_sensor" field.</summary>
    public const int BaseTfromSensorFieldNumber = 4;
    private global::Bosdyn.Api.SE3Pose baseTfromSensor_;
    /// <summary>
    /// 'base_tfrom_sensor' defines the transform from the specific camera to the named base from.
    /// This is deprecated in favor of 'base_tform_sensor' which follows the intended naming convention
    /// and FrameTree directionality convention of the Spot system as defined in geometry.proto.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose BaseTfromSensor {
      get { return baseTfromSensor_; }
      set {
        baseTfromSensor_ = value;
      }
    }

    /// <summary>Field number for the "base_tform_sensor" field.</summary>
    public const int BaseTformSensorFieldNumber = 7;
    private global::Bosdyn.Api.SE3Pose baseTformSensor_;
    /// <summary>
    /// The transform from the named base frame to this specific camera
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Pose BaseTformSensor {
      get { return baseTformSensor_; }
      set {
        baseTformSensor_ = value;
      }
    }

    /// <summary>Field number for the "pinhole" field.</summary>
    public const int PinholeFieldNumber = 5;
    /// <summary>
    /// Physical cameras
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics Pinhole {
      get { return intrinsicsCase_ == IntrinsicsOneofCase.Pinhole ? (global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics) intrinsics_ : null; }
      set {
        intrinsics_ = value;
        intrinsicsCase_ = value == null ? IntrinsicsOneofCase.None : IntrinsicsOneofCase.Pinhole;
      }
    }

    /// <summary>Field number for the "spherical" field.</summary>
    public const int SphericalFieldNumber = 6;
    /// <summary>
    /// Only synthetic spherical panoramas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits Spherical {
      get { return intrinsicsCase_ == IntrinsicsOneofCase.Spherical ? (global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits) intrinsics_ : null; }
      set {
        intrinsics_ = value;
        intrinsicsCase_ = value == null ? IntrinsicsOneofCase.None : IntrinsicsOneofCase.Spherical;
      }
    }

    private object intrinsics_;
    /// <summary>Enum of possible cases for the "intrinsics" oneof.</summary>
    public enum IntrinsicsOneofCase {
      None = 0,
      Pinhole = 5,
      Spherical = 6,
    }
    private IntrinsicsOneofCase intrinsicsCase_ = IntrinsicsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntrinsicsOneofCase IntrinsicsCase {
      get { return intrinsicsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntrinsics() {
      intrinsicsCase_ = IntrinsicsOneofCase.None;
      intrinsics_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Camera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Camera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Resolution, other.Resolution)) return false;
      if (BaseFrameName != other.BaseFrameName) return false;
      if (!object.Equals(BaseTfromSensor, other.BaseTfromSensor)) return false;
      if (!object.Equals(BaseTformSensor, other.BaseTformSensor)) return false;
      if (!object.Equals(Pinhole, other.Pinhole)) return false;
      if (!object.Equals(Spherical, other.Spherical)) return false;
      if (IntrinsicsCase != other.IntrinsicsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (resolution_ != null) hash ^= Resolution.GetHashCode();
      if (BaseFrameName.Length != 0) hash ^= BaseFrameName.GetHashCode();
      if (baseTfromSensor_ != null) hash ^= BaseTfromSensor.GetHashCode();
      if (baseTformSensor_ != null) hash ^= BaseTformSensor.GetHashCode();
      if (intrinsicsCase_ == IntrinsicsOneofCase.Pinhole) hash ^= Pinhole.GetHashCode();
      if (intrinsicsCase_ == IntrinsicsOneofCase.Spherical) hash ^= Spherical.GetHashCode();
      hash ^= (int) intrinsicsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (resolution_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resolution);
      }
      if (BaseFrameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseFrameName);
      }
      if (baseTfromSensor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BaseTfromSensor);
      }
      if (intrinsicsCase_ == IntrinsicsOneofCase.Pinhole) {
        output.WriteRawTag(42);
        output.WriteMessage(Pinhole);
      }
      if (intrinsicsCase_ == IntrinsicsOneofCase.Spherical) {
        output.WriteRawTag(50);
        output.WriteMessage(Spherical);
      }
      if (baseTformSensor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BaseTformSensor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (resolution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
      }
      if (BaseFrameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseFrameName);
      }
      if (baseTfromSensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseTfromSensor);
      }
      if (baseTformSensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseTformSensor);
      }
      if (intrinsicsCase_ == IntrinsicsOneofCase.Pinhole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pinhole);
      }
      if (intrinsicsCase_ == IntrinsicsOneofCase.Spherical) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spherical);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Camera other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.resolution_ != null) {
        if (resolution_ == null) {
          Resolution = new global::Bosdyn.Api.Vec2();
        }
        Resolution.MergeFrom(other.Resolution);
      }
      if (other.BaseFrameName.Length != 0) {
        BaseFrameName = other.BaseFrameName;
      }
      if (other.baseTfromSensor_ != null) {
        if (baseTfromSensor_ == null) {
          BaseTfromSensor = new global::Bosdyn.Api.SE3Pose();
        }
        BaseTfromSensor.MergeFrom(other.BaseTfromSensor);
      }
      if (other.baseTformSensor_ != null) {
        if (baseTformSensor_ == null) {
          BaseTformSensor = new global::Bosdyn.Api.SE3Pose();
        }
        BaseTformSensor.MergeFrom(other.BaseTformSensor);
      }
      switch (other.IntrinsicsCase) {
        case IntrinsicsOneofCase.Pinhole:
          if (Pinhole == null) {
            Pinhole = new global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics();
          }
          Pinhole.MergeFrom(other.Pinhole);
          break;
        case IntrinsicsOneofCase.Spherical:
          if (Spherical == null) {
            Spherical = new global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits();
          }
          Spherical.MergeFrom(other.Spherical);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (resolution_ == null) {
              Resolution = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(Resolution);
            break;
          }
          case 26: {
            BaseFrameName = input.ReadString();
            break;
          }
          case 34: {
            if (baseTfromSensor_ == null) {
              BaseTfromSensor = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(BaseTfromSensor);
            break;
          }
          case 42: {
            global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics subBuilder = new global::Bosdyn.Api.SpotCam.Camera.Types.PinholeIntrinsics();
            if (intrinsicsCase_ == IntrinsicsOneofCase.Pinhole) {
              subBuilder.MergeFrom(Pinhole);
            }
            input.ReadMessage(subBuilder);
            Pinhole = subBuilder;
            break;
          }
          case 50: {
            global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits subBuilder = new global::Bosdyn.Api.SpotCam.Camera.Types.SphericalLimits();
            if (intrinsicsCase_ == IntrinsicsOneofCase.Spherical) {
              subBuilder.MergeFrom(Spherical);
            }
            input.ReadMessage(subBuilder);
            Spherical = subBuilder;
            break;
          }
          case 58: {
            if (baseTformSensor_ == null) {
              BaseTformSensor = new global::Bosdyn.Api.SE3Pose();
            }
            input.ReadMessage(BaseTformSensor);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Camera message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PinholeIntrinsics : pb::IMessage<PinholeIntrinsics> {
        private static readonly pb::MessageParser<PinholeIntrinsics> _parser = new pb::MessageParser<PinholeIntrinsics>(() => new PinholeIntrinsics());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PinholeIntrinsics> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SpotCam.Camera.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeIntrinsics() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeIntrinsics(PinholeIntrinsics other) : this() {
          focalLength_ = other.focalLength_ != null ? other.focalLength_.Clone() : null;
          centerPoint_ = other.centerPoint_ != null ? other.centerPoint_.Clone() : null;
          k1_ = other.k1_;
          k2_ = other.k2_;
          k3_ = other.k3_;
          k4_ = other.k4_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PinholeIntrinsics Clone() {
          return new PinholeIntrinsics(this);
        }

        /// <summary>Field number for the "focal_length" field.</summary>
        public const int FocalLengthFieldNumber = 1;
        private global::Bosdyn.Api.Vec2 focalLength_;
        /// <summary>
        /// Focal_length in pixels
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec2 FocalLength {
          get { return focalLength_; }
          set {
            focalLength_ = value;
          }
        }

        /// <summary>Field number for the "center_point" field.</summary>
        public const int CenterPointFieldNumber = 2;
        private global::Bosdyn.Api.Vec2 centerPoint_;
        /// <summary>
        /// Center point in pixels
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec2 CenterPoint {
          get { return centerPoint_; }
          set {
            centerPoint_ = value;
          }
        }

        /// <summary>Field number for the "k1" field.</summary>
        public const int K1FieldNumber = 3;
        private float k1_;
        /// <summary>
        /// The following 4 parameters are radial distortion coefficeints to 4 orders.
        /// See: https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
        /// If all 4 of these values are 0, do not apply any correction.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float K1 {
          get { return k1_; }
          set {
            k1_ = value;
          }
        }

        /// <summary>Field number for the "k2" field.</summary>
        public const int K2FieldNumber = 4;
        private float k2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float K2 {
          get { return k2_; }
          set {
            k2_ = value;
          }
        }

        /// <summary>Field number for the "k3" field.</summary>
        public const int K3FieldNumber = 5;
        private float k3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float K3 {
          get { return k3_; }
          set {
            k3_ = value;
          }
        }

        /// <summary>Field number for the "k4" field.</summary>
        public const int K4FieldNumber = 6;
        private float k4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float K4 {
          get { return k4_; }
          set {
            k4_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PinholeIntrinsics);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PinholeIntrinsics other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(FocalLength, other.FocalLength)) return false;
          if (!object.Equals(CenterPoint, other.CenterPoint)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K1, other.K1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K2, other.K2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K3, other.K3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K4, other.K4)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (focalLength_ != null) hash ^= FocalLength.GetHashCode();
          if (centerPoint_ != null) hash ^= CenterPoint.GetHashCode();
          if (K1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K1);
          if (K2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K2);
          if (K3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K3);
          if (K4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K4);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (focalLength_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(FocalLength);
          }
          if (centerPoint_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CenterPoint);
          }
          if (K1 != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(K1);
          }
          if (K2 != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(K2);
          }
          if (K3 != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(K3);
          }
          if (K4 != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(K4);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (focalLength_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FocalLength);
          }
          if (centerPoint_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterPoint);
          }
          if (K1 != 0F) {
            size += 1 + 4;
          }
          if (K2 != 0F) {
            size += 1 + 4;
          }
          if (K3 != 0F) {
            size += 1 + 4;
          }
          if (K4 != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PinholeIntrinsics other) {
          if (other == null) {
            return;
          }
          if (other.focalLength_ != null) {
            if (focalLength_ == null) {
              FocalLength = new global::Bosdyn.Api.Vec2();
            }
            FocalLength.MergeFrom(other.FocalLength);
          }
          if (other.centerPoint_ != null) {
            if (centerPoint_ == null) {
              CenterPoint = new global::Bosdyn.Api.Vec2();
            }
            CenterPoint.MergeFrom(other.CenterPoint);
          }
          if (other.K1 != 0F) {
            K1 = other.K1;
          }
          if (other.K2 != 0F) {
            K2 = other.K2;
          }
          if (other.K3 != 0F) {
            K3 = other.K3;
          }
          if (other.K4 != 0F) {
            K4 = other.K4;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (focalLength_ == null) {
                  FocalLength = new global::Bosdyn.Api.Vec2();
                }
                input.ReadMessage(FocalLength);
                break;
              }
              case 18: {
                if (centerPoint_ == null) {
                  CenterPoint = new global::Bosdyn.Api.Vec2();
                }
                input.ReadMessage(CenterPoint);
                break;
              }
              case 29: {
                K1 = input.ReadFloat();
                break;
              }
              case 37: {
                K2 = input.ReadFloat();
                break;
              }
              case 45: {
                K3 = input.ReadFloat();
                break;
              }
              case 53: {
                K4 = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Spherical limits are the minimum and maximum angle of the image.
      /// IE the upper left pixel is at min_angle.x, min_angle.y
      /// and the lower right pixel is at max_angle.x, max_angle.y
      /// for a full-FOV image this will be (-180, 90) and (180, -90)
      /// </summary>
      public sealed partial class SphericalLimits : pb::IMessage<SphericalLimits> {
        private static readonly pb::MessageParser<SphericalLimits> _parser = new pb::MessageParser<SphericalLimits>(() => new SphericalLimits());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SphericalLimits> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.SpotCam.Camera.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SphericalLimits() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SphericalLimits(SphericalLimits other) : this() {
          minAngle_ = other.minAngle_ != null ? other.minAngle_.Clone() : null;
          maxAngle_ = other.maxAngle_ != null ? other.maxAngle_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SphericalLimits Clone() {
          return new SphericalLimits(this);
        }

        /// <summary>Field number for the "min_angle" field.</summary>
        public const int MinAngleFieldNumber = 1;
        private global::Bosdyn.Api.Vec2 minAngle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec2 MinAngle {
          get { return minAngle_; }
          set {
            minAngle_ = value;
          }
        }

        /// <summary>Field number for the "max_angle" field.</summary>
        public const int MaxAngleFieldNumber = 2;
        private global::Bosdyn.Api.Vec2 maxAngle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec2 MaxAngle {
          get { return maxAngle_; }
          set {
            maxAngle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SphericalLimits);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SphericalLimits other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(MinAngle, other.MinAngle)) return false;
          if (!object.Equals(MaxAngle, other.MaxAngle)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (minAngle_ != null) hash ^= MinAngle.GetHashCode();
          if (maxAngle_ != null) hash ^= MaxAngle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (minAngle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(MinAngle);
          }
          if (maxAngle_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MaxAngle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (minAngle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinAngle);
          }
          if (maxAngle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxAngle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SphericalLimits other) {
          if (other == null) {
            return;
          }
          if (other.minAngle_ != null) {
            if (minAngle_ == null) {
              MinAngle = new global::Bosdyn.Api.Vec2();
            }
            MinAngle.MergeFrom(other.MinAngle);
          }
          if (other.maxAngle_ != null) {
            if (maxAngle_ == null) {
              MaxAngle = new global::Bosdyn.Api.Vec2();
            }
            MaxAngle.MergeFrom(other.MaxAngle);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (minAngle_ == null) {
                  MinAngle = new global::Bosdyn.Api.Vec2();
                }
                input.ReadMessage(MinAngle);
                break;
              }
              case 18: {
                if (maxAngle_ == null) {
                  MaxAngle = new global::Bosdyn.Api.Vec2();
                }
                input.ReadMessage(MaxAngle);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
