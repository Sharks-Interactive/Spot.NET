// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/license.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/license.proto</summary>
  public static partial class LicenseReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/license.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LicenseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3MvbGljZW5zZS5wcm90bxIKYm9zZHluLmFwaRoTUHJvdG9zL2hl",
            "YWRlci5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKN",
            "AwoLTGljZW5zZUluZm8SLgoGc3RhdHVzGAEgASgOMh4uYm9zZHluLmFwaS5M",
            "aWNlbnNlSW5mby5TdGF0dXMSCgoCaWQYAiABKAkSFAoMcm9ib3Rfc2VyaWFs",
            "GAMgASgJEjQKEG5vdF92YWxpZF9iZWZvcmUYBCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjMKD25vdF92YWxpZF9hZnRlchgFIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGQoRbGljZW5zZWRfZmVhdHVyZXMY",
            "BiADKAkipQEKBlN0YXR1cxISCg5TVEFUVVNfVU5LTk9XThAAEhAKDFNUQVRV",
            "U19WQUxJRBABEhIKDlNUQVRVU19FWFBJUkVEEAISGAoUU1RBVFVTX05PVF9Z",
            "RVRfVkFMSUQQAxIUChBTVEFUVVNfTUFMRk9STUVEEAQSGgoWU1RBVFVTX1NF",
            "UklBTF9NSVNNQVRDSBAFEhUKEVNUQVRVU19OT19MSUNFTlNFEAYiQgoVR2V0",
            "TGljZW5zZUluZm9SZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5h",
            "cGkuUmVxdWVzdEhlYWRlciJuChZHZXRMaWNlbnNlSW5mb1Jlc3BvbnNlEioK",
            "BmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISKAoH",
            "bGljZW5zZRgCIAEoCzIXLmJvc2R5bi5hcGkuTGljZW5zZUluZm8iXAoYR2V0",
            "RmVhdHVyZUVuYWJsZWRSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5",
            "bi5hcGkuUmVxdWVzdEhlYWRlchIVCg1mZWF0dXJlX2NvZGVzGAIgAygJItIB",
            "ChlHZXRGZWF0dXJlRW5hYmxlZFJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIa",
            "LmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISUgoPZmVhdHVyZV9lbmFibGVk",
            "GAIgAygLMjkuYm9zZHluLmFwaS5HZXRGZWF0dXJlRW5hYmxlZFJlc3BvbnNl",
            "LkZlYXR1cmVFbmFibGVkRW50cnkaNQoTRmVhdHVyZUVuYWJsZWRFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAg6AjgBQg5CDExpY2Vuc2VQcm90",
            "b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LicenseInfo), global::Bosdyn.Api.LicenseInfo.Parser, new[]{ "Status", "Id", "RobotSerial", "NotValidBefore", "NotValidAfter", "LicensedFeatures" }, null, new[]{ typeof(global::Bosdyn.Api.LicenseInfo.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLicenseInfoRequest), global::Bosdyn.Api.GetLicenseInfoRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetLicenseInfoResponse), global::Bosdyn.Api.GetLicenseInfoResponse.Parser, new[]{ "Header", "License" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetFeatureEnabledRequest), global::Bosdyn.Api.GetFeatureEnabledRequest.Parser, new[]{ "Header", "FeatureCodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetFeatureEnabledResponse), global::Bosdyn.Api.GetFeatureEnabledResponse.Parser, new[]{ "Header", "FeatureEnabled" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LicenseInfo : pb::IMessage<LicenseInfo> {
    private static readonly pb::MessageParser<LicenseInfo> _parser = new pb::MessageParser<LicenseInfo>(() => new LicenseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LicenseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LicenseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseInfo(LicenseInfo other) : this() {
      status_ = other.status_;
      id_ = other.id_;
      robotSerial_ = other.robotSerial_;
      notValidBefore_ = other.notValidBefore_ != null ? other.notValidBefore_.Clone() : null;
      notValidAfter_ = other.notValidAfter_ != null ? other.notValidAfter_.Clone() : null;
      licensedFeatures_ = other.licensedFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LicenseInfo Clone() {
      return new LicenseInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Bosdyn.Api.LicenseInfo.Types.Status status_ = 0;
    /// <summary>
    /// The status of the uploaded license for this robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LicenseInfo.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// Unique license number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robot_serial" field.</summary>
    public const int RobotSerialFieldNumber = 3;
    private string robotSerial_ = "";
    /// <summary>
    /// Serial number of the robot this license covers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotSerial {
      get { return robotSerial_; }
      set {
        robotSerial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "not_valid_before" field.</summary>
    public const int NotValidBeforeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp notValidBefore_;
    /// <summary>
    /// The license is not valid for use for any dates before this timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NotValidBefore {
      get { return notValidBefore_; }
      set {
        notValidBefore_ = value;
      }
    }

    /// <summary>Field number for the "not_valid_after" field.</summary>
    public const int NotValidAfterFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp notValidAfter_;
    /// <summary>
    /// The license is not valid for use for any dates after this timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NotValidAfter {
      get { return notValidAfter_; }
      set {
        notValidAfter_ = value;
      }
    }

    /// <summary>Field number for the "licensed_features" field.</summary>
    public const int LicensedFeaturesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_licensedFeatures_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> licensedFeatures_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// Human readable list of licensed features included for this license.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LicensedFeatures {
      get { return licensedFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LicenseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LicenseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Id != other.Id) return false;
      if (RobotSerial != other.RobotSerial) return false;
      if (!object.Equals(NotValidBefore, other.NotValidBefore)) return false;
      if (!object.Equals(NotValidAfter, other.NotValidAfter)) return false;
      if(!licensedFeatures_.Equals(other.licensedFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (RobotSerial.Length != 0) hash ^= RobotSerial.GetHashCode();
      if (notValidBefore_ != null) hash ^= NotValidBefore.GetHashCode();
      if (notValidAfter_ != null) hash ^= NotValidAfter.GetHashCode();
      hash ^= licensedFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (RobotSerial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RobotSerial);
      }
      if (notValidBefore_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NotValidBefore);
      }
      if (notValidAfter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NotValidAfter);
      }
      licensedFeatures_.WriteTo(output, _repeated_licensedFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (RobotSerial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotSerial);
      }
      if (notValidBefore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotValidBefore);
      }
      if (notValidAfter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotValidAfter);
      }
      size += licensedFeatures_.CalculateSize(_repeated_licensedFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LicenseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.RobotSerial.Length != 0) {
        RobotSerial = other.RobotSerial;
      }
      if (other.notValidBefore_ != null) {
        if (notValidBefore_ == null) {
          NotValidBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NotValidBefore.MergeFrom(other.NotValidBefore);
      }
      if (other.notValidAfter_ != null) {
        if (notValidAfter_ == null) {
          NotValidAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NotValidAfter.MergeFrom(other.NotValidAfter);
      }
      licensedFeatures_.Add(other.licensedFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Bosdyn.Api.LicenseInfo.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            RobotSerial = input.ReadString();
            break;
          }
          case 34: {
            if (notValidBefore_ == null) {
              NotValidBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NotValidBefore);
            break;
          }
          case 42: {
            if (notValidAfter_ == null) {
              NotValidAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NotValidAfter);
            break;
          }
          case 50: {
            licensedFeatures_.AddEntriesFrom(input, _repeated_licensedFeatures_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LicenseInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("STATUS_VALID")] Valid = 1,
        [pbr::OriginalName("STATUS_EXPIRED")] Expired = 2,
        [pbr::OriginalName("STATUS_NOT_YET_VALID")] NotYetValid = 3,
        [pbr::OriginalName("STATUS_MALFORMED")] Malformed = 4,
        [pbr::OriginalName("STATUS_SERIAL_MISMATCH")] SerialMismatch = 5,
        [pbr::OriginalName("STATUS_NO_LICENSE")] NoLicense = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// </summary>
  public sealed partial class GetLicenseInfoRequest : pb::IMessage<GetLicenseInfoRequest> {
    private static readonly pb::MessageParser<GetLicenseInfoRequest> _parser = new pb::MessageParser<GetLicenseInfoRequest>(() => new GetLicenseInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLicenseInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LicenseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoRequest(GetLicenseInfoRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoRequest Clone() {
      return new GetLicenseInfoRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLicenseInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLicenseInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLicenseInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLicenseInfoResponse : pb::IMessage<GetLicenseInfoResponse> {
    private static readonly pb::MessageParser<GetLicenseInfoResponse> _parser = new pb::MessageParser<GetLicenseInfoResponse>(() => new GetLicenseInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLicenseInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LicenseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoResponse(GetLicenseInfoResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      license_ = other.license_ != null ? other.license_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLicenseInfoResponse Clone() {
      return new GetLicenseInfoResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 2;
    private global::Bosdyn.Api.LicenseInfo license_;
    /// <summary>
    /// The details about the current license that is uploaded to the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LicenseInfo License {
      get { return license_; }
      set {
        license_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLicenseInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLicenseInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(License, other.License)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (license_ != null) hash ^= License.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (license_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(License);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (license_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(License);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLicenseInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.license_ != null) {
        if (license_ == null) {
          License = new global::Bosdyn.Api.LicenseInfo();
        }
        License.MergeFrom(other.License);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (license_ == null) {
              License = new global::Bosdyn.Api.LicenseInfo();
            }
            input.ReadMessage(License);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFeatureEnabledRequest : pb::IMessage<GetFeatureEnabledRequest> {
    private static readonly pb::MessageParser<GetFeatureEnabledRequest> _parser = new pb::MessageParser<GetFeatureEnabledRequest>(() => new GetFeatureEnabledRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFeatureEnabledRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LicenseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledRequest(GetFeatureEnabledRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      featureCodes_ = other.featureCodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledRequest Clone() {
      return new GetFeatureEnabledRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "feature_codes" field.</summary>
    public const int FeatureCodesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_featureCodes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> featureCodes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Check if specific named features are enabled on the robot under the currently
    /// loaded license.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FeatureCodes {
      get { return featureCodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFeatureEnabledRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFeatureEnabledRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!featureCodes_.Equals(other.featureCodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= featureCodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      featureCodes_.WriteTo(output, _repeated_featureCodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += featureCodes_.CalculateSize(_repeated_featureCodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFeatureEnabledRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      featureCodes_.Add(other.featureCodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            featureCodes_.AddEntriesFrom(input, _repeated_featureCodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFeatureEnabledResponse : pb::IMessage<GetFeatureEnabledResponse> {
    private static readonly pb::MessageParser<GetFeatureEnabledResponse> _parser = new pb::MessageParser<GetFeatureEnabledResponse>(() => new GetFeatureEnabledResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFeatureEnabledResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LicenseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledResponse(GetFeatureEnabledResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      featureEnabled_ = other.featureEnabled_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFeatureEnabledResponse Clone() {
      return new GetFeatureEnabledResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "feature_enabled" field.</summary>
    public const int FeatureEnabledFieldNumber = 2;
    private static readonly pbc::MapField<string, bool>.Codec _map_featureEnabled_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 18);
    private readonly pbc::MapField<string, bool> featureEnabled_ = new pbc::MapField<string, bool>();
    /// <summary>
    /// The resulting map showing the feature name (as the map key) and a boolean indicating
    /// if the feature is enabled with this license (as the map value).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> FeatureEnabled {
      get { return featureEnabled_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFeatureEnabledResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFeatureEnabledResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!FeatureEnabled.Equals(other.FeatureEnabled)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= FeatureEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      featureEnabled_.WriteTo(output, _map_featureEnabled_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += featureEnabled_.CalculateSize(_map_featureEnabled_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFeatureEnabledResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      featureEnabled_.Add(other.featureEnabled_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            featureEnabled_.AddEntriesFrom(input, _map_featureEnabled_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
