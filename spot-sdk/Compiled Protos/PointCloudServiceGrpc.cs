// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/point_cloud_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The point cloud service provides access to one or more point cloud sources, for example
  /// from a lidar. It supports querying the list of available sources provided by the service
  /// and it supports requesting the latest point cloud data for each source by name.
  /// </summary>
  public static partial class PointCloudService
  {
    static readonly string __ServiceName = "bosdyn.api.PointCloudService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.ListPointCloudSourcesRequest> __Marshaller_bosdyn_api_ListPointCloudSourcesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListPointCloudSourcesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListPointCloudSourcesResponse> __Marshaller_bosdyn_api_ListPointCloudSourcesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListPointCloudSourcesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetPointCloudRequest> __Marshaller_bosdyn_api_GetPointCloudRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetPointCloudRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetPointCloudResponse> __Marshaller_bosdyn_api_GetPointCloudResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetPointCloudResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.ListPointCloudSourcesRequest, global::Bosdyn.Api.ListPointCloudSourcesResponse> __Method_ListPointCloudSources = new grpc::Method<global::Bosdyn.Api.ListPointCloudSourcesRequest, global::Bosdyn.Api.ListPointCloudSourcesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPointCloudSources",
        __Marshaller_bosdyn_api_ListPointCloudSourcesRequest,
        __Marshaller_bosdyn_api_ListPointCloudSourcesResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetPointCloudRequest, global::Bosdyn.Api.GetPointCloudResponse> __Method_GetPointCloud = new grpc::Method<global::Bosdyn.Api.GetPointCloudRequest, global::Bosdyn.Api.GetPointCloudResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPointCloud",
        __Marshaller_bosdyn_api_GetPointCloudRequest,
        __Marshaller_bosdyn_api_GetPointCloudResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.PointCloudServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PointCloudService</summary>
    [grpc::BindServiceMethod(typeof(PointCloudService), "BindService")]
    public abstract partial class PointCloudServiceBase
    {
      /// <summary>
      /// Obtain the list of PointCloudSources for this given service.
      /// Note that there may be multiple PointCloudServices running, each with their own set of sources
      /// The name field keys access to individual point clouds when calling GetPointCloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListPointCloudSourcesResponse> ListPointCloudSources(global::Bosdyn.Api.ListPointCloudSourcesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request point clouds by source name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetPointCloudResponse> GetPointCloud(global::Bosdyn.Api.GetPointCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PointCloudService</summary>
    public partial class PointCloudServiceClient : grpc::ClientBase<PointCloudServiceClient>
    {
      /// <summary>Creates a new client for PointCloudService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PointCloudServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PointCloudService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PointCloudServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PointCloudServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PointCloudServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Obtain the list of PointCloudSources for this given service.
      /// Note that there may be multiple PointCloudServices running, each with their own set of sources
      /// The name field keys access to individual point clouds when calling GetPointCloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListPointCloudSourcesResponse ListPointCloudSources(global::Bosdyn.Api.ListPointCloudSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPointCloudSources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtain the list of PointCloudSources for this given service.
      /// Note that there may be multiple PointCloudServices running, each with their own set of sources
      /// The name field keys access to individual point clouds when calling GetPointCloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListPointCloudSourcesResponse ListPointCloudSources(global::Bosdyn.Api.ListPointCloudSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPointCloudSources, null, options, request);
      }
      /// <summary>
      /// Obtain the list of PointCloudSources for this given service.
      /// Note that there may be multiple PointCloudServices running, each with their own set of sources
      /// The name field keys access to individual point clouds when calling GetPointCloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListPointCloudSourcesResponse> ListPointCloudSourcesAsync(global::Bosdyn.Api.ListPointCloudSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPointCloudSourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtain the list of PointCloudSources for this given service.
      /// Note that there may be multiple PointCloudServices running, each with their own set of sources
      /// The name field keys access to individual point clouds when calling GetPointCloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListPointCloudSourcesResponse> ListPointCloudSourcesAsync(global::Bosdyn.Api.ListPointCloudSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPointCloudSources, null, options, request);
      }
      /// <summary>
      /// Request point clouds by source name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetPointCloudResponse GetPointCloud(global::Bosdyn.Api.GetPointCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPointCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request point clouds by source name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetPointCloudResponse GetPointCloud(global::Bosdyn.Api.GetPointCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPointCloud, null, options, request);
      }
      /// <summary>
      /// Request point clouds by source name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetPointCloudResponse> GetPointCloudAsync(global::Bosdyn.Api.GetPointCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPointCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request point clouds by source name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetPointCloudResponse> GetPointCloudAsync(global::Bosdyn.Api.GetPointCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPointCloud, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PointCloudServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PointCloudServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PointCloudServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListPointCloudSources, serviceImpl.ListPointCloudSources)
          .AddMethod(__Method_GetPointCloud, serviceImpl.GetPointCloud).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PointCloudServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListPointCloudSources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListPointCloudSourcesRequest, global::Bosdyn.Api.ListPointCloudSourcesResponse>(serviceImpl.ListPointCloudSources));
      serviceBinder.AddMethod(__Method_GetPointCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetPointCloudRequest, global::Bosdyn.Api.GetPointCloudResponse>(serviceImpl.GetPointCloud));
    }

  }
}
#endregion
