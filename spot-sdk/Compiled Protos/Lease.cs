// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/lease.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/lease.proto</summary>
  public static partial class LeaseReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/lease.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LeaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvbGVhc2UucHJvdG8SCmJvc2R5bi5hcGkaE1Byb3Rvcy9oZWFk",
            "ZXIucHJvdG8iUAoFTGVhc2USEAoIcmVzb3VyY2UYASABKAkSDQoFZXBvY2gY",
            "AiABKAkSEAoIc2VxdWVuY2UYAyADKA0SFAoMY2xpZW50X25hbWVzGAQgAygJ",
            "IlEKDFJlc291cmNlVHJlZRIQCghyZXNvdXJjZRgBIAEoCRIvCg1zdWJfcmVz",
            "b3VyY2VzGAIgAygLMhguYm9zZHluLmFwaS5SZXNvdXJjZVRyZWUiNAoKTGVh",
            "c2VPd25lchITCgtjbGllbnRfbmFtZRgBIAEoCRIRCgl1c2VyX25hbWUYAiAB",
            "KAkiuQMKDkxlYXNlVXNlUmVzdWx0EjEKBnN0YXR1cxgBIAEoDjIhLmJvc2R5",
            "bi5hcGkuTGVhc2VVc2VSZXN1bHQuU3RhdHVzEiUKBW93bmVyGAIgASgLMhYu",
            "Ym9zZHluLmFwaS5MZWFzZU93bmVyEioKD2F0dGVtcHRlZF9sZWFzZRgDIAEo",
            "CzIRLmJvc2R5bi5hcGkuTGVhc2USKQoOcHJldmlvdXNfbGVhc2UYBCABKAsy",
            "ES5ib3NkeW4uYXBpLkxlYXNlEi0KEmxhdGVzdF9rbm93bl9sZWFzZRgFIAEo",
            "CzIRLmJvc2R5bi5hcGkuTGVhc2USKwoQbGF0ZXN0X3Jlc291cmNlcxgGIAMo",
            "CzIRLmJvc2R5bi5hcGkuTGVhc2UimQEKBlN0YXR1cxISCg5TVEFUVVNfVU5L",
            "Tk9XThAAEg0KCVNUQVRVU19PSxABEhgKFFNUQVRVU19JTlZBTElEX0xFQVNF",
            "EAISEAoMU1RBVFVTX09MREVSEAMSEgoOU1RBVFVTX1JFVk9LRUQQBBIUChBT",
            "VEFUVVNfVU5NQU5BR0VEEAUSFgoSU1RBVFVTX1dST05HX0VQT0NIEAYiUgoT",
            "QWNxdWlyZUxlYXNlUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4u",
            "YXBpLlJlcXVlc3RIZWFkZXISEAoIcmVzb3VyY2UYAiABKAki4AIKFEFjcXVp",
            "cmVMZWFzZVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGku",
            "UmVzcG9uc2VIZWFkZXISNwoGc3RhdHVzGAIgASgOMicuYm9zZHluLmFwaS5B",
            "Y3F1aXJlTGVhc2VSZXNwb25zZS5TdGF0dXMSIAoFbGVhc2UYAyABKAsyES5i",
            "b3NkeW4uYXBpLkxlYXNlEisKC2xlYXNlX293bmVyGAQgASgLMhYuYm9zZHlu",
            "LmFwaS5MZWFzZU93bmVyIpMBCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04Q",
            "ABINCglTVEFUVVNfT0sQARIjCh9TVEFUVVNfUkVTT1VSQ0VfQUxSRUFEWV9D",
            "TEFJTUVEEAISGwoXU1RBVFVTX0lOVkFMSURfUkVTT1VSQ0UQAxIkCiBTVEFU",
            "VVNfTk9UX0FVVEhPUklUQVRJVkVfU0VSVklDRRAEIk8KEFRha2VMZWFzZVJl",
            "cXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVh",
            "ZGVyEhAKCHJlc291cmNlGAIgASgJIrQCChFUYWtlTGVhc2VSZXNwb25zZRIq",
            "CgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEjQK",
            "BnN0YXR1cxgCIAEoDjIkLmJvc2R5bi5hcGkuVGFrZUxlYXNlUmVzcG9uc2Uu",
            "U3RhdHVzEiAKBWxlYXNlGAMgASgLMhEuYm9zZHluLmFwaS5MZWFzZRIrCgts",
            "ZWFzZV9vd25lchgEIAEoCzIWLmJvc2R5bi5hcGkuTGVhc2VPd25lciJuCgZT",
            "dGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABINCglTVEFUVVNfT0sQARIbChdT",
            "VEFUVVNfSU5WQUxJRF9SRVNPVVJDRRACEiQKIFNUQVRVU19OT1RfQVVUSE9S",
            "SVRBVElWRV9TRVJWSUNFEAMiYQoSUmV0dXJuTGVhc2VSZXF1ZXN0EikKBmhl",
            "YWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlchIgCgVsZWFz",
            "ZRgCIAEoCzIRLmJvc2R5bi5hcGkuTGVhc2UihwIKE1JldHVybkxlYXNlUmVz",
            "cG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhl",
            "YWRlchI2CgZzdGF0dXMYAiABKA4yJi5ib3NkeW4uYXBpLlJldHVybkxlYXNl",
            "UmVzcG9uc2UuU3RhdHVzIosBCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04Q",
            "ABINCglTVEFUVVNfT0sQARIbChdTVEFUVVNfSU5WQUxJRF9SRVNPVVJDRRAC",
            "EhsKF1NUQVRVU19OT1RfQUNUSVZFX0xFQVNFEAMSJAogU1RBVFVTX05PVF9B",
            "VVRIT1JJVEFUSVZFX1NFUlZJQ0UQBCJfChFMaXN0TGVhc2VzUmVxdWVzdBIp",
            "CgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVlc3RIZWFkZXISHwoX",
            "aW5jbHVkZV9mdWxsX2xlYXNlX2luZm8YAiABKAgicAoNTGVhc2VSZXNvdXJj",
            "ZRIQCghyZXNvdXJjZRgBIAEoCRIgCgVsZWFzZRgCIAEoCzIRLmJvc2R5bi5h",
            "cGkuTGVhc2USKwoLbGVhc2Vfb3duZXIYAyABKAsyFi5ib3NkeW4uYXBpLkxl",
            "YXNlT3duZXIinwEKEkxpc3RMZWFzZXNSZXNwb25zZRIqCgZoZWFkZXIYASAB",
            "KAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEiwKCXJlc291cmNlcxgC",
            "IAMoCzIZLmJvc2R5bi5hcGkuTGVhc2VSZXNvdXJjZRIvCg1yZXNvdXJjZV90",
            "cmVlGAMgASgLMhguYm9zZHluLmFwaS5SZXNvdXJjZVRyZWUiYQoSUmV0YWlu",
            "TGVhc2VSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVx",
            "dWVzdEhlYWRlchIgCgVsZWFzZRgCIAEoCzIRLmJvc2R5bi5hcGkuTGVhc2Ui",
            "dwoTUmV0YWluTGVhc2VSZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3Nk",
            "eW4uYXBpLlJlc3BvbnNlSGVhZGVyEjQKEGxlYXNlX3VzZV9yZXN1bHQYAiAB",
            "KAsyGi5ib3NkeW4uYXBpLkxlYXNlVXNlUmVzdWx0QgxCCkxlYXNlUHJvdG9i",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Lease), global::Bosdyn.Api.Lease.Parser, new[]{ "Resource", "Epoch", "Sequence", "ClientNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ResourceTree), global::Bosdyn.Api.ResourceTree.Parser, new[]{ "Resource", "SubResources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LeaseOwner), global::Bosdyn.Api.LeaseOwner.Parser, new[]{ "ClientName", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LeaseUseResult), global::Bosdyn.Api.LeaseUseResult.Parser, new[]{ "Status", "Owner", "AttemptedLease", "PreviousLease", "LatestKnownLease", "LatestResources" }, null, new[]{ typeof(global::Bosdyn.Api.LeaseUseResult.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquireLeaseRequest), global::Bosdyn.Api.AcquireLeaseRequest.Parser, new[]{ "Header", "Resource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquireLeaseResponse), global::Bosdyn.Api.AcquireLeaseResponse.Parser, new[]{ "Header", "Status", "Lease", "LeaseOwner" }, null, new[]{ typeof(global::Bosdyn.Api.AcquireLeaseResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TakeLeaseRequest), global::Bosdyn.Api.TakeLeaseRequest.Parser, new[]{ "Header", "Resource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TakeLeaseResponse), global::Bosdyn.Api.TakeLeaseResponse.Parser, new[]{ "Header", "Status", "Lease", "LeaseOwner" }, null, new[]{ typeof(global::Bosdyn.Api.TakeLeaseResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ReturnLeaseRequest), global::Bosdyn.Api.ReturnLeaseRequest.Parser, new[]{ "Header", "Lease" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ReturnLeaseResponse), global::Bosdyn.Api.ReturnLeaseResponse.Parser, new[]{ "Header", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.ReturnLeaseResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListLeasesRequest), global::Bosdyn.Api.ListLeasesRequest.Parser, new[]{ "Header", "IncludeFullLeaseInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.LeaseResource), global::Bosdyn.Api.LeaseResource.Parser, new[]{ "Resource", "Lease", "LeaseOwner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListLeasesResponse), global::Bosdyn.Api.ListLeasesResponse.Parser, new[]{ "Header", "Resources", "ResourceTree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RetainLeaseRequest), global::Bosdyn.Api.RetainLeaseRequest.Parser, new[]{ "Header", "Lease" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RetainLeaseResponse), global::Bosdyn.Api.RetainLeaseResponse.Parser, new[]{ "Header", "LeaseUseResult" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Leases are used to verify that a client has exclusive access to a shared
  /// resources. Examples of shared resources are the motors for a robot, or
  /// indicator lights on a robot.
  /// Leases are initially obtained by clients from the LeaseService. Clients
  /// then attach Leases to Commands which require them. Clients may also
  /// generate sub-Leases to delegate out control of the resource to other
  /// services.
  /// </summary>
  public sealed partial class Lease : pb::IMessage<Lease> {
    private static readonly pb::MessageParser<Lease> _parser = new pb::MessageParser<Lease>(() => new Lease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease(Lease other) : this() {
      resource_ = other.resource_;
      epoch_ = other.epoch_;
      sequence_ = other.sequence_.Clone();
      clientNames_ = other.clientNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease Clone() {
      return new Lease(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private string resource_ = "";
    /// <summary>
    /// The resource that the Lease is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 2;
    private string epoch_ = "";
    /// <summary>
    /// The epoch for the Lease. The sequences field are scoped to a particular epoch.
    /// One example of where this can be used is to generate a random epoch
    /// at LeaseService startup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Epoch {
      get { return epoch_; }
      set {
        epoch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_sequence_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> sequence_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Logical vector clock indicating when the Lease was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Sequence {
      get { return sequence_; }
    }

    /// <summary>Field number for the "client_names" field.</summary>
    public const int ClientNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_clientNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> clientNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The set of different clients which have sent/receieved the lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClientNames {
      get { return clientNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resource != other.Resource) return false;
      if (Epoch != other.Epoch) return false;
      if(!sequence_.Equals(other.sequence_)) return false;
      if(!clientNames_.Equals(other.clientNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (Epoch.Length != 0) hash ^= Epoch.GetHashCode();
      hash ^= sequence_.GetHashCode();
      hash ^= clientNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resource.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Resource);
      }
      if (Epoch.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Epoch);
      }
      sequence_.WriteTo(output, _repeated_sequence_codec);
      clientNames_.WriteTo(output, _repeated_clientNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (Epoch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Epoch);
      }
      size += sequence_.CalculateSize(_repeated_sequence_codec);
      size += clientNames_.CalculateSize(_repeated_clientNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lease other) {
      if (other == null) {
        return;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.Epoch.Length != 0) {
        Epoch = other.Epoch;
      }
      sequence_.Add(other.sequence_);
      clientNames_.Add(other.clientNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Resource = input.ReadString();
            break;
          }
          case 18: {
            Epoch = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            sequence_.AddEntriesFrom(input, _repeated_sequence_codec);
            break;
          }
          case 34: {
            clientNames_.AddEntriesFrom(input, _repeated_clientNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Lease resources can be divided into a hierarchy of sub-resources that can
  /// be commanded together. This message describes the hierarchy of a resource.
  /// </summary>
  public sealed partial class ResourceTree : pb::IMessage<ResourceTree> {
    private static readonly pb::MessageParser<ResourceTree> _parser = new pb::MessageParser<ResourceTree>(() => new ResourceTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTree(ResourceTree other) : this() {
      resource_ = other.resource_;
      subResources_ = other.subResources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTree Clone() {
      return new ResourceTree(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private string resource_ = "";
    /// <summary>
    /// The name of this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_resources" field.</summary>
    public const int SubResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ResourceTree> _repeated_subResources_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ResourceTree.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ResourceTree> subResources_ = new pbc::RepeatedField<global::Bosdyn.Api.ResourceTree>();
    /// <summary>
    /// Sub-resources that make up this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ResourceTree> SubResources {
      get { return subResources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resource != other.Resource) return false;
      if(!subResources_.Equals(other.subResources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      hash ^= subResources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resource.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Resource);
      }
      subResources_.WriteTo(output, _repeated_subResources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      size += subResources_.CalculateSize(_repeated_subResources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceTree other) {
      if (other == null) {
        return;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      subResources_.Add(other.subResources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Resource = input.ReadString();
            break;
          }
          case 18: {
            subResources_.AddEntriesFrom(input, _repeated_subResources_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Details about who currently owns the Lease for a resource.
  /// </summary>
  public sealed partial class LeaseOwner : pb::IMessage<LeaseOwner> {
    private static readonly pb::MessageParser<LeaseOwner> _parser = new pb::MessageParser<LeaseOwner>(() => new LeaseOwner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseOwner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseOwner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseOwner(LeaseOwner other) : this() {
      clientName_ = other.clientName_;
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseOwner Clone() {
      return new LeaseOwner(this);
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 1;
    private string clientName_ = "";
    /// <summary>
    /// The name of the client application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    /// The name of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseOwner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseOwner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientName != other.ClientName) return false;
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientName);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseOwner other) {
      if (other == null) {
        return;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientName = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result for when a Lease is used - for example, in a LeaseRetainer, or
  /// associated with a command.
  /// </summary>
  public sealed partial class LeaseUseResult : pb::IMessage<LeaseUseResult> {
    private static readonly pb::MessageParser<LeaseUseResult> _parser = new pb::MessageParser<LeaseUseResult>(() => new LeaseUseResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseUseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseUseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseUseResult(LeaseUseResult other) : this() {
      status_ = other.status_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      attemptedLease_ = other.attemptedLease_ != null ? other.attemptedLease_.Clone() : null;
      previousLease_ = other.previousLease_ != null ? other.previousLease_.Clone() : null;
      latestKnownLease_ = other.latestKnownLease_ != null ? other.latestKnownLease_.Clone() : null;
      latestResources_ = other.latestResources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseUseResult Clone() {
      return new LeaseUseResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Bosdyn.Api.LeaseUseResult.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::Bosdyn.Api.LeaseOwner owner_;
    /// <summary>
    /// The current lease owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseOwner Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "attempted_lease" field.</summary>
    public const int AttemptedLeaseFieldNumber = 3;
    private global::Bosdyn.Api.Lease attemptedLease_;
    /// <summary>
    /// The lease which was attempted for use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease AttemptedLease {
      get { return attemptedLease_; }
      set {
        attemptedLease_ = value;
      }
    }

    /// <summary>Field number for the "previous_lease" field.</summary>
    public const int PreviousLeaseFieldNumber = 4;
    private global::Bosdyn.Api.Lease previousLease_;
    /// <summary>
    /// The previous lease, if any, which was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease PreviousLease {
      get { return previousLease_; }
      set {
        previousLease_ = value;
      }
    }

    /// <summary>Field number for the "latest_known_lease" field.</summary>
    public const int LatestKnownLeaseFieldNumber = 5;
    private global::Bosdyn.Api.Lease latestKnownLease_;
    /// <summary>
    /// The "latest"/"most recent" lease known to the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease LatestKnownLease {
      get { return latestKnownLease_; }
      set {
        latestKnownLease_ = value;
      }
    }

    /// <summary>Field number for the "latest_resources" field.</summary>
    public const int LatestResourcesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Lease> _repeated_latestResources_codec
        = pb::FieldCodec.ForMessage(50, global::Bosdyn.Api.Lease.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Lease> latestResources_ = new pbc::RepeatedField<global::Bosdyn.Api.Lease>();
    /// <summary>
    /// Represents the latest "leaf" resources of the hierarchy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Lease> LatestResources {
      get { return latestResources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseUseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseUseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(AttemptedLease, other.AttemptedLease)) return false;
      if (!object.Equals(PreviousLease, other.PreviousLease)) return false;
      if (!object.Equals(LatestKnownLease, other.LatestKnownLease)) return false;
      if(!latestResources_.Equals(other.latestResources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (attemptedLease_ != null) hash ^= AttemptedLease.GetHashCode();
      if (previousLease_ != null) hash ^= PreviousLease.GetHashCode();
      if (latestKnownLease_ != null) hash ^= LatestKnownLease.GetHashCode();
      hash ^= latestResources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (attemptedLease_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AttemptedLease);
      }
      if (previousLease_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PreviousLease);
      }
      if (latestKnownLease_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LatestKnownLease);
      }
      latestResources_.WriteTo(output, _repeated_latestResources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (attemptedLease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttemptedLease);
      }
      if (previousLease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousLease);
      }
      if (latestKnownLease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestKnownLease);
      }
      size += latestResources_.CalculateSize(_repeated_latestResources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseUseResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::Bosdyn.Api.LeaseOwner();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.attemptedLease_ != null) {
        if (attemptedLease_ == null) {
          AttemptedLease = new global::Bosdyn.Api.Lease();
        }
        AttemptedLease.MergeFrom(other.AttemptedLease);
      }
      if (other.previousLease_ != null) {
        if (previousLease_ == null) {
          PreviousLease = new global::Bosdyn.Api.Lease();
        }
        PreviousLease.MergeFrom(other.PreviousLease);
      }
      if (other.latestKnownLease_ != null) {
        if (latestKnownLease_ == null) {
          LatestKnownLease = new global::Bosdyn.Api.Lease();
        }
        LatestKnownLease.MergeFrom(other.LatestKnownLease);
      }
      latestResources_.Add(other.latestResources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Bosdyn.Api.LeaseUseResult.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::Bosdyn.Api.LeaseOwner();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (attemptedLease_ == null) {
              AttemptedLease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(AttemptedLease);
            break;
          }
          case 34: {
            if (previousLease_ == null) {
              PreviousLease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(PreviousLease);
            break;
          }
          case 42: {
            if (latestKnownLease_ == null) {
              LatestKnownLease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(LatestKnownLease);
            break;
          }
          case 50: {
            latestResources_.AddEntriesFrom(input, _repeated_latestResources_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LeaseUseResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// An internal issue occurred.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The Lease was accepted.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// The Lease is invalid.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_LEASE")] InvalidLease = 2,
        /// <summary>
        /// The Lease is older than the current lease, and rejected.
        /// </summary>
        [pbr::OriginalName("STATUS_OLDER")] Older = 3,
        /// <summary>
        /// The Lease holder did not check in regularly enough, and the Lease is stale.
        /// </summary>
        [pbr::OriginalName("STATUS_REVOKED")] Revoked = 4,
        /// <summary>
        /// The Lease was for an unmanaged resource.
        /// </summary>
        [pbr::OriginalName("STATUS_UNMANAGED")] Unmanaged = 5,
        /// <summary>
        /// The Lease was for the wrong epoch.
        /// </summary>
        [pbr::OriginalName("STATUS_WRONG_EPOCH")] WrongEpoch = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// The AcquireLease request message which sends which resource the lease should be for.
  /// </summary>
  public sealed partial class AcquireLeaseRequest : pb::IMessage<AcquireLeaseRequest> {
    private static readonly pb::MessageParser<AcquireLeaseRequest> _parser = new pb::MessageParser<AcquireLeaseRequest>(() => new AcquireLeaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquireLeaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseRequest(AcquireLeaseRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      resource_ = other.resource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseRequest Clone() {
      return new AcquireLeaseRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private string resource_ = "";
    /// <summary>
    /// The resource to obtain a Lease for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquireLeaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquireLeaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Resource != other.Resource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquireLeaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Resource = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The AcquireLease response returns the lease for the desired resource if it could be obtained.
  /// If a client is returned a new lease, the client should initiate a
  /// RetainLease bidirectional streaming request immediately after completion
  /// of AcquireLease.
  /// </summary>
  public sealed partial class AcquireLeaseResponse : pb::IMessage<AcquireLeaseResponse> {
    private static readonly pb::MessageParser<AcquireLeaseResponse> _parser = new pb::MessageParser<AcquireLeaseResponse>(() => new AcquireLeaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquireLeaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseResponse(AcquireLeaseResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      leaseOwner_ = other.leaseOwner_ != null ? other.leaseOwner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireLeaseResponse Clone() {
      return new AcquireLeaseResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response Header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.AcquireLeaseResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquireLeaseResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 3;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The lease for the resource. Only set if status field == STATUS_OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "lease_owner" field.</summary>
    public const int LeaseOwnerFieldNumber = 4;
    private global::Bosdyn.Api.LeaseOwner leaseOwner_;
    /// <summary>
    /// The owner for the lease. Set if status field == OK or status field == RESOURCE_ALREADY_CLAIMED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseOwner LeaseOwner {
      get { return leaseOwner_; }
      set {
        leaseOwner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquireLeaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquireLeaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(LeaseOwner, other.LeaseOwner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (leaseOwner_ != null) hash ^= LeaseOwner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (lease_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lease);
      }
      if (leaseOwner_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LeaseOwner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (leaseOwner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseOwner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquireLeaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.leaseOwner_ != null) {
        if (leaseOwner_ == null) {
          LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
        }
        LeaseOwner.MergeFrom(other.LeaseOwner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.AcquireLeaseResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 34: {
            if (leaseOwner_ == null) {
              LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
            }
            input.ReadMessage(LeaseOwner);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AcquireLeaseResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used. An internal LeaseService issue has happened
        /// if UNKNOWN is set.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// AcquireLease was successful.The lease field will be populated with the new
        /// lease for the resource. The client is expected to call the RetainLease method
        /// immediately after.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// AcquireLease failed since the resource has already been claimed.
        /// The TakeLease method may be used to forcefully grab the lease.
        /// </summary>
        [pbr::OriginalName("STATUS_RESOURCE_ALREADY_CLAIMED")] ResourceAlreadyClaimed = 2,
        /// <summary>
        /// AcquireLease failed since the resource is not known to LeaseService.
        /// The ListLeaseResources method may be used to list all known
        /// resources.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_RESOURCE")] InvalidResource = 3,
        /// <summary>
        /// The LeaseService is not authoritative - so Acquire should not work.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_AUTHORITATIVE_SERVICE")] NotAuthoritativeService = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The TakeLease request message which sends which resource the lease should be for.
  /// </summary>
  public sealed partial class TakeLeaseRequest : pb::IMessage<TakeLeaseRequest> {
    private static readonly pb::MessageParser<TakeLeaseRequest> _parser = new pb::MessageParser<TakeLeaseRequest>(() => new TakeLeaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeLeaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseRequest(TakeLeaseRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      resource_ = other.resource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseRequest Clone() {
      return new TakeLeaseRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private string resource_ = "";
    /// <summary>
    /// The resource to obtain a Lease for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeLeaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeLeaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Resource != other.Resource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeLeaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Resource = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The TakeLease response returns the lease for the desired resource if it could be obtained.
  /// In most cases if the resource is managed by the LeaseService, TakeLease
  /// will succeed. However, in the future policies may be introduced which will prevent
  /// TakeLease from succeeding and clients should be prepared to handle that
  /// case.
  /// If a client obtains a new lease, the client should initiate a
  /// RetainLease bidirectional streaming request immediately after completion
  /// of TakeLease.
  /// </summary>
  public sealed partial class TakeLeaseResponse : pb::IMessage<TakeLeaseResponse> {
    private static readonly pb::MessageParser<TakeLeaseResponse> _parser = new pb::MessageParser<TakeLeaseResponse>(() => new TakeLeaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeLeaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseResponse(TakeLeaseResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      leaseOwner_ = other.leaseOwner_ != null ? other.leaseOwner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeLeaseResponse Clone() {
      return new TakeLeaseResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.TakeLeaseResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TakeLeaseResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 3;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The lease for the resource. Only set if status field == STATUS_OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "lease_owner" field.</summary>
    public const int LeaseOwnerFieldNumber = 4;
    private global::Bosdyn.Api.LeaseOwner leaseOwner_;
    /// <summary>
    /// The owner for the lease. Set if status field == STATUS_OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseOwner LeaseOwner {
      get { return leaseOwner_; }
      set {
        leaseOwner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeLeaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeLeaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(LeaseOwner, other.LeaseOwner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (leaseOwner_ != null) hash ^= LeaseOwner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (lease_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lease);
      }
      if (leaseOwner_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LeaseOwner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (leaseOwner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseOwner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeLeaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.leaseOwner_ != null) {
        if (leaseOwner_ == null) {
          LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
        }
        LeaseOwner.MergeFrom(other.LeaseOwner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.TakeLeaseResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 34: {
            if (leaseOwner_ == null) {
              LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
            }
            input.ReadMessage(LeaseOwner);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TakeLeaseResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// TakeLease was successful. The lease field will be populated with the
        /// new lease for the resource. The client is expected to call the RetainLease
        /// method immediately after.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// TakeLease failed since the resource is not known to LeaseService.
        /// The ListLeaseResources method may be used to list all known
        /// resources.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_RESOURCE")] InvalidResource = 2,
        /// <summary>
        /// The LeaseService is not authoritative - so Acquire should not work.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_AUTHORITATIVE_SERVICE")] NotAuthoritativeService = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// The ReturnLease request message will be sent to the LeaseService. If the lease
  /// is currently active for the resource, the LeaseService will invalidate the lease.
  /// Future calls to AcquireLease by any client will now succeed.
  /// </summary>
  public sealed partial class ReturnLeaseRequest : pb::IMessage<ReturnLeaseRequest> {
    private static readonly pb::MessageParser<ReturnLeaseRequest> _parser = new pb::MessageParser<ReturnLeaseRequest>(() => new ReturnLeaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnLeaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseRequest(ReturnLeaseRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseRequest Clone() {
      return new ReturnLeaseRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to return back to the LeaseService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnLeaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnLeaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnLeaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ReturnLease response message
  /// </summary>
  public sealed partial class ReturnLeaseResponse : pb::IMessage<ReturnLeaseResponse> {
    private static readonly pb::MessageParser<ReturnLeaseResponse> _parser = new pb::MessageParser<ReturnLeaseResponse>(() => new ReturnLeaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnLeaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseResponse(ReturnLeaseResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnLeaseResponse Clone() {
      return new ReturnLeaseResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.ReturnLeaseResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ReturnLeaseResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnLeaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnLeaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnLeaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.ReturnLeaseResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReturnLeaseResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// ReturnLease was successful.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// ReturnLease failed because the resource covered by the lease
        /// is not being managed by the LeaseService.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_RESOURCE")] InvalidResource = 2,
        /// <summary>
        /// ReturnLease failed because the lease was not the active lease.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_ACTIVE_LEASE")] NotActiveLease = 3,
        /// <summary>
        /// The LeaseService is not authoritative - so Acquire should not work.
        /// </summary>
        [pbr::OriginalName("STATUS_NOT_AUTHORITATIVE_SERVICE")] NotAuthoritativeService = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The ListLease request message asks for information about any known lease resources.
  /// </summary>
  public sealed partial class ListLeasesRequest : pb::IMessage<ListLeasesRequest> {
    private static readonly pb::MessageParser<ListLeasesRequest> _parser = new pb::MessageParser<ListLeasesRequest>(() => new ListLeasesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLeasesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesRequest(ListLeasesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      includeFullLeaseInfo_ = other.includeFullLeaseInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesRequest Clone() {
      return new ListLeasesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "include_full_lease_info" field.</summary>
    public const int IncludeFullLeaseInfoFieldNumber = 2;
    private bool includeFullLeaseInfo_;
    /// <summary>
    /// Include the full data of leases in use, if available.
    /// Defaults to false to receive basic information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeFullLeaseInfo {
      get { return includeFullLeaseInfo_; }
      set {
        includeFullLeaseInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLeasesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLeasesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (IncludeFullLeaseInfo != other.IncludeFullLeaseInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (IncludeFullLeaseInfo != false) hash ^= IncludeFullLeaseInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (IncludeFullLeaseInfo != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeFullLeaseInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (IncludeFullLeaseInfo != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLeasesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.IncludeFullLeaseInfo != false) {
        IncludeFullLeaseInfo = other.IncludeFullLeaseInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            IncludeFullLeaseInfo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Describes all information about a sepcific lease: including the resource it covers, the
  /// active lease, and which application is the owner of a lease.
  /// </summary>
  public sealed partial class LeaseResource : pb::IMessage<LeaseResource> {
    private static readonly pb::MessageParser<LeaseResource> _parser = new pb::MessageParser<LeaseResource>(() => new LeaseResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseResource(LeaseResource other) : this() {
      resource_ = other.resource_;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      leaseOwner_ = other.leaseOwner_ != null ? other.leaseOwner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseResource Clone() {
      return new LeaseResource(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 1;
    private string resource_ = "";
    /// <summary>
    /// The resource name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The active lease, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "lease_owner" field.</summary>
    public const int LeaseOwnerFieldNumber = 3;
    private global::Bosdyn.Api.LeaseOwner leaseOwner_;
    /// <summary>
    /// The Lease Owner, if there is a Lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseOwner LeaseOwner {
      get { return leaseOwner_; }
      set {
        leaseOwner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resource != other.Resource) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(LeaseOwner, other.LeaseOwner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (leaseOwner_ != null) hash ^= LeaseOwner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resource.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Resource);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (leaseOwner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LeaseOwner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (leaseOwner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseOwner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseResource other) {
      if (other == null) {
        return;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.leaseOwner_ != null) {
        if (leaseOwner_ == null) {
          LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
        }
        LeaseOwner.MergeFrom(other.LeaseOwner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Resource = input.ReadString();
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 26: {
            if (leaseOwner_ == null) {
              LeaseOwner = new global::Bosdyn.Api.LeaseOwner();
            }
            input.ReadMessage(LeaseOwner);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListLease response message returns all known lease resources from the LeaseService.
  /// </summary>
  public sealed partial class ListLeasesResponse : pb::IMessage<ListLeasesResponse> {
    private static readonly pb::MessageParser<ListLeasesResponse> _parser = new pb::MessageParser<ListLeasesResponse>(() => new ListLeasesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLeasesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesResponse(ListLeasesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      resources_ = other.resources_.Clone();
      resourceTree_ = other.resourceTree_ != null ? other.resourceTree_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeasesResponse Clone() {
      return new ListLeasesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.LeaseResource> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.LeaseResource.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.LeaseResource> resources_ = new pbc::RepeatedField<global::Bosdyn.Api.LeaseResource>();
    /// <summary>
    /// The resources managed by the LeaseService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.LeaseResource> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "resource_tree" field.</summary>
    public const int ResourceTreeFieldNumber = 3;
    private global::Bosdyn.Api.ResourceTree resourceTree_;
    /// <summary>
    /// Provide the hierarchical lease structure.
    /// A resource can encapsulate multiple sub-resources.
    /// For example, the "body" lease may include control of the legs, arm, and gripper.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResourceTree ResourceTree {
      get { return resourceTree_; }
      set {
        resourceTree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLeasesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLeasesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!resources_.Equals(other.resources_)) return false;
      if (!object.Equals(ResourceTree, other.ResourceTree)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= resources_.GetHashCode();
      if (resourceTree_ != null) hash ^= ResourceTree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      resources_.WriteTo(output, _repeated_resources_codec);
      if (resourceTree_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ResourceTree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += resources_.CalculateSize(_repeated_resources_codec);
      if (resourceTree_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceTree);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLeasesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      resources_.Add(other.resources_);
      if (other.resourceTree_ != null) {
        if (resourceTree_ == null) {
          ResourceTree = new global::Bosdyn.Api.ResourceTree();
        }
        ResourceTree.MergeFrom(other.ResourceTree);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 26: {
            if (resourceTree_ == null) {
              ResourceTree = new global::Bosdyn.Api.ResourceTree();
            }
            input.ReadMessage(ResourceTree);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RetainLease request will inform the LeaseService that the application contains to hold
  /// ownership of this lease. Lease holders are expected to be reachable and alive. If enough time
  /// has passed since the last RetainLeaseRequest, the LeaseService will revoke the lease.
  /// </summary>
  public sealed partial class RetainLeaseRequest : pb::IMessage<RetainLeaseRequest> {
    private static readonly pb::MessageParser<RetainLeaseRequest> _parser = new pb::MessageParser<RetainLeaseRequest>(() => new RetainLeaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetainLeaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseRequest(RetainLeaseRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseRequest Clone() {
      return new RetainLeaseRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to retain ownership over. May also be a "super" lease of the lease to retain
    /// ownership over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetainLeaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetainLeaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetainLeaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RetainLease response message sends the result of the attempted RetainLease request, which
  /// contains whether or not the lease is still owned by the application sending the request.
  /// </summary>
  public sealed partial class RetainLeaseResponse : pb::IMessage<RetainLeaseResponse> {
    private static readonly pb::MessageParser<RetainLeaseResponse> _parser = new pb::MessageParser<RetainLeaseResponse>(() => new RetainLeaseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetainLeaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.LeaseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseResponse(RetainLeaseResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetainLeaseResponse Clone() {
      return new RetainLeaseResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 2;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Result of using the lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetainLeaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetainLeaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaseUseResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetainLeaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
