// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/directory.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/directory.proto</summary>
  public static partial class DirectoryReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/directory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DirectoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90b3MvZGlyZWN0b3J5LnByb3RvEgpib3NkeW4uYXBpGhNQcm90b3Mv",
            "aGVhZGVyLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3Rv",
            "IoQCCgxTZXJ2aWNlRW50cnkSDAoEbmFtZRgBIAEoCRIMCgR0eXBlGAIgASgJ",
            "EhEKCWF1dGhvcml0eRgDIAEoCRIvCgtsYXN0X3VwZGF0ZRgEIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGwoTdXNlcl90b2tlbl9yZXF1aXJl",
            "ZBgFIAEoCBIbChNwZXJtaXNzaW9uX3JlcXVpcmVkGAcgASgJEh0KFWxpdmVu",
            "ZXNzX3RpbWVvdXRfc2VjcxgIIAEoARIZChFob3N0X3BheWxvYWRfZ3VpZBgJ",
            "IAEoCUoECAYQB1IaYXBwbGljYXRpb25fdG9rZW5fcmVxdWlyZWQiKQoIRW5k",
            "cG9pbnQSDwoHaG9zdF9pcBgBIAEoCRIMCgRwb3J0GAIgASgFIlkKFkdldFNl",
            "cnZpY2VFbnRyeVJlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFw",
            "aS5SZXF1ZXN0SGVhZGVyEhQKDHNlcnZpY2VfbmFtZRgCIAEoCSL/AQoXR2V0",
            "U2VydmljZUVudHJ5UmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHlu",
            "LmFwaS5SZXNwb25zZUhlYWRlchI6CgZzdGF0dXMYAiABKA4yKi5ib3NkeW4u",
            "YXBpLkdldFNlcnZpY2VFbnRyeVJlc3BvbnNlLlN0YXR1cxIvCg1zZXJ2aWNl",
            "X2VudHJ5GAMgASgLMhguYm9zZHluLmFwaS5TZXJ2aWNlRW50cnkiSwoGU3Rh",
            "dHVzEhIKDlNUQVRVU19VTktOT1dOEAASDQoJU1RBVFVTX09LEAESHgoaU1RB",
            "VFVTX05PTkVYSVNURU5UX1NFUlZJQ0UQAiJGChlMaXN0U2VydmljZUVudHJp",
            "ZXNSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVz",
            "dEhlYWRlciJ7ChpMaXN0U2VydmljZUVudHJpZXNSZXNwb25zZRIqCgZoZWFk",
            "ZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEjEKD3NlcnZp",
            "Y2VfZW50cmllcxgCIAMoCzIYLmJvc2R5bi5hcGkuU2VydmljZUVudHJ5QhBC",
            "DkRpcmVjdG9yeVByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ServiceEntry), global::Bosdyn.Api.ServiceEntry.Parser, new[]{ "Name", "Type", "Authority", "LastUpdate", "UserTokenRequired", "PermissionRequired", "LivenessTimeoutSecs", "HostPayloadGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Endpoint), global::Bosdyn.Api.Endpoint.Parser, new[]{ "HostIp", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetServiceEntryRequest), global::Bosdyn.Api.GetServiceEntryRequest.Parser, new[]{ "Header", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetServiceEntryResponse), global::Bosdyn.Api.GetServiceEntryResponse.Parser, new[]{ "Header", "Status", "ServiceEntry" }, null, new[]{ typeof(global::Bosdyn.Api.GetServiceEntryResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListServiceEntriesRequest), global::Bosdyn.Api.ListServiceEntriesRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListServiceEntriesResponse), global::Bosdyn.Api.ListServiceEntriesResponse.Parser, new[]{ "Header", "ServiceEntries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A message representing a discoverable service.  By definition, all services
  /// discoverable by this system are expected to be grpc "services" provided by
  /// some server.
  /// </summary>
  public sealed partial class ServiceEntry : pb::IMessage<ServiceEntry> {
    private static readonly pb::MessageParser<ServiceEntry> _parser = new pb::MessageParser<ServiceEntry>(() => new ServiceEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceEntry(ServiceEntry other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      authority_ = other.authority_;
      lastUpdate_ = other.lastUpdate_ != null ? other.lastUpdate_.Clone() : null;
      userTokenRequired_ = other.userTokenRequired_;
      permissionRequired_ = other.permissionRequired_;
      livenessTimeoutSecs_ = other.livenessTimeoutSecs_;
      hostPayloadGuid_ = other.hostPayloadGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceEntry Clone() {
      return new ServiceEntry(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The unique user-friendly name of this service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// The type of this service. Usually identifies the underlying implementation.
    /// Does not have to be unique among all ServiceEntry objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 3;
    private string authority_ = "";
    /// <summary>
    /// Information used to route to the desired Service. Can either be a full address
    /// (aService.spot.robot) or just a DNS label that will be automatically converted to an
    /// address (aService).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authority {
      get { return authority_; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastUpdate_;
    /// <summary>
    /// Last update time in robot timebase for this service record. This serves as the time of
    /// the last heartbeat to the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "user_token_required" field.</summary>
    public const int UserTokenRequiredFieldNumber = 5;
    private bool userTokenRequired_;
    /// <summary>
    /// If 'user_token_required' field is true, any requests to this service must contain
    /// a user token for the machine.  Requests without a user token will result in a
    /// 401. Most services will want to require a user_token, but ones like auth_service
    /// do not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserTokenRequired {
      get { return userTokenRequired_; }
      set {
        userTokenRequired_ = value;
      }
    }

    /// <summary>Field number for the "permission_required" field.</summary>
    public const int PermissionRequiredFieldNumber = 7;
    private string permissionRequired_ = "";
    /// <summary>
    /// If 'permission_required' field is non-empty, any requests to this service must
    /// have the same string in the "per" claim of the user token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionRequired {
      get { return permissionRequired_; }
      set {
        permissionRequired_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveness_timeout_secs" field.</summary>
    public const int LivenessTimeoutSecsFieldNumber = 8;
    private double livenessTimeoutSecs_;
    /// <summary>
    /// Number of seconds to wait between heartbeats before assuming service in no longer live
    /// If unset (0) liveness checks will be disabled for this service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LivenessTimeoutSecs {
      get { return livenessTimeoutSecs_; }
      set {
        livenessTimeoutSecs_ = value;
      }
    }

    /// <summary>Field number for the "host_payload_guid" field.</summary>
    public const int HostPayloadGuidFieldNumber = 9;
    private string hostPayloadGuid_ = "";
    /// <summary>
    /// The GUID of the payload that this service was registered from. An empty string represents a
    /// service that was registered via a client using standard user credentials or internal to the
    /// robot. This value is set automatically based on the user token and cannot be set or updated
    /// via the API, so it should not be populated by the client at registration time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostPayloadGuid {
      get { return hostPayloadGuid_; }
      set {
        hostPayloadGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Authority != other.Authority) return false;
      if (!object.Equals(LastUpdate, other.LastUpdate)) return false;
      if (UserTokenRequired != other.UserTokenRequired) return false;
      if (PermissionRequired != other.PermissionRequired) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LivenessTimeoutSecs, other.LivenessTimeoutSecs)) return false;
      if (HostPayloadGuid != other.HostPayloadGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Authority.Length != 0) hash ^= Authority.GetHashCode();
      if (lastUpdate_ != null) hash ^= LastUpdate.GetHashCode();
      if (UserTokenRequired != false) hash ^= UserTokenRequired.GetHashCode();
      if (PermissionRequired.Length != 0) hash ^= PermissionRequired.GetHashCode();
      if (LivenessTimeoutSecs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LivenessTimeoutSecs);
      if (HostPayloadGuid.Length != 0) hash ^= HostPayloadGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (lastUpdate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastUpdate);
      }
      if (UserTokenRequired != false) {
        output.WriteRawTag(40);
        output.WriteBool(UserTokenRequired);
      }
      if (PermissionRequired.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PermissionRequired);
      }
      if (LivenessTimeoutSecs != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(LivenessTimeoutSecs);
      }
      if (HostPayloadGuid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(HostPayloadGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Authority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
      }
      if (lastUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastUpdate);
      }
      if (UserTokenRequired != false) {
        size += 1 + 1;
      }
      if (PermissionRequired.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionRequired);
      }
      if (LivenessTimeoutSecs != 0D) {
        size += 1 + 8;
      }
      if (HostPayloadGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostPayloadGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceEntry other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Authority.Length != 0) {
        Authority = other.Authority;
      }
      if (other.lastUpdate_ != null) {
        if (lastUpdate_ == null) {
          LastUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastUpdate.MergeFrom(other.LastUpdate);
      }
      if (other.UserTokenRequired != false) {
        UserTokenRequired = other.UserTokenRequired;
      }
      if (other.PermissionRequired.Length != 0) {
        PermissionRequired = other.PermissionRequired;
      }
      if (other.LivenessTimeoutSecs != 0D) {
        LivenessTimeoutSecs = other.LivenessTimeoutSecs;
      }
      if (other.HostPayloadGuid.Length != 0) {
        HostPayloadGuid = other.HostPayloadGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            if (lastUpdate_ == null) {
              LastUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastUpdate);
            break;
          }
          case 40: {
            UserTokenRequired = input.ReadBool();
            break;
          }
          case 58: {
            PermissionRequired = input.ReadString();
            break;
          }
          case 65: {
            LivenessTimeoutSecs = input.ReadDouble();
            break;
          }
          case 74: {
            HostPayloadGuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A message containing information that allows a client to identify a
  /// given endpoint host using an ip and a port.
  /// </summary>
  public sealed partial class Endpoint : pb::IMessage<Endpoint> {
    private static readonly pb::MessageParser<Endpoint> _parser = new pb::MessageParser<Endpoint>(() => new Endpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Endpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint(Endpoint other) : this() {
      hostIp_ = other.hostIp_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint Clone() {
      return new Endpoint(this);
    }

    /// <summary>Field number for the "host_ip" field.</summary>
    public const int HostIpFieldNumber = 1;
    private string hostIp_ = "";
    /// <summary>
    /// The IP address of the computer hosting this endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostIp {
      get { return hostIp_; }
      set {
        hostIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    /// The port number on which the endpoint is provided, between 0 and 65535.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Endpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Endpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostIp != other.HostIp) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostIp.Length != 0) hash ^= HostIp.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostIp);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostIp);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Endpoint other) {
      if (other == null) {
        return;
      }
      if (other.HostIp.Length != 0) {
        HostIp = other.HostIp;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostIp = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetServiceEntry request message sends the service name to the robot.
  /// </summary>
  public sealed partial class GetServiceEntryRequest : pb::IMessage<GetServiceEntryRequest> {
    private static readonly pb::MessageParser<GetServiceEntryRequest> _parser = new pb::MessageParser<GetServiceEntryRequest>(() => new GetServiceEntryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceEntryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryRequest(GetServiceEntryRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      serviceName_ = other.serviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryRequest Clone() {
      return new GetServiceEntryRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    /// The unique user-friendly name of the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceEntryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceEntryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (ServiceName != other.ServiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceEntryRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GetServiceEntry response message returns a ServiceEntry for the desired service name.
  /// </summary>
  public sealed partial class GetServiceEntryResponse : pb::IMessage<GetServiceEntryResponse> {
    private static readonly pb::MessageParser<GetServiceEntryResponse> _parser = new pb::MessageParser<GetServiceEntryResponse>(() => new GetServiceEntryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceEntryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryResponse(GetServiceEntryResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      serviceEntry_ = other.serviceEntry_ != null ? other.serviceEntry_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceEntryResponse Clone() {
      return new GetServiceEntryResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response Header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.GetServiceEntryResponse.Types.Status status_ = 0;
    /// <summary>
    /// Current status of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.GetServiceEntryResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "service_entry" field.</summary>
    public const int ServiceEntryFieldNumber = 3;
    private global::Bosdyn.Api.ServiceEntry serviceEntry_;
    /// <summary>
    /// The record for the discovered service.  Only set if 'status' field == STATUS_OK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceEntry ServiceEntry {
      get { return serviceEntry_; }
      set {
        serviceEntry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceEntryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceEntryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ServiceEntry, other.ServiceEntry)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (serviceEntry_ != null) hash ^= ServiceEntry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (serviceEntry_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceEntry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (serviceEntry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceEntry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceEntryResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.serviceEntry_ != null) {
        if (serviceEntry_ == null) {
          ServiceEntry = new global::Bosdyn.Api.ServiceEntry();
        }
        ServiceEntry.MergeFrom(other.ServiceEntry);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.GetServiceEntryResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            if (serviceEntry_ == null) {
              ServiceEntry = new global::Bosdyn.Api.ServiceEntry();
            }
            input.ReadMessage(ServiceEntry);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetServiceEntryResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used. An internal DirectoryService issue has happened if UNKNOWN is set.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// GetService was successful. The service_entry field is filled out.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// GetService failed because the requested service name does not exist.
        /// </summary>
        [pbr::OriginalName("STATUS_NONEXISTENT_SERVICE")] NonexistentService = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The ListServiceEntries request message will ask the robot for all services.
  /// </summary>
  public sealed partial class ListServiceEntriesRequest : pb::IMessage<ListServiceEntriesRequest> {
    private static readonly pb::MessageParser<ListServiceEntriesRequest> _parser = new pb::MessageParser<ListServiceEntriesRequest>(() => new ListServiceEntriesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceEntriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesRequest(ListServiceEntriesRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesRequest Clone() {
      return new ListServiceEntriesRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceEntriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceEntriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceEntriesRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListServiceEntries response message returns all known services at the time the request
  /// was recieved.
  /// </summary>
  public sealed partial class ListServiceEntriesResponse : pb::IMessage<ListServiceEntriesResponse> {
    private static readonly pb::MessageParser<ListServiceEntriesResponse> _parser = new pb::MessageParser<ListServiceEntriesResponse>(() => new ListServiceEntriesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceEntriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DirectoryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesResponse(ListServiceEntriesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      serviceEntries_ = other.serviceEntries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceEntriesResponse Clone() {
      return new ListServiceEntriesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "service_entries" field.</summary>
    public const int ServiceEntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ServiceEntry> _repeated_serviceEntries_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ServiceEntry.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ServiceEntry> serviceEntries_ = new pbc::RepeatedField<global::Bosdyn.Api.ServiceEntry>();
    /// <summary>
    /// The resources managed by the LeaseService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ServiceEntry> ServiceEntries {
      get { return serviceEntries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceEntriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceEntriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!serviceEntries_.Equals(other.serviceEntries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= serviceEntries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      serviceEntries_.WriteTo(output, _repeated_serviceEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += serviceEntries_.CalculateSize(_repeated_serviceEntries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceEntriesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      serviceEntries_.Add(other.serviceEntries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            serviceEntries_.AddEntriesFrom(input, _repeated_serviceEntries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
