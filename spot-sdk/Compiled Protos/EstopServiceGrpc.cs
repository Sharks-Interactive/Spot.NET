// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/estop_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The software robot E-Stop system:
  ///  1. Uses challenge-style communication to enforce end user (aka "originators") connection
  ///     for Authority to Operate (ATO).
  ///  2. Offers the ability to issue a direct denial of  ATO.
  /// The EstopService provides a service interface for the robot EStop/Authority to operate the system.
  /// </summary>
  public static partial class EstopService
  {
    static readonly string __ServiceName = "bosdyn.api.EstopService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterEstopEndpointRequest> __Marshaller_bosdyn_api_RegisterEstopEndpointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterEstopEndpointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RegisterEstopEndpointResponse> __Marshaller_bosdyn_api_RegisterEstopEndpointResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RegisterEstopEndpointResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.DeregisterEstopEndpointRequest> __Marshaller_bosdyn_api_DeregisterEstopEndpointRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.DeregisterEstopEndpointRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.DeregisterEstopEndpointResponse> __Marshaller_bosdyn_api_DeregisterEstopEndpointResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.DeregisterEstopEndpointResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.EstopCheckInRequest> __Marshaller_bosdyn_api_EstopCheckInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.EstopCheckInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.EstopCheckInResponse> __Marshaller_bosdyn_api_EstopCheckInResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.EstopCheckInResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetEstopConfigRequest> __Marshaller_bosdyn_api_GetEstopConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetEstopConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetEstopConfigResponse> __Marshaller_bosdyn_api_GetEstopConfigResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetEstopConfigResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.SetEstopConfigRequest> __Marshaller_bosdyn_api_SetEstopConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.SetEstopConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.SetEstopConfigResponse> __Marshaller_bosdyn_api_SetEstopConfigResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.SetEstopConfigResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetEstopSystemStatusRequest> __Marshaller_bosdyn_api_GetEstopSystemStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetEstopSystemStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetEstopSystemStatusResponse> __Marshaller_bosdyn_api_GetEstopSystemStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetEstopSystemStatusResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.RegisterEstopEndpointRequest, global::Bosdyn.Api.RegisterEstopEndpointResponse> __Method_RegisterEstopEndpoint = new grpc::Method<global::Bosdyn.Api.RegisterEstopEndpointRequest, global::Bosdyn.Api.RegisterEstopEndpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterEstopEndpoint",
        __Marshaller_bosdyn_api_RegisterEstopEndpointRequest,
        __Marshaller_bosdyn_api_RegisterEstopEndpointResponse);

    static readonly grpc::Method<global::Bosdyn.Api.DeregisterEstopEndpointRequest, global::Bosdyn.Api.DeregisterEstopEndpointResponse> __Method_DeregisterEstopEndpoint = new grpc::Method<global::Bosdyn.Api.DeregisterEstopEndpointRequest, global::Bosdyn.Api.DeregisterEstopEndpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeregisterEstopEndpoint",
        __Marshaller_bosdyn_api_DeregisterEstopEndpointRequest,
        __Marshaller_bosdyn_api_DeregisterEstopEndpointResponse);

    static readonly grpc::Method<global::Bosdyn.Api.EstopCheckInRequest, global::Bosdyn.Api.EstopCheckInResponse> __Method_EstopCheckIn = new grpc::Method<global::Bosdyn.Api.EstopCheckInRequest, global::Bosdyn.Api.EstopCheckInResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EstopCheckIn",
        __Marshaller_bosdyn_api_EstopCheckInRequest,
        __Marshaller_bosdyn_api_EstopCheckInResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetEstopConfigRequest, global::Bosdyn.Api.GetEstopConfigResponse> __Method_GetEstopConfig = new grpc::Method<global::Bosdyn.Api.GetEstopConfigRequest, global::Bosdyn.Api.GetEstopConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstopConfig",
        __Marshaller_bosdyn_api_GetEstopConfigRequest,
        __Marshaller_bosdyn_api_GetEstopConfigResponse);

    static readonly grpc::Method<global::Bosdyn.Api.SetEstopConfigRequest, global::Bosdyn.Api.SetEstopConfigResponse> __Method_SetEstopConfig = new grpc::Method<global::Bosdyn.Api.SetEstopConfigRequest, global::Bosdyn.Api.SetEstopConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetEstopConfig",
        __Marshaller_bosdyn_api_SetEstopConfigRequest,
        __Marshaller_bosdyn_api_SetEstopConfigResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetEstopSystemStatusRequest, global::Bosdyn.Api.GetEstopSystemStatusResponse> __Method_GetEstopSystemStatus = new grpc::Method<global::Bosdyn.Api.GetEstopSystemStatusRequest, global::Bosdyn.Api.GetEstopSystemStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEstopSystemStatus",
        __Marshaller_bosdyn_api_GetEstopSystemStatusRequest,
        __Marshaller_bosdyn_api_GetEstopSystemStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.EstopServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EstopService</summary>
    [grpc::BindServiceMethod(typeof(EstopService), "BindService")]
    public abstract partial class EstopServiceBase
    {
      /// <summary>
      /// Register an Estop "originator" or "endpoint".
      /// This may be a replacement for another active endpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RegisterEstopEndpointResponse> RegisterEstopEndpoint(global::Bosdyn.Api.RegisterEstopEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deregister the requested estop endpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.DeregisterEstopEndpointResponse> DeregisterEstopEndpoint(global::Bosdyn.Api.DeregisterEstopEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Answer challenge from previous response (unless this is the first call), and request
      /// a stop level.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.EstopCheckInResponse> EstopCheckIn(global::Bosdyn.Api.EstopCheckInRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request the current EstopConfig, describing the expected set of endpoints.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetEstopConfigResponse> GetEstopConfig(global::Bosdyn.Api.GetEstopConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set a new active EstopConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.SetEstopConfigResponse> SetEstopConfig(global::Bosdyn.Api.SetEstopConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ask for the current status of the estop system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetEstopSystemStatusResponse> GetEstopSystemStatus(global::Bosdyn.Api.GetEstopSystemStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EstopService</summary>
    public partial class EstopServiceClient : grpc::ClientBase<EstopServiceClient>
    {
      /// <summary>Creates a new client for EstopService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EstopServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EstopService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EstopServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EstopServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EstopServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Register an Estop "originator" or "endpoint".
      /// This may be a replacement for another active endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterEstopEndpointResponse RegisterEstopEndpoint(global::Bosdyn.Api.RegisterEstopEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterEstopEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register an Estop "originator" or "endpoint".
      /// This may be a replacement for another active endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RegisterEstopEndpointResponse RegisterEstopEndpoint(global::Bosdyn.Api.RegisterEstopEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterEstopEndpoint, null, options, request);
      }
      /// <summary>
      /// Register an Estop "originator" or "endpoint".
      /// This may be a replacement for another active endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterEstopEndpointResponse> RegisterEstopEndpointAsync(global::Bosdyn.Api.RegisterEstopEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterEstopEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Register an Estop "originator" or "endpoint".
      /// This may be a replacement for another active endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RegisterEstopEndpointResponse> RegisterEstopEndpointAsync(global::Bosdyn.Api.RegisterEstopEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterEstopEndpoint, null, options, request);
      }
      /// <summary>
      /// Deregister the requested estop endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.DeregisterEstopEndpointResponse DeregisterEstopEndpoint(global::Bosdyn.Api.DeregisterEstopEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeregisterEstopEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deregister the requested estop endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.DeregisterEstopEndpointResponse DeregisterEstopEndpoint(global::Bosdyn.Api.DeregisterEstopEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeregisterEstopEndpoint, null, options, request);
      }
      /// <summary>
      /// Deregister the requested estop endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.DeregisterEstopEndpointResponse> DeregisterEstopEndpointAsync(global::Bosdyn.Api.DeregisterEstopEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeregisterEstopEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deregister the requested estop endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.DeregisterEstopEndpointResponse> DeregisterEstopEndpointAsync(global::Bosdyn.Api.DeregisterEstopEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeregisterEstopEndpoint, null, options, request);
      }
      /// <summary>
      /// Answer challenge from previous response (unless this is the first call), and request
      /// a stop level.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.EstopCheckInResponse EstopCheckIn(global::Bosdyn.Api.EstopCheckInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstopCheckIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Answer challenge from previous response (unless this is the first call), and request
      /// a stop level.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.EstopCheckInResponse EstopCheckIn(global::Bosdyn.Api.EstopCheckInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EstopCheckIn, null, options, request);
      }
      /// <summary>
      /// Answer challenge from previous response (unless this is the first call), and request
      /// a stop level.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.EstopCheckInResponse> EstopCheckInAsync(global::Bosdyn.Api.EstopCheckInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstopCheckInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Answer challenge from previous response (unless this is the first call), and request
      /// a stop level.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.EstopCheckInResponse> EstopCheckInAsync(global::Bosdyn.Api.EstopCheckInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EstopCheckIn, null, options, request);
      }
      /// <summary>
      /// Request the current EstopConfig, describing the expected set of endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetEstopConfigResponse GetEstopConfig(global::Bosdyn.Api.GetEstopConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstopConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request the current EstopConfig, describing the expected set of endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetEstopConfigResponse GetEstopConfig(global::Bosdyn.Api.GetEstopConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstopConfig, null, options, request);
      }
      /// <summary>
      /// Request the current EstopConfig, describing the expected set of endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetEstopConfigResponse> GetEstopConfigAsync(global::Bosdyn.Api.GetEstopConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstopConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request the current EstopConfig, describing the expected set of endpoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetEstopConfigResponse> GetEstopConfigAsync(global::Bosdyn.Api.GetEstopConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstopConfig, null, options, request);
      }
      /// <summary>
      /// Set a new active EstopConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.SetEstopConfigResponse SetEstopConfig(global::Bosdyn.Api.SetEstopConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetEstopConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set a new active EstopConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.SetEstopConfigResponse SetEstopConfig(global::Bosdyn.Api.SetEstopConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetEstopConfig, null, options, request);
      }
      /// <summary>
      /// Set a new active EstopConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.SetEstopConfigResponse> SetEstopConfigAsync(global::Bosdyn.Api.SetEstopConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetEstopConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set a new active EstopConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.SetEstopConfigResponse> SetEstopConfigAsync(global::Bosdyn.Api.SetEstopConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetEstopConfig, null, options, request);
      }
      /// <summary>
      /// Ask for the current status of the estop system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetEstopSystemStatusResponse GetEstopSystemStatus(global::Bosdyn.Api.GetEstopSystemStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstopSystemStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ask for the current status of the estop system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetEstopSystemStatusResponse GetEstopSystemStatus(global::Bosdyn.Api.GetEstopSystemStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEstopSystemStatus, null, options, request);
      }
      /// <summary>
      /// Ask for the current status of the estop system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetEstopSystemStatusResponse> GetEstopSystemStatusAsync(global::Bosdyn.Api.GetEstopSystemStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEstopSystemStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ask for the current status of the estop system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetEstopSystemStatusResponse> GetEstopSystemStatusAsync(global::Bosdyn.Api.GetEstopSystemStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEstopSystemStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EstopServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EstopServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EstopServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterEstopEndpoint, serviceImpl.RegisterEstopEndpoint)
          .AddMethod(__Method_DeregisterEstopEndpoint, serviceImpl.DeregisterEstopEndpoint)
          .AddMethod(__Method_EstopCheckIn, serviceImpl.EstopCheckIn)
          .AddMethod(__Method_GetEstopConfig, serviceImpl.GetEstopConfig)
          .AddMethod(__Method_SetEstopConfig, serviceImpl.SetEstopConfig)
          .AddMethod(__Method_GetEstopSystemStatus, serviceImpl.GetEstopSystemStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EstopServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterEstopEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RegisterEstopEndpointRequest, global::Bosdyn.Api.RegisterEstopEndpointResponse>(serviceImpl.RegisterEstopEndpoint));
      serviceBinder.AddMethod(__Method_DeregisterEstopEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.DeregisterEstopEndpointRequest, global::Bosdyn.Api.DeregisterEstopEndpointResponse>(serviceImpl.DeregisterEstopEndpoint));
      serviceBinder.AddMethod(__Method_EstopCheckIn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.EstopCheckInRequest, global::Bosdyn.Api.EstopCheckInResponse>(serviceImpl.EstopCheckIn));
      serviceBinder.AddMethod(__Method_GetEstopConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetEstopConfigRequest, global::Bosdyn.Api.GetEstopConfigResponse>(serviceImpl.GetEstopConfig));
      serviceBinder.AddMethod(__Method_SetEstopConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.SetEstopConfigRequest, global::Bosdyn.Api.SetEstopConfigResponse>(serviceImpl.SetEstopConfig));
      serviceBinder.AddMethod(__Method_GetEstopSystemStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetEstopSystemStatusRequest, global::Bosdyn.Api.GetEstopSystemStatusResponse>(serviceImpl.GetEstopSystemStatus));
    }

  }
}
#endregion
