// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/data_acquisition_plugin_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The DataAcquisitionPluginService is a gRPC service that a payload developer implements to retrieve
  /// data from a sensor (or more generally perform some payload action) and optionally store that data
  /// on the robot via the DataAcquisitionStore service.
  /// </summary>
  public static partial class DataAcquisitionPluginService
  {
    static readonly string __ServiceName = "bosdyn.api.DataAcquisitionPluginService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.AcquirePluginDataRequest> __Marshaller_bosdyn_api_AcquirePluginDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.AcquirePluginDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.AcquirePluginDataResponse> __Marshaller_bosdyn_api_AcquirePluginDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.AcquirePluginDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetStatusRequest> __Marshaller_bosdyn_api_GetStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetStatusResponse> __Marshaller_bosdyn_api_GetStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetServiceInfoRequest> __Marshaller_bosdyn_api_GetServiceInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetServiceInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.GetServiceInfoResponse> __Marshaller_bosdyn_api_GetServiceInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.GetServiceInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.CancelAcquisitionRequest> __Marshaller_bosdyn_api_CancelAcquisitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.CancelAcquisitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.CancelAcquisitionResponse> __Marshaller_bosdyn_api_CancelAcquisitionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.CancelAcquisitionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.AcquirePluginDataRequest, global::Bosdyn.Api.AcquirePluginDataResponse> __Method_AcquirePluginData = new grpc::Method<global::Bosdyn.Api.AcquirePluginDataRequest, global::Bosdyn.Api.AcquirePluginDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcquirePluginData",
        __Marshaller_bosdyn_api_AcquirePluginDataRequest,
        __Marshaller_bosdyn_api_AcquirePluginDataResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetStatusRequest, global::Bosdyn.Api.GetStatusResponse> __Method_GetStatus = new grpc::Method<global::Bosdyn.Api.GetStatusRequest, global::Bosdyn.Api.GetStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_bosdyn_api_GetStatusRequest,
        __Marshaller_bosdyn_api_GetStatusResponse);

    static readonly grpc::Method<global::Bosdyn.Api.GetServiceInfoRequest, global::Bosdyn.Api.GetServiceInfoResponse> __Method_GetServiceInfo = new grpc::Method<global::Bosdyn.Api.GetServiceInfoRequest, global::Bosdyn.Api.GetServiceInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceInfo",
        __Marshaller_bosdyn_api_GetServiceInfoRequest,
        __Marshaller_bosdyn_api_GetServiceInfoResponse);

    static readonly grpc::Method<global::Bosdyn.Api.CancelAcquisitionRequest, global::Bosdyn.Api.CancelAcquisitionResponse> __Method_CancelAcquisition = new grpc::Method<global::Bosdyn.Api.CancelAcquisitionRequest, global::Bosdyn.Api.CancelAcquisitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelAcquisition",
        __Marshaller_bosdyn_api_CancelAcquisitionRequest,
        __Marshaller_bosdyn_api_CancelAcquisitionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.DataAcquisitionPluginServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataAcquisitionPluginService</summary>
    [grpc::BindServiceMethod(typeof(DataAcquisitionPluginService), "BindService")]
    public abstract partial class DataAcquisitionPluginServiceBase
    {
      /// <summary>
      /// Trigger a data acquisition to save metadata and non-image data to the data buffer.
      /// Sent by the main DAQ as a result of a data acquisition request from the tablet or a client.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.AcquirePluginDataResponse> AcquirePluginData(global::Bosdyn.Api.AcquirePluginDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the status of a data acquisition.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetStatusResponse> GetStatus(global::Bosdyn.Api.GetStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get information from a DAQ service; lists acquisition capabilities.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.GetServiceInfoResponse> GetServiceInfo(global::Bosdyn.Api.GetServiceInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel an in-progress data acquisition.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.CancelAcquisitionResponse> CancelAcquisition(global::Bosdyn.Api.CancelAcquisitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataAcquisitionPluginService</summary>
    public partial class DataAcquisitionPluginServiceClient : grpc::ClientBase<DataAcquisitionPluginServiceClient>
    {
      /// <summary>Creates a new client for DataAcquisitionPluginService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataAcquisitionPluginServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataAcquisitionPluginService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataAcquisitionPluginServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataAcquisitionPluginServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataAcquisitionPluginServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Trigger a data acquisition to save metadata and non-image data to the data buffer.
      /// Sent by the main DAQ as a result of a data acquisition request from the tablet or a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.AcquirePluginDataResponse AcquirePluginData(global::Bosdyn.Api.AcquirePluginDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquirePluginData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Trigger a data acquisition to save metadata and non-image data to the data buffer.
      /// Sent by the main DAQ as a result of a data acquisition request from the tablet or a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.AcquirePluginDataResponse AcquirePluginData(global::Bosdyn.Api.AcquirePluginDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcquirePluginData, null, options, request);
      }
      /// <summary>
      /// Trigger a data acquisition to save metadata and non-image data to the data buffer.
      /// Sent by the main DAQ as a result of a data acquisition request from the tablet or a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.AcquirePluginDataResponse> AcquirePluginDataAsync(global::Bosdyn.Api.AcquirePluginDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquirePluginDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Trigger a data acquisition to save metadata and non-image data to the data buffer.
      /// Sent by the main DAQ as a result of a data acquisition request from the tablet or a client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.AcquirePluginDataResponse> AcquirePluginDataAsync(global::Bosdyn.Api.AcquirePluginDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcquirePluginData, null, options, request);
      }
      /// <summary>
      /// Query the status of a data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetStatusResponse GetStatus(global::Bosdyn.Api.GetStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the status of a data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetStatusResponse GetStatus(global::Bosdyn.Api.GetStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// Query the status of a data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetStatusResponse> GetStatusAsync(global::Bosdyn.Api.GetStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the status of a data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetStatusResponse> GetStatusAsync(global::Bosdyn.Api.GetStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// Get information from a DAQ service; lists acquisition capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetServiceInfoResponse GetServiceInfo(global::Bosdyn.Api.GetServiceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get information from a DAQ service; lists acquisition capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.GetServiceInfoResponse GetServiceInfo(global::Bosdyn.Api.GetServiceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceInfo, null, options, request);
      }
      /// <summary>
      /// Get information from a DAQ service; lists acquisition capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetServiceInfoResponse> GetServiceInfoAsync(global::Bosdyn.Api.GetServiceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get information from a DAQ service; lists acquisition capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.GetServiceInfoResponse> GetServiceInfoAsync(global::Bosdyn.Api.GetServiceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceInfo, null, options, request);
      }
      /// <summary>
      /// Cancel an in-progress data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.CancelAcquisitionResponse CancelAcquisition(global::Bosdyn.Api.CancelAcquisitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelAcquisition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel an in-progress data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.CancelAcquisitionResponse CancelAcquisition(global::Bosdyn.Api.CancelAcquisitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelAcquisition, null, options, request);
      }
      /// <summary>
      /// Cancel an in-progress data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.CancelAcquisitionResponse> CancelAcquisitionAsync(global::Bosdyn.Api.CancelAcquisitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelAcquisitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel an in-progress data acquisition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.CancelAcquisitionResponse> CancelAcquisitionAsync(global::Bosdyn.Api.CancelAcquisitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelAcquisition, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataAcquisitionPluginServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataAcquisitionPluginServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataAcquisitionPluginServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AcquirePluginData, serviceImpl.AcquirePluginData)
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_GetServiceInfo, serviceImpl.GetServiceInfo)
          .AddMethod(__Method_CancelAcquisition, serviceImpl.CancelAcquisition).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataAcquisitionPluginServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AcquirePluginData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.AcquirePluginDataRequest, global::Bosdyn.Api.AcquirePluginDataResponse>(serviceImpl.AcquirePluginData));
      serviceBinder.AddMethod(__Method_GetStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetStatusRequest, global::Bosdyn.Api.GetStatusResponse>(serviceImpl.GetStatus));
      serviceBinder.AddMethod(__Method_GetServiceInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.GetServiceInfoRequest, global::Bosdyn.Api.GetServiceInfoResponse>(serviceImpl.GetServiceInfo));
      serviceBinder.AddMethod(__Method_CancelAcquisition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.CancelAcquisitionRequest, global::Bosdyn.Api.CancelAcquisitionResponse>(serviceImpl.CancelAcquisition));
    }

  }
}
#endregion
