// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/data_acquisition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/data_acquisition.proto</summary>
  public static partial class DataAcquisitionReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/data_acquisition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataAcquisitionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90b3MvZGF0YV9hY3F1aXNpdGlvbi5wcm90bxIKYm9zZHluLmFwaRoT",
            "UHJvdG9zL2hlYWRlci5wcm90bxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGhxnb29nbGUvcHJv",
            "dG9idWYvc3RydWN0LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvImoKGURhdGFBY3F1aXNpdGlvbkNhcGFiaWxpdHkSDAoEbmFtZRgB",
            "IAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIUCgxjaGFubmVsX25hbWUYAyAB",
            "KAkSFAoMc2VydmljZV9uYW1lGAQgASgJIk4KGkltYWdlQWNxdWlzaXRpb25D",
            "YXBhYmlsaXR5EhQKDHNlcnZpY2VfbmFtZRgBIAEoCRIaChJpbWFnZV9zb3Vy",
            "Y2VfbmFtZXMYAiADKAkilwEKGUFjcXVpc2l0aW9uQ2FwYWJpbGl0eUxpc3QS",
            "OwoMZGF0YV9zb3VyY2VzGAEgAygLMiUuYm9zZHluLmFwaS5EYXRhQWNxdWlz",
            "aXRpb25DYXBhYmlsaXR5Ej0KDWltYWdlX3NvdXJjZXMYAyADKAsyJi5ib3Nk",
            "eW4uYXBpLkltYWdlQWNxdWlzaXRpb25DYXBhYmlsaXR5ImkKD0NhcHR1cmVB",
            "Y3Rpb25JZBITCgthY3Rpb25fbmFtZRgBIAEoCRISCgpncm91cF9uYW1lGAIg",
            "ASgJEi0KCXRpbWVzdGFtcBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAiZAoORGF0YUlkZW50aWZpZXISLgoJYWN0aW9uX2lkGAEgASgLMhsu",
            "Ym9zZHluLmFwaS5DYXB0dXJlQWN0aW9uSWQSDwoHY2hhbm5lbBgCIAEoCRIR",
            "CglkYXRhX25hbWUYAyABKAkiMQoITWV0YWRhdGESJQoEZGF0YRgBIAEoCzIX",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QibgoSQXNzb2NpYXRlZE1ldGFkYXRh",
            "EjAKDHJlZmVyZW5jZV9pZBgBIAEoCzIaLmJvc2R5bi5hcGkuRGF0YUlkZW50",
            "aWZpZXISJgoIbWV0YWRhdGEYAiABKAsyFC5ib3NkeW4uYXBpLk1ldGFkYXRh",
            "IkEKEkltYWdlU291cmNlQ2FwdHVyZRIVCg1pbWFnZV9zZXJ2aWNlGAEgASgJ",
            "EhQKDGltYWdlX3NvdXJjZRgCIAEoCSIbCgtEYXRhQ2FwdHVyZRIMCgRuYW1l",
            "GAEgASgJIoABChZBY3F1aXNpdGlvblJlcXVlc3RMaXN0EjYKDmltYWdlX2Nh",
            "cHR1cmVzGAEgAygLMh4uYm9zZHluLmFwaS5JbWFnZVNvdXJjZUNhcHR1cmUS",
            "LgoNZGF0YV9jYXB0dXJlcxgCIAMoCzIXLmJvc2R5bi5hcGkuRGF0YUNhcHR1",
            "cmUieQoJRGF0YUVycm9yEisKB2RhdGFfaWQYASABKAsyGi5ib3NkeW4uYXBp",
            "LkRhdGFJZGVudGlmaWVyEhUKDWVycm9yX21lc3NhZ2UYAiABKAkSKAoKZXJy",
            "b3JfZGF0YRgDIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5Bbnki5gEKElBsdWdp",
            "blNlcnZpY2VFcnJvchIUCgxzZXJ2aWNlX25hbWUYASABKAkSNwoFZXJyb3IY",
            "AiABKA4yKC5ib3NkeW4uYXBpLlBsdWdpblNlcnZpY2VFcnJvci5FcnJvckNv",
            "ZGUSDwoHbWVzc2FnZRgDIAEoCSJwCglFcnJvckNvZGUSEgoOU1RBVFVTX1VO",
            "S05PV04QABIYChRTVEFUVVNfUkVRVUVTVF9FUlJPUhABEhoKFlNUQVRVU19H",
            "RVRTVEFUVVNfRVJST1IQAhIZChVTVEFUVVNfSU5URVJOQUxfRVJST1IQAyKJ",
            "AgoSQWNxdWlyZURhdGFSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5",
            "bi5hcGkuUmVxdWVzdEhlYWRlchIuCglhY3Rpb25faWQYAiABKAsyGy5ib3Nk",
            "eW4uYXBpLkNhcHR1cmVBY3Rpb25JZBImCghtZXRhZGF0YRgDIAEoCzIULmJv",
            "c2R5bi5hcGkuTWV0YWRhdGESQAoUYWNxdWlzaXRpb25fcmVxdWVzdHMYBCAB",
            "KAsyIi5ib3NkeW4uYXBpLkFjcXVpc2l0aW9uUmVxdWVzdExpc3QSLgoLbWlu",
            "X3RpbWVvdXQYBSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24i2wEK",
            "E0FjcXVpcmVEYXRhUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHlu",
            "LmFwaS5SZXNwb25zZUhlYWRlchI2CgZzdGF0dXMYAiABKA4yJi5ib3NkeW4u",
            "YXBpLkFjcXVpcmVEYXRhUmVzcG9uc2UuU3RhdHVzEhIKCnJlcXVlc3RfaWQY",
            "AyABKA0iTAoGU3RhdHVzEhIKDlNUQVRVU19VTktOT1dOEAASDQoJU1RBVFVT",
            "X09LEAESHwobU1RBVFVTX1VOS05PV05fQ0FQVFVSRV9UWVBFEAIijAIKGEFj",
            "cXVpcmVQbHVnaW5EYXRhUmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3Nk",
            "eW4uYXBpLlJlcXVlc3RIZWFkZXISKwoHZGF0YV9pZBgCIAMoCzIaLmJvc2R5",
            "bi5hcGkuRGF0YUlkZW50aWZpZXISJgoIbWV0YWRhdGEYAyABKAsyFC5ib3Nk",
            "eW4uYXBpLk1ldGFkYXRhEi4KCWFjdGlvbl9pZBgEIAEoCzIbLmJvc2R5bi5h",
            "cGkuQ2FwdHVyZUFjdGlvbklkEkAKFGFjcXVpc2l0aW9uX3JlcXVlc3RzGAUg",
            "ASgLMiIuYm9zZHluLmFwaS5BY3F1aXNpdGlvblJlcXVlc3RMaXN0Ip0CChlB",
            "Y3F1aXJlUGx1Z2luRGF0YVJlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJv",
            "c2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISPAoGc3RhdHVzGAIgASgOMiwuYm9z",
            "ZHluLmFwaS5BY3F1aXJlUGx1Z2luRGF0YVJlc3BvbnNlLlN0YXR1cxISCgpy",
            "ZXF1ZXN0X2lkGAMgASgNEjQKEHRpbWVvdXRfZGVhZGxpbmUYBSABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wIkwKBlN0YXR1cxISCg5TVEFUVVNf",
            "VU5LTk9XThAAEg0KCVNUQVRVU19PSxABEh8KG1NUQVRVU19VTktOT1dOX0NB",
            "UFRVUkVfVFlQRRACIlEKEEdldFN0YXR1c1JlcXVlc3QSKQoGaGVhZGVyGAEg",
            "ASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEhIKCnJlcXVlc3RfaWQY",
            "AiABKA0iugQKEUdldFN0YXR1c1Jlc3BvbnNlEioKBmhlYWRlchgBIAEoCzIa",
            "LmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISNAoGc3RhdHVzGAIgASgOMiQu",
            "Ym9zZHluLmFwaS5HZXRTdGF0dXNSZXNwb25zZS5TdGF0dXMSLgoKZGF0YV9z",
            "YXZlZBgDIAMoCzIaLmJvc2R5bi5hcGkuRGF0YUlkZW50aWZpZXISKgoLZGF0",
            "YV9lcnJvcnMYCSADKAsyFS5ib3NkeW4uYXBpLkRhdGFFcnJvchI2Cg5zZXJ2",
            "aWNlX2Vycm9ycxgKIAMoCzIeLmJvc2R5bi5hcGkuUGx1Z2luU2VydmljZUVy",
            "cm9yIq4CCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABIUChBTVEFUVVNf",
            "QUNRVUlSSU5HEAESEQoNU1RBVFVTX1NBVklORxACEhMKD1NUQVRVU19DT01Q",
            "TEVURRADEh0KGVNUQVRVU19DQU5DRUxfSU5fUFJPR1JFU1MQBBIgChxTVEFU",
            "VVNfQUNRVUlTSVRJT05fQ0FOQ0VMTEVEEAUSFQoRU1RBVFVTX0RBVEFfRVJS",
            "T1IQChITCg9TVEFUVVNfVElNRURPVVQQCxIZChVTVEFUVVNfSU5URVJOQUxf",
            "RVJST1IQDBIkCiBTVEFUVVNfQ0FOQ0VMX0FDUVVJU0lUSU9OX0ZBSUxFRBAe",
            "EiQKIFNUQVRVU19SRVFVRVNUX0lEX0RPRVNfTk9UX0VYSVNUEBQiQgoVR2V0",
            "U2VydmljZUluZm9SZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5h",
            "cGkuUmVxdWVzdEhlYWRlciKBAQoWR2V0U2VydmljZUluZm9SZXNwb25zZRIq",
            "CgZoZWFkZXIYASABKAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEjsK",
            "DGNhcGFiaWxpdGllcxgCIAEoCzIlLmJvc2R5bi5hcGkuQWNxdWlzaXRpb25D",
            "YXBhYmlsaXR5TGlzdCJZChhDYW5jZWxBY3F1aXNpdGlvblJlcXVlc3QSKQoG",
            "aGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEhIKCnJl",
            "cXVlc3RfaWQYAiABKA0i9QEKGUNhbmNlbEFjcXVpc2l0aW9uUmVzcG9uc2US",
            "KgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlchI8",
            "CgZzdGF0dXMYAiABKA4yLC5ib3NkeW4uYXBpLkNhbmNlbEFjcXVpc2l0aW9u",
            "UmVzcG9uc2UuU3RhdHVzIm4KBlN0YXR1cxISCg5TVEFUVVNfVU5LTk9XThAA",
            "Eg0KCVNUQVRVU19PSxABEhsKF1NUQVRVU19GQUlMRURfVE9fQ0FOQ0VMEAIS",
            "JAogU1RBVFVTX1JFUVVFU1RfSURfRE9FU19OT1RfRVhJU1QQA0IWQhREYXRh",
            "QWNxdWlzaXRpb25Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DataAcquisitionCapability), global::Bosdyn.Api.DataAcquisitionCapability.Parser, new[]{ "Name", "Description", "ChannelName", "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageAcquisitionCapability), global::Bosdyn.Api.ImageAcquisitionCapability.Parser, new[]{ "ServiceName", "ImageSourceNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquisitionCapabilityList), global::Bosdyn.Api.AcquisitionCapabilityList.Parser, new[]{ "DataSources", "ImageSources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CaptureActionId), global::Bosdyn.Api.CaptureActionId.Parser, new[]{ "ActionName", "GroupName", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DataIdentifier), global::Bosdyn.Api.DataIdentifier.Parser, new[]{ "ActionId", "Channel", "DataName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Metadata), global::Bosdyn.Api.Metadata.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AssociatedMetadata), global::Bosdyn.Api.AssociatedMetadata.Parser, new[]{ "ReferenceId", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageSourceCapture), global::Bosdyn.Api.ImageSourceCapture.Parser, new[]{ "ImageService", "ImageSource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DataCapture), global::Bosdyn.Api.DataCapture.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquisitionRequestList), global::Bosdyn.Api.AcquisitionRequestList.Parser, new[]{ "ImageCaptures", "DataCaptures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DataError), global::Bosdyn.Api.DataError.Parser, new[]{ "DataId", "ErrorMessage", "ErrorData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PluginServiceError), global::Bosdyn.Api.PluginServiceError.Parser, new[]{ "ServiceName", "Error", "Message" }, null, new[]{ typeof(global::Bosdyn.Api.PluginServiceError.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquireDataRequest), global::Bosdyn.Api.AcquireDataRequest.Parser, new[]{ "Header", "ActionId", "Metadata", "AcquisitionRequests", "MinTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquireDataResponse), global::Bosdyn.Api.AcquireDataResponse.Parser, new[]{ "Header", "Status", "RequestId" }, null, new[]{ typeof(global::Bosdyn.Api.AcquireDataResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquirePluginDataRequest), global::Bosdyn.Api.AcquirePluginDataRequest.Parser, new[]{ "Header", "DataId", "Metadata", "ActionId", "AcquisitionRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AcquirePluginDataResponse), global::Bosdyn.Api.AcquirePluginDataResponse.Parser, new[]{ "Header", "Status", "RequestId", "TimeoutDeadline" }, null, new[]{ typeof(global::Bosdyn.Api.AcquirePluginDataResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetStatusRequest), global::Bosdyn.Api.GetStatusRequest.Parser, new[]{ "Header", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetStatusResponse), global::Bosdyn.Api.GetStatusResponse.Parser, new[]{ "Header", "Status", "DataSaved", "DataErrors", "ServiceErrors" }, null, new[]{ typeof(global::Bosdyn.Api.GetStatusResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetServiceInfoRequest), global::Bosdyn.Api.GetServiceInfoRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GetServiceInfoResponse), global::Bosdyn.Api.GetServiceInfoResponse.Parser, new[]{ "Header", "Capabilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CancelAcquisitionRequest), global::Bosdyn.Api.CancelAcquisitionRequest.Parser, new[]{ "Header", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CancelAcquisitionResponse), global::Bosdyn.Api.CancelAcquisitionResponse.Parser, new[]{ "Header", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.CancelAcquisitionResponse.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Description of a data acquisition capability. A data acquisition plugin service will have a
  /// set of capabilities for which it can acquire and save the appropriate data.
  /// </summary>
  public sealed partial class DataAcquisitionCapability : pb::IMessage<DataAcquisitionCapability> {
    private static readonly pb::MessageParser<DataAcquisitionCapability> _parser = new pb::MessageParser<DataAcquisitionCapability>(() => new DataAcquisitionCapability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAcquisitionCapability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAcquisitionCapability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAcquisitionCapability(DataAcquisitionCapability other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      channelName_ = other.channelName_;
      serviceName_ = other.serviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAcquisitionCapability Clone() {
      return new DataAcquisitionCapability(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Unique identifier for the data acquisition capability. Used for identification purposes
    /// when making acquire data requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A human readable name of the data acquisition capability that will be shown on the tablet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 3;
    private string channelName_ = "";
    /// <summary>
    /// Channel name that will be associated with all data stored in the data buffer through
    /// each data acquisition plugin. Metadata acquirers do not specify this field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 4;
    private string serviceName_ = "";
    /// <summary>
    /// The data acquisition plugin service's service name used in directory registration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAcquisitionCapability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAcquisitionCapability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ChannelName != other.ChannelName) return false;
      if (ServiceName != other.ServiceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelName);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAcquisitionCapability other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            ChannelName = input.ReadString();
            break;
          }
          case 34: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Description of an image acquisition capability. The image acquisition capabilities will be available
  /// through the main data acquisition service on robot and are populated based on all bosdyn.api.ImageService
  /// services registered to the robot's directory.
  /// </summary>
  public sealed partial class ImageAcquisitionCapability : pb::IMessage<ImageAcquisitionCapability> {
    private static readonly pb::MessageParser<ImageAcquisitionCapability> _parser = new pb::MessageParser<ImageAcquisitionCapability>(() => new ImageAcquisitionCapability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageAcquisitionCapability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAcquisitionCapability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAcquisitionCapability(ImageAcquisitionCapability other) : this() {
      serviceName_ = other.serviceName_;
      imageSourceNames_ = other.imageSourceNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageAcquisitionCapability Clone() {
      return new ImageAcquisitionCapability(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    /// The image service's service name used in directory registration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_source_names" field.</summary>
    public const int ImageSourceNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_imageSourceNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> imageSourceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of the image source names reported by the image service (through the ListImageSources RPC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ImageSourceNames {
      get { return imageSourceNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageAcquisitionCapability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageAcquisitionCapability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if(!imageSourceNames_.Equals(other.imageSourceNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      hash ^= imageSourceNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      imageSourceNames_.WriteTo(output, _repeated_imageSourceNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      size += imageSourceNames_.CalculateSize(_repeated_imageSourceNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageAcquisitionCapability other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      imageSourceNames_.Add(other.imageSourceNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            imageSourceNames_.AddEntriesFrom(input, _repeated_imageSourceNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A list of all capabilities (data and images) that a specific data acquisition plugin service can successfully
  /// acquire and save the data specified in each capability.
  /// </summary>
  public sealed partial class AcquisitionCapabilityList : pb::IMessage<AcquisitionCapabilityList> {
    private static readonly pb::MessageParser<AcquisitionCapabilityList> _parser = new pb::MessageParser<AcquisitionCapabilityList>(() => new AcquisitionCapabilityList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquisitionCapabilityList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionCapabilityList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionCapabilityList(AcquisitionCapabilityList other) : this() {
      dataSources_ = other.dataSources_.Clone();
      imageSources_ = other.imageSources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionCapabilityList Clone() {
      return new AcquisitionCapabilityList(this);
    }

    /// <summary>Field number for the "data_sources" field.</summary>
    public const int DataSourcesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataAcquisitionCapability> _repeated_dataSources_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.DataAcquisitionCapability.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataAcquisitionCapability> dataSources_ = new pbc::RepeatedField<global::Bosdyn.Api.DataAcquisitionCapability>();
    /// <summary>
    /// List of non-image data acquisition capabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataAcquisitionCapability> DataSources {
      get { return dataSources_; }
    }

    /// <summary>Field number for the "image_sources" field.</summary>
    public const int ImageSourcesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ImageAcquisitionCapability> _repeated_imageSources_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.ImageAcquisitionCapability.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ImageAcquisitionCapability> imageSources_ = new pbc::RepeatedField<global::Bosdyn.Api.ImageAcquisitionCapability>();
    /// <summary>
    /// List of image data acquisition capabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ImageAcquisitionCapability> ImageSources {
      get { return imageSources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquisitionCapabilityList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquisitionCapabilityList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataSources_.Equals(other.dataSources_)) return false;
      if(!imageSources_.Equals(other.imageSources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataSources_.GetHashCode();
      hash ^= imageSources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataSources_.WriteTo(output, _repeated_dataSources_codec);
      imageSources_.WriteTo(output, _repeated_imageSources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataSources_.CalculateSize(_repeated_dataSources_codec);
      size += imageSources_.CalculateSize(_repeated_imageSources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquisitionCapabilityList other) {
      if (other == null) {
        return;
      }
      dataSources_.Add(other.dataSources_);
      imageSources_.Add(other.imageSources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataSources_.AddEntriesFrom(input, _repeated_dataSources_codec);
            break;
          }
          case 26: {
            imageSources_.AddEntriesFrom(input, _repeated_imageSources_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The CaptureActionId describes the entire capture action for an AcquireData request and will be used
  /// to uniquely identify that full request's set of stored data.
  /// </summary>
  public sealed partial class CaptureActionId : pb::IMessage<CaptureActionId> {
    private static readonly pb::MessageParser<CaptureActionId> _parser = new pb::MessageParser<CaptureActionId>(() => new CaptureActionId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureActionId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureActionId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureActionId(CaptureActionId other) : this() {
      actionName_ = other.actionName_;
      groupName_ = other.groupName_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureActionId Clone() {
      return new CaptureActionId(this);
    }

    /// <summary>Field number for the "action_name" field.</summary>
    public const int ActionNameFieldNumber = 1;
    private string actionName_ = "";
    /// <summary>
    /// The action name is used to group all pieces of data associated with a single AcquireData
    /// request. The action name must be unique for the given group name, meaning no two actions
    /// with the same group name can have the same action name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    /// <summary>
    /// The group name is used to group a "session" of data, such as a mission or a teleop capture session, which
    /// includes multiple capture actions (from multiple AcquireData RPCs).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Time (in the robot's clock) at which this capture was triggered. If the timestamp is not specified
    /// in the AcquireData RPC, the main data acquisition service on robot will populate the timestamp field
    /// with the timestamp of when the RPC was recieved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureActionId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureActionId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionName != other.ActionName) return false;
      if (GroupName != other.GroupName) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionName);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureActionId other) {
      if (other == null) {
        return;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionName = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A way to identify an individual piece of data stored in the data buffer.
  /// </summary>
  public sealed partial class DataIdentifier : pb::IMessage<DataIdentifier> {
    private static readonly pb::MessageParser<DataIdentifier> _parser = new pb::MessageParser<DataIdentifier>(() => new DataIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdentifier(DataIdentifier other) : this() {
      actionId_ = other.actionId_ != null ? other.actionId_.Clone() : null;
      channel_ = other.channel_;
      dataName_ = other.dataName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataIdentifier Clone() {
      return new DataIdentifier(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private global::Bosdyn.Api.CaptureActionId actionId_;
    /// <summary>
    /// The action where the data was acquired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.CaptureActionId ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    /// Data buffer channel associated with the DataBlob. The channel is used to group data across
    /// actions by a specific source, and it can be used in queries to retrieve some subset of data. For example,
    /// the channel could be "ptz" and queries can be made for all PTZ images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_name" field.</summary>
    public const int DataNameFieldNumber = 3;
    private string dataName_ = "";
    /// <summary>
    /// Data-specific identifier that can optionally be used to disambiguate cases where the action_id and
    /// channel are insufficient. For example, you save cropped SpotCAM pano image that are detected as gauges to
    /// a "detected_gauges" channel, but want a way to further individually identify them as each specific gauge,
    /// so you give each detection a unique data_name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataName {
      get { return dataName_; }
      set {
        dataName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ActionId, other.ActionId)) return false;
      if (Channel != other.Channel) return false;
      if (DataName != other.DataName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionId_ != null) hash ^= ActionId.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (DataName.Length != 0) hash ^= DataName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActionId);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (DataName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionId);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (DataName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.actionId_ != null) {
        if (actionId_ == null) {
          ActionId = new global::Bosdyn.Api.CaptureActionId();
        }
        ActionId.MergeFrom(other.ActionId);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.DataName.Length != 0) {
        DataName = other.DataName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (actionId_ == null) {
              ActionId = new global::Bosdyn.Api.CaptureActionId();
            }
            input.ReadMessage(ActionId);
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            DataName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Structured data that can be included within a AcquireData RPC and saved in association with
  /// that capture action.
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Struct data_;
    /// <summary>
    /// JSON representation of metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message can be stored as a DataBlob in the data buffer in order to be recognized as
  /// metadata that is associated with previously stored data.
  /// </summary>
  public sealed partial class AssociatedMetadata : pb::IMessage<AssociatedMetadata> {
    private static readonly pb::MessageParser<AssociatedMetadata> _parser = new pb::MessageParser<AssociatedMetadata>(() => new AssociatedMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssociatedMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatedMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatedMetadata(AssociatedMetadata other) : this() {
      referenceId_ = other.referenceId_ != null ? other.referenceId_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatedMetadata Clone() {
      return new AssociatedMetadata(this);
    }

    /// <summary>Field number for the "reference_id" field.</summary>
    public const int ReferenceIdFieldNumber = 1;
    private global::Bosdyn.Api.DataIdentifier referenceId_;
    /// <summary>
    /// The data that this metadata refers to.
    /// The timestamp field is ignored.
    /// If only the action_id is filled out, this metadata is associated with the entire capture action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DataIdentifier ReferenceId {
      get { return referenceId_; }
      set {
        referenceId_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::Bosdyn.Api.Metadata metadata_;
    /// <summary>
    /// Metadata message to be stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssociatedMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssociatedMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReferenceId, other.ReferenceId)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (referenceId_ != null) hash ^= ReferenceId.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (referenceId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReferenceId);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (referenceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceId);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssociatedMetadata other) {
      if (other == null) {
        return;
      }
      if (other.referenceId_ != null) {
        if (referenceId_ == null) {
          ReferenceId = new global::Bosdyn.Api.DataIdentifier();
        }
        ReferenceId.MergeFrom(other.ReferenceId);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Bosdyn.Api.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (referenceId_ == null) {
              ReferenceId = new global::Bosdyn.Api.DataIdentifier();
            }
            input.ReadMessage(ReferenceId);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              Metadata = new global::Bosdyn.Api.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An individual capture which can be specified in the AcquireData request to identify a piece of
  /// image data to be collected.
  /// </summary>
  public sealed partial class ImageSourceCapture : pb::IMessage<ImageSourceCapture> {
    private static readonly pb::MessageParser<ImageSourceCapture> _parser = new pb::MessageParser<ImageSourceCapture>(() => new ImageSourceCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSourceCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceCapture(ImageSourceCapture other) : this() {
      imageService_ = other.imageService_;
      imageSource_ = other.imageSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSourceCapture Clone() {
      return new ImageSourceCapture(this);
    }

    /// <summary>Field number for the "image_service" field.</summary>
    public const int ImageServiceFieldNumber = 1;
    private string imageService_ = "";
    /// <summary>
    /// Name of the image service that the data should be requested from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageService {
      get { return imageService_; }
      set {
        imageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_source" field.</summary>
    public const int ImageSourceFieldNumber = 2;
    private string imageSource_ = "";
    /// <summary>
    /// Specific image source to use from the list reported by the image service within the
    /// ImageAcquisitionCapability message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageSource {
      get { return imageSource_; }
      set {
        imageSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSourceCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSourceCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageService != other.ImageService) return false;
      if (ImageSource != other.ImageSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageService.Length != 0) hash ^= ImageService.GetHashCode();
      if (ImageSource.Length != 0) hash ^= ImageSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageService.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageService);
      }
      if (ImageSource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImageSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageService);
      }
      if (ImageSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSourceCapture other) {
      if (other == null) {
        return;
      }
      if (other.ImageService.Length != 0) {
        ImageService = other.ImageService;
      }
      if (other.ImageSource.Length != 0) {
        ImageSource = other.ImageSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageService = input.ReadString();
            break;
          }
          case 18: {
            ImageSource = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An individual capture which can be specified in the AcquireData request to identify a piece of
  /// non-image data to be collected.
  /// </summary>
  public sealed partial class DataCapture : pb::IMessage<DataCapture> {
    private static readonly pb::MessageParser<DataCapture> _parser = new pb::MessageParser<DataCapture>(() => new DataCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataCapture(DataCapture other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataCapture Clone() {
      return new DataCapture(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the data to be captured. This should match the uniquely identifying name from
    /// the DataAcquisitionCapability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataCapture other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The grouping of all individual image and data captures for a given capture action.
  /// </summary>
  public sealed partial class AcquisitionRequestList : pb::IMessage<AcquisitionRequestList> {
    private static readonly pb::MessageParser<AcquisitionRequestList> _parser = new pb::MessageParser<AcquisitionRequestList>(() => new AcquisitionRequestList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquisitionRequestList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionRequestList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionRequestList(AcquisitionRequestList other) : this() {
      imageCaptures_ = other.imageCaptures_.Clone();
      dataCaptures_ = other.dataCaptures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquisitionRequestList Clone() {
      return new AcquisitionRequestList(this);
    }

    /// <summary>Field number for the "image_captures" field.</summary>
    public const int ImageCapturesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ImageSourceCapture> _repeated_imageCaptures_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.ImageSourceCapture.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ImageSourceCapture> imageCaptures_ = new pbc::RepeatedField<global::Bosdyn.Api.ImageSourceCapture>();
    /// <summary>
    /// List of image requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ImageSourceCapture> ImageCaptures {
      get { return imageCaptures_; }
    }

    /// <summary>Field number for the "data_captures" field.</summary>
    public const int DataCapturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataCapture> _repeated_dataCaptures_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.DataCapture.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataCapture> dataCaptures_ = new pbc::RepeatedField<global::Bosdyn.Api.DataCapture>();
    /// <summary>
    /// List of non-image data and metadata requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataCapture> DataCaptures {
      get { return dataCaptures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquisitionRequestList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquisitionRequestList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!imageCaptures_.Equals(other.imageCaptures_)) return false;
      if(!dataCaptures_.Equals(other.dataCaptures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= imageCaptures_.GetHashCode();
      hash ^= dataCaptures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      imageCaptures_.WriteTo(output, _repeated_imageCaptures_codec);
      dataCaptures_.WriteTo(output, _repeated_dataCaptures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += imageCaptures_.CalculateSize(_repeated_imageCaptures_codec);
      size += dataCaptures_.CalculateSize(_repeated_dataCaptures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquisitionRequestList other) {
      if (other == null) {
        return;
      }
      imageCaptures_.Add(other.imageCaptures_);
      dataCaptures_.Add(other.dataCaptures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            imageCaptures_.AddEntriesFrom(input, _repeated_imageCaptures_codec);
            break;
          }
          case 18: {
            dataCaptures_.AddEntriesFrom(input, _repeated_dataCaptures_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An error associated with a particular capture action and piece of data.
  /// </summary>
  public sealed partial class DataError : pb::IMessage<DataError> {
    private static readonly pb::MessageParser<DataError> _parser = new pb::MessageParser<DataError>(() => new DataError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataError(DataError other) : this() {
      dataId_ = other.dataId_ != null ? other.dataId_.Clone() : null;
      errorMessage_ = other.errorMessage_;
      errorData_ = other.errorData_ != null ? other.errorData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataError Clone() {
      return new DataError(this);
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 1;
    private global::Bosdyn.Api.DataIdentifier dataId_;
    /// <summary>
    /// Identifier for the data to be saved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DataIdentifier DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    /// <summary>
    /// Human-readable message describing the error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_data" field.</summary>
    public const int ErrorDataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any errorData_;
    /// <summary>
    /// Custom plugin-specific data about the problem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ErrorData {
      get { return errorData_; }
      set {
        errorData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataId, other.DataId)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(ErrorData, other.ErrorData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataId_ != null) hash ^= DataId.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (errorData_ != null) hash ^= ErrorData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataId);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      if (errorData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ErrorData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataId);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (errorData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataError other) {
      if (other == null) {
        return;
      }
      if (other.dataId_ != null) {
        if (dataId_ == null) {
          DataId = new global::Bosdyn.Api.DataIdentifier();
        }
        DataId.MergeFrom(other.DataId);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.errorData_ != null) {
        if (errorData_ == null) {
          ErrorData = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ErrorData.MergeFrom(other.ErrorData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataId_ == null) {
              DataId = new global::Bosdyn.Api.DataIdentifier();
            }
            input.ReadMessage(DataId);
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            if (errorData_ == null) {
              ErrorData = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ErrorData);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An error associated with a particular data acquisition plugin service that was
  /// </summary>
  public sealed partial class PluginServiceError : pb::IMessage<PluginServiceError> {
    private static readonly pb::MessageParser<PluginServiceError> _parser = new pb::MessageParser<PluginServiceError>(() => new PluginServiceError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginServiceError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginServiceError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginServiceError(PluginServiceError other) : this() {
      serviceName_ = other.serviceName_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginServiceError Clone() {
      return new PluginServiceError(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    /// Name of the service with the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private global::Bosdyn.Api.PluginServiceError.Types.ErrorCode error_ = 0;
    /// <summary>
    /// Failure mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PluginServiceError.Types.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// Description of the error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginServiceError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginServiceError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Error != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginServiceError other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 16: {
            Error = (global::Bosdyn.Api.PluginServiceError.Types.ErrorCode) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PluginServiceError message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible ways a plugin can fail.
      /// </summary>
      public enum ErrorCode {
        [pbr::OriginalName("STATUS_UNKNOWN")] StatusUnknown = 0,
        /// <summary>
        /// The initial RPC to the plugin failed
        /// </summary>
        [pbr::OriginalName("STATUS_REQUEST_ERROR")] StatusRequestError = 1,
        /// <summary>
        /// The GetStatus request to the plugin failed with a data error or timeout.
        /// </summary>
        [pbr::OriginalName("STATUS_GETSTATUS_ERROR")] StatusGetstatusError = 2,
        /// <summary>
        /// The plugin reported an internal error.
        /// </summary>
        [pbr::OriginalName("STATUS_INTERNAL_ERROR")] StatusInternalError = 3,
      }

    }
    #endregion

  }

  public sealed partial class AcquireDataRequest : pb::IMessage<AcquireDataRequest> {
    private static readonly pb::MessageParser<AcquireDataRequest> _parser = new pb::MessageParser<AcquireDataRequest>(() => new AcquireDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquireDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataRequest(AcquireDataRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      actionId_ = other.actionId_ != null ? other.actionId_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      acquisitionRequests_ = other.acquisitionRequests_ != null ? other.acquisitionRequests_.Clone() : null;
      minTimeout_ = other.minTimeout_ != null ? other.minTimeout_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataRequest Clone() {
      return new AcquireDataRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private global::Bosdyn.Api.CaptureActionId actionId_;
    /// <summary>
    /// Define the unique action that all data should be saved with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.CaptureActionId ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Bosdyn.Api.Metadata metadata_;
    /// <summary>
    /// Metadata to store with the data capture. The main DAQ service saves it in the DataBuffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "acquisition_requests" field.</summary>
    public const int AcquisitionRequestsFieldNumber = 4;
    private global::Bosdyn.Api.AcquisitionRequestList acquisitionRequests_;
    /// <summary>
    /// List of capability requests that should be collected as part of this capture action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquisitionRequestList AcquisitionRequests {
      get { return acquisitionRequests_; }
      set {
        acquisitionRequests_ = value;
      }
    }

    /// <summary>Field number for the "min_timeout" field.</summary>
    public const int MinTimeoutFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Duration minTimeout_;
    /// <summary>
    /// Optional duration used to extend the amount of time that the data request may take, in
    /// the event that a plugin is incorrectly specifying its timeout.
    /// The amount of time allowed will be the maximum of this duration and any requests
    /// made to plugins or other capture sources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MinTimeout {
      get { return minTimeout_; }
      set {
        minTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquireDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquireDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(ActionId, other.ActionId)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(AcquisitionRequests, other.AcquisitionRequests)) return false;
      if (!object.Equals(MinTimeout, other.MinTimeout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (actionId_ != null) hash ^= ActionId.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (acquisitionRequests_ != null) hash ^= AcquisitionRequests.GetHashCode();
      if (minTimeout_ != null) hash ^= MinTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (actionId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActionId);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (acquisitionRequests_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AcquisitionRequests);
      }
      if (minTimeout_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MinTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (actionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionId);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (acquisitionRequests_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionRequests);
      }
      if (minTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquireDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.actionId_ != null) {
        if (actionId_ == null) {
          ActionId = new global::Bosdyn.Api.CaptureActionId();
        }
        ActionId.MergeFrom(other.ActionId);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Bosdyn.Api.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.acquisitionRequests_ != null) {
        if (acquisitionRequests_ == null) {
          AcquisitionRequests = new global::Bosdyn.Api.AcquisitionRequestList();
        }
        AcquisitionRequests.MergeFrom(other.AcquisitionRequests);
      }
      if (other.minTimeout_ != null) {
        if (minTimeout_ == null) {
          MinTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MinTimeout.MergeFrom(other.MinTimeout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (actionId_ == null) {
              ActionId = new global::Bosdyn.Api.CaptureActionId();
            }
            input.ReadMessage(ActionId);
            break;
          }
          case 26: {
            if (metadata_ == null) {
              Metadata = new global::Bosdyn.Api.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 34: {
            if (acquisitionRequests_ == null) {
              AcquisitionRequests = new global::Bosdyn.Api.AcquisitionRequestList();
            }
            input.ReadMessage(AcquisitionRequests);
            break;
          }
          case 42: {
            if (minTimeout_ == null) {
              MinTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(MinTimeout);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcquireDataResponse : pb::IMessage<AcquireDataResponse> {
    private static readonly pb::MessageParser<AcquireDataResponse> _parser = new pb::MessageParser<AcquireDataResponse>(() => new AcquireDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquireDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataResponse(AcquireDataResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquireDataResponse Clone() {
      return new AcquireDataResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.AcquireDataResponse.Types.Status status_ = 0;
    /// <summary>
    /// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
    /// acquisition request can be done using the GetStatus RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquireDataResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private uint requestId_;
    /// <summary>
    /// Identifier which can be used to check the status of or cancel the acquisition action..
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquireDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquireDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (RequestId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquireDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.AcquireDataResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AcquireDataResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The capture action has successfully started acquiring the data.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// One of the capability requests in the AcquisitionRequestList is unknown.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN_CAPTURE_TYPE")] UnknownCaptureType = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message sent by main DAQ service to all data acquisition plugin services.
  /// </summary>
  public sealed partial class AcquirePluginDataRequest : pb::IMessage<AcquirePluginDataRequest> {
    private static readonly pb::MessageParser<AcquirePluginDataRequest> _parser = new pb::MessageParser<AcquirePluginDataRequest>(() => new AcquirePluginDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquirePluginDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataRequest(AcquirePluginDataRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      dataId_ = other.dataId_.Clone();
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      actionId_ = other.actionId_ != null ? other.actionId_.Clone() : null;
      acquisitionRequests_ = other.acquisitionRequests_ != null ? other.acquisitionRequests_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataRequest Clone() {
      return new AcquirePluginDataRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "data_id" field.</summary>
    public const int DataIdFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataIdentifier> _repeated_dataId_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.DataIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier> dataId_ = new pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier>();
    /// <summary>
    /// Metadata acquirers use these DataIdentifier objects to associate them with the acquired
    /// metadata when storing them in the DataBuffer.
    /// Data acquirers simply get the timestamp from these DataIdentifier objects to use when
    /// storing the data in the DataBuffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier> DataId {
      get { return dataId_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Bosdyn.Api.Metadata metadata_;
    /// <summary>
    /// Metadata specified by the requestor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 4;
    private global::Bosdyn.Api.CaptureActionId actionId_;
    /// <summary>
    /// Id to be associated with all the data buffered for this request. It will be stored
    /// in the DataIdentifier field of each piece of data buffered from this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.CaptureActionId ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "acquisition_requests" field.</summary>
    public const int AcquisitionRequestsFieldNumber = 5;
    private global::Bosdyn.Api.AcquisitionRequestList acquisitionRequests_;
    /// <summary>
    /// List of capability requests specific for this DAQ plugin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquisitionRequestList AcquisitionRequests {
      get { return acquisitionRequests_; }
      set {
        acquisitionRequests_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquirePluginDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquirePluginDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!dataId_.Equals(other.dataId_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(ActionId, other.ActionId)) return false;
      if (!object.Equals(AcquisitionRequests, other.AcquisitionRequests)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= dataId_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (actionId_ != null) hash ^= ActionId.GetHashCode();
      if (acquisitionRequests_ != null) hash ^= AcquisitionRequests.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      dataId_.WriteTo(output, _repeated_dataId_codec);
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (actionId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ActionId);
      }
      if (acquisitionRequests_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AcquisitionRequests);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += dataId_.CalculateSize(_repeated_dataId_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (actionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionId);
      }
      if (acquisitionRequests_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionRequests);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquirePluginDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      dataId_.Add(other.dataId_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Bosdyn.Api.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.actionId_ != null) {
        if (actionId_ == null) {
          ActionId = new global::Bosdyn.Api.CaptureActionId();
        }
        ActionId.MergeFrom(other.ActionId);
      }
      if (other.acquisitionRequests_ != null) {
        if (acquisitionRequests_ == null) {
          AcquisitionRequests = new global::Bosdyn.Api.AcquisitionRequestList();
        }
        AcquisitionRequests.MergeFrom(other.AcquisitionRequests);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            dataId_.AddEntriesFrom(input, _repeated_dataId_codec);
            break;
          }
          case 26: {
            if (metadata_ == null) {
              Metadata = new global::Bosdyn.Api.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 34: {
            if (actionId_ == null) {
              ActionId = new global::Bosdyn.Api.CaptureActionId();
            }
            input.ReadMessage(ActionId);
            break;
          }
          case 42: {
            if (acquisitionRequests_ == null) {
              AcquisitionRequests = new global::Bosdyn.Api.AcquisitionRequestList();
            }
            input.ReadMessage(AcquisitionRequests);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcquirePluginDataResponse : pb::IMessage<AcquirePluginDataResponse> {
    private static readonly pb::MessageParser<AcquirePluginDataResponse> _parser = new pb::MessageParser<AcquirePluginDataResponse>(() => new AcquirePluginDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcquirePluginDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataResponse(AcquirePluginDataResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      requestId_ = other.requestId_;
      timeoutDeadline_ = other.timeoutDeadline_ != null ? other.timeoutDeadline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcquirePluginDataResponse Clone() {
      return new AcquirePluginDataResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.AcquirePluginDataResponse.Types.Status status_ = 0;
    /// <summary>
    /// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
    /// acquisition request can be done using the GetStatus RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquirePluginDataResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private uint requestId_;
    /// <summary>
    /// Identifier which can be used to check the status of or cancel the acquisition action..
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "timeout_deadline" field.</summary>
    public const int TimeoutDeadlineFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timeoutDeadline_;
    /// <summary>
    /// Time (in the robot's clock) by which this capture should definitely be complete.
    /// If it is not complete by this time, something has gone wrong.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimeoutDeadline {
      get { return timeoutDeadline_; }
      set {
        timeoutDeadline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcquirePluginDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcquirePluginDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(TimeoutDeadline, other.TimeoutDeadline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (timeoutDeadline_ != null) hash ^= TimeoutDeadline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (RequestId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestId);
      }
      if (timeoutDeadline_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimeoutDeadline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (timeoutDeadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeoutDeadline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcquirePluginDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      if (other.timeoutDeadline_ != null) {
        if (timeoutDeadline_ == null) {
          TimeoutDeadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimeoutDeadline.MergeFrom(other.TimeoutDeadline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.AcquirePluginDataResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (timeoutDeadline_ == null) {
              TimeoutDeadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimeoutDeadline);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AcquirePluginDataResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The capture action has successfully started acquiring the data.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// One of the capability requests in the AcquisitionRequestList is unknown.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN_CAPTURE_TYPE")] UnknownCaptureType = 2,
      }

    }
    #endregion

  }

  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private uint requestId_;
    /// <summary>
    /// Which acquisition to check the status of.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RequestId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            RequestId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetStatusResponse : pb::IMessage<GetStatusResponse> {
    private static readonly pb::MessageParser<GetStatusResponse> _parser = new pb::MessageParser<GetStatusResponse>(() => new GetStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse(GetStatusResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      dataSaved_ = other.dataSaved_.Clone();
      dataErrors_ = other.dataErrors_.Clone();
      serviceErrors_ = other.serviceErrors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse Clone() {
      return new GetStatusResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.GetStatusResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.GetStatusResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data_saved" field.</summary>
    public const int DataSavedFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataIdentifier> _repeated_dataSaved_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.DataIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier> dataSaved_ = new pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier>();
    /// <summary>
    /// Data that has been successfully saved into the data buffer for the capture action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataIdentifier> DataSaved {
      get { return dataSaved_; }
    }

    /// <summary>Field number for the "data_errors" field.</summary>
    public const int DataErrorsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DataError> _repeated_dataErrors_codec
        = pb::FieldCodec.ForMessage(74, global::Bosdyn.Api.DataError.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DataError> dataErrors_ = new pbc::RepeatedField<global::Bosdyn.Api.DataError>();
    /// <summary>
    /// A list of data captures which have failed in some way during the action.
    /// For example, the data acquisition plugin is unable to communicate to a sensor and responds with
    /// a data error for that specific data capture.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DataError> DataErrors {
      get { return dataErrors_; }
    }

    /// <summary>Field number for the "service_errors" field.</summary>
    public const int ServiceErrorsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.PluginServiceError> _repeated_serviceErrors_codec
        = pb::FieldCodec.ForMessage(82, global::Bosdyn.Api.PluginServiceError.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.PluginServiceError> serviceErrors_ = new pbc::RepeatedField<global::Bosdyn.Api.PluginServiceError>();
    /// <summary>
    /// Services which failed independent of a particular data id.
    /// For example, if a plugin times out or crashes, it could be reported here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.PluginServiceError> ServiceErrors {
      get { return serviceErrors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if(!dataSaved_.Equals(other.dataSaved_)) return false;
      if(!dataErrors_.Equals(other.dataErrors_)) return false;
      if(!serviceErrors_.Equals(other.serviceErrors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= dataSaved_.GetHashCode();
      hash ^= dataErrors_.GetHashCode();
      hash ^= serviceErrors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      dataSaved_.WriteTo(output, _repeated_dataSaved_codec);
      dataErrors_.WriteTo(output, _repeated_dataErrors_codec);
      serviceErrors_.WriteTo(output, _repeated_serviceErrors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += dataSaved_.CalculateSize(_repeated_dataSaved_codec);
      size += dataErrors_.CalculateSize(_repeated_dataErrors_codec);
      size += serviceErrors_.CalculateSize(_repeated_serviceErrors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      dataSaved_.Add(other.dataSaved_);
      dataErrors_.Add(other.dataErrors_);
      serviceErrors_.Add(other.serviceErrors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.GetStatusResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            dataSaved_.AddEntriesFrom(input, _repeated_dataSaved_codec);
            break;
          }
          case 74: {
            dataErrors_.AddEntriesFrom(input, _repeated_dataErrors_codec);
            break;
          }
          case 82: {
            serviceErrors_.AddEntriesFrom(input, _repeated_serviceErrors_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetStatusResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// [Status] Data acquisition is still in progress
        /// </summary>
        [pbr::OriginalName("STATUS_ACQUIRING")] Acquiring = 1,
        /// <summary>
        /// [Status] Data has been acquired, processing and storage is now in progress.
        /// </summary>
        [pbr::OriginalName("STATUS_SAVING")] Saving = 2,
        /// <summary>
        /// [Status] Data acquisition is complete.
        /// </summary>
        [pbr::OriginalName("STATUS_COMPLETE")] Complete = 3,
        /// <summary>
        /// [Status] The data acquisition service is working to cancel the request.
        /// </summary>
        [pbr::OriginalName("STATUS_CANCEL_IN_PROGRESS")] CancelInProgress = 4,
        /// <summary>
        /// [Status] The data acquisition request was cancelled manually.
        /// </summary>
        [pbr::OriginalName("STATUS_ACQUISITION_CANCELLED")] AcquisitionCancelled = 5,
        /// <summary>
        /// [Error - AcquireData] An error occurred while acquiring, processing, or saving data.
        /// </summary>
        [pbr::OriginalName("STATUS_DATA_ERROR")] DataError = 10,
        /// <summary>
        /// [Error - AcquireData] The data collection has passed the deadline for completion.
        /// </summary>
        [pbr::OriginalName("STATUS_TIMEDOUT")] Timedout = 11,
        /// <summary>
        /// [Error - AcquireData] An error occurred such that we don't even know our status.
        /// </summary>
        [pbr::OriginalName("STATUS_INTERNAL_ERROR")] InternalError = 12,
        /// <summary>
        /// [Error -CancelAcquisition] The cancellation request failed to complete.
        /// </summary>
        [pbr::OriginalName("STATUS_CANCEL_ACQUISITION_FAILED")] CancelAcquisitionFailed = 30,
        /// <summary>
        /// [Error - GetStatus] The request_id does not exist.
        /// </summary>
        [pbr::OriginalName("STATUS_REQUEST_ID_DOES_NOT_EXIST")] RequestIdDoesNotExist = 20,
      }

    }
    #endregion

  }

  public sealed partial class GetServiceInfoRequest : pb::IMessage<GetServiceInfoRequest> {
    private static readonly pb::MessageParser<GetServiceInfoRequest> _parser = new pb::MessageParser<GetServiceInfoRequest>(() => new GetServiceInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoRequest(GetServiceInfoRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoRequest Clone() {
      return new GetServiceInfoRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetServiceInfoResponse : pb::IMessage<GetServiceInfoResponse> {
    private static readonly pb::MessageParser<GetServiceInfoResponse> _parser = new pb::MessageParser<GetServiceInfoResponse>(() => new GetServiceInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoResponse(GetServiceInfoResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      capabilities_ = other.capabilities_ != null ? other.capabilities_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceInfoResponse Clone() {
      return new GetServiceInfoResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 2;
    private global::Bosdyn.Api.AcquisitionCapabilityList capabilities_;
    /// <summary>
    /// List of capabilities that the data acquisition (plugin) service can
    /// collect and save data for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AcquisitionCapabilityList Capabilities {
      get { return capabilities_; }
      set {
        capabilities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Capabilities, other.Capabilities)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (capabilities_ != null) hash ^= Capabilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (capabilities_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Capabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (capabilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capabilities);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.capabilities_ != null) {
        if (capabilities_ == null) {
          Capabilities = new global::Bosdyn.Api.AcquisitionCapabilityList();
        }
        Capabilities.MergeFrom(other.Capabilities);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (capabilities_ == null) {
              Capabilities = new global::Bosdyn.Api.AcquisitionCapabilityList();
            }
            input.ReadMessage(Capabilities);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelAcquisitionRequest : pb::IMessage<CancelAcquisitionRequest> {
    private static readonly pb::MessageParser<CancelAcquisitionRequest> _parser = new pb::MessageParser<CancelAcquisitionRequest>(() => new CancelAcquisitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelAcquisitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionRequest(CancelAcquisitionRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionRequest Clone() {
      return new CancelAcquisitionRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private uint requestId_;
    /// <summary>
    /// Which acquisition request to cancel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelAcquisitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelAcquisitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RequestId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelAcquisitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            RequestId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelAcquisitionResponse : pb::IMessage<CancelAcquisitionResponse> {
    private static readonly pb::MessageParser<CancelAcquisitionResponse> _parser = new pb::MessageParser<CancelAcquisitionResponse>(() => new CancelAcquisitionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelAcquisitionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.DataAcquisitionReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionResponse(CancelAcquisitionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelAcquisitionResponse Clone() {
      return new CancelAcquisitionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.CancelAcquisitionResponse.Types.Status status_ = 0;
    /// <summary>
    /// The status of the Cancellation RPC. Further monitoring on the success of the cancellation
    /// request can be done using the GetStatus RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.CancelAcquisitionResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelAcquisitionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelAcquisitionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelAcquisitionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.CancelAcquisitionResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CancelAcquisitionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Successfully cancelled the data acquisition request.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// Unable to stop the data acquisition request.
        /// </summary>
        [pbr::OriginalName("STATUS_FAILED_TO_CANCEL")] FailedToCancel = 2,
        /// <summary>
        /// [Error] The request_id does not exist.
        /// </summary>
        [pbr::OriginalName("STATUS_REQUEST_ID_DOES_NOT_EXIST")] RequestIdDoesNotExist = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
