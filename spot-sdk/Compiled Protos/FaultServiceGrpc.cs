// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/fault_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The service fault service enables modification of the robot state ServiceFaultState.
  /// </summary>
  public static partial class FaultService
  {
    static readonly string __ServiceName = "bosdyn.api.FaultService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.TriggerServiceFaultRequest> __Marshaller_bosdyn_api_TriggerServiceFaultRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TriggerServiceFaultRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.TriggerServiceFaultResponse> __Marshaller_bosdyn_api_TriggerServiceFaultResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TriggerServiceFaultResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ClearServiceFaultRequest> __Marshaller_bosdyn_api_ClearServiceFaultRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ClearServiceFaultRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ClearServiceFaultResponse> __Marshaller_bosdyn_api_ClearServiceFaultResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ClearServiceFaultResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.TriggerServiceFaultRequest, global::Bosdyn.Api.TriggerServiceFaultResponse> __Method_TriggerServiceFault = new grpc::Method<global::Bosdyn.Api.TriggerServiceFaultRequest, global::Bosdyn.Api.TriggerServiceFaultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerServiceFault",
        __Marshaller_bosdyn_api_TriggerServiceFaultRequest,
        __Marshaller_bosdyn_api_TriggerServiceFaultResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ClearServiceFaultRequest, global::Bosdyn.Api.ClearServiceFaultResponse> __Method_ClearServiceFault = new grpc::Method<global::Bosdyn.Api.ClearServiceFaultRequest, global::Bosdyn.Api.ClearServiceFaultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearServiceFault",
        __Marshaller_bosdyn_api_ClearServiceFaultRequest,
        __Marshaller_bosdyn_api_ClearServiceFaultResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.FaultServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaultService</summary>
    [grpc::BindServiceMethod(typeof(FaultService), "BindService")]
    public abstract partial class FaultServiceBase
    {
      /// <summary>
      /// Sends a ServiceFault to be reporting in robot state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.TriggerServiceFaultResponse> TriggerServiceFault(global::Bosdyn.Api.TriggerServiceFaultRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Clears an active ServiceFault from robot state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ClearServiceFaultResponse> ClearServiceFault(global::Bosdyn.Api.ClearServiceFaultRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FaultService</summary>
    public partial class FaultServiceClient : grpc::ClientBase<FaultServiceClient>
    {
      /// <summary>Creates a new client for FaultService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FaultServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FaultService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FaultServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FaultServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FaultServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a ServiceFault to be reporting in robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TriggerServiceFaultResponse TriggerServiceFault(global::Bosdyn.Api.TriggerServiceFaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerServiceFault(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a ServiceFault to be reporting in robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TriggerServiceFaultResponse TriggerServiceFault(global::Bosdyn.Api.TriggerServiceFaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerServiceFault, null, options, request);
      }
      /// <summary>
      /// Sends a ServiceFault to be reporting in robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TriggerServiceFaultResponse> TriggerServiceFaultAsync(global::Bosdyn.Api.TriggerServiceFaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerServiceFaultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a ServiceFault to be reporting in robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TriggerServiceFaultResponse> TriggerServiceFaultAsync(global::Bosdyn.Api.TriggerServiceFaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerServiceFault, null, options, request);
      }
      /// <summary>
      /// Clears an active ServiceFault from robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ClearServiceFaultResponse ClearServiceFault(global::Bosdyn.Api.ClearServiceFaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearServiceFault(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Clears an active ServiceFault from robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ClearServiceFaultResponse ClearServiceFault(global::Bosdyn.Api.ClearServiceFaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearServiceFault, null, options, request);
      }
      /// <summary>
      /// Clears an active ServiceFault from robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ClearServiceFaultResponse> ClearServiceFaultAsync(global::Bosdyn.Api.ClearServiceFaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearServiceFaultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Clears an active ServiceFault from robot state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ClearServiceFaultResponse> ClearServiceFaultAsync(global::Bosdyn.Api.ClearServiceFaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearServiceFault, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FaultServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FaultServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FaultServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TriggerServiceFault, serviceImpl.TriggerServiceFault)
          .AddMethod(__Method_ClearServiceFault, serviceImpl.ClearServiceFault).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaultServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_TriggerServiceFault, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.TriggerServiceFaultRequest, global::Bosdyn.Api.TriggerServiceFaultResponse>(serviceImpl.TriggerServiceFault));
      serviceBinder.AddMethod(__Method_ClearServiceFault, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ClearServiceFaultRequest, global::Bosdyn.Api.ClearServiceFaultResponse>(serviceImpl.ClearServiceFault));
    }

  }
}
#endregion
