// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/gripper_command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/gripper_command.proto</summary>
  public static partial class GripperCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/gripper_command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GripperCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQcm90b3MvZ3JpcHBlcl9jb21tYW5kLnByb3RvEgpib3NkeW4uYXBpGhpQ",
            "cm90b3MvYmFzaWNfY29tbWFuZC5wcm90bxoXUHJvdG9zL3RyYWplY3Rvcnku",
            "cHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byKPAgoOR3Jp",
            "cHBlckNvbW1hbmQaXAoHUmVxdWVzdBJGChRjbGF3X2dyaXBwZXJfY29tbWFu",
            "ZBgBIAEoCzImLmJvc2R5bi5hcGkuQ2xhd0dyaXBwZXJDb21tYW5kLlJlcXVl",
            "c3RIAEIJCgdjb21tYW5kGp4BCghGZWVkYmFjaxJIChVjbGF3X2dyaXBwZXJf",
            "ZmVlZGJhY2sYASABKAsyJy5ib3NkeW4uYXBpLkNsYXdHcmlwcGVyQ29tbWFu",
            "ZC5GZWVkYmFja0gAEj0KBnN0YXR1cxgCIAEoDjItLmJvc2R5bi5hcGkuUm9i",
            "b3RDb21tYW5kRmVlZGJhY2tTdGF0dXMuU3RhdHVzQgkKB2NvbW1hbmQi7AMK",
            "EkNsYXdHcmlwcGVyQ29tbWFuZBqjAgoHUmVxdWVzdBIwCgp0cmFqZWN0b3J5",
            "GAUgASgLMhwuYm9zZHluLmFwaS5TY2FsYXJUcmFqZWN0b3J5EkEKG21heGlt",
            "dW1fb3Blbl9jbG9zZV92ZWxvY2l0eRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRJFCh9tYXhpbXVtX29wZW5fY2xvc2VfYWNjZWxlcmF0",
            "aW9uGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjQKDm1h",
            "eGltdW1fdG9ycXVlGAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZh",
            "bHVlEiAKGGRpc2FibGVfZm9yY2Vfb25fY29udGFjdBgGIAEoCEoECAEQAhqv",
            "AQoIRmVlZGJhY2sSPgoGc3RhdHVzGAEgASgOMi4uYm9zZHluLmFwaS5DbGF3",
            "R3JpcHBlckNvbW1hbmQuRmVlZGJhY2suU3RhdHVzImMKBlN0YXR1cxISCg5T",
            "VEFUVVNfVU5LTk9XThAAEhYKElNUQVRVU19JTl9QUk9HUkVTUxABEhIKDlNU",
            "QVRVU19BVF9HT0FMEAISGQoVU1RBVFVTX0FQUExZSU5HX0ZPUkNFEANCFUIT",
            "R3JpcHBlckNvbW1hbmRQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.BasicCommandReflection.Descriptor, global::Bosdyn.Api.TrajectoryReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GripperCommand), global::Bosdyn.Api.GripperCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GripperCommand.Types.Request), global::Bosdyn.Api.GripperCommand.Types.Request.Parser, new[]{ "ClawGripperCommand" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.GripperCommand.Types.Feedback), global::Bosdyn.Api.GripperCommand.Types.Feedback.Parser, new[]{ "ClawGripperFeedback", "Status" }, new[]{ "Command" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClawGripperCommand), global::Bosdyn.Api.ClawGripperCommand.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClawGripperCommand.Types.Request), global::Bosdyn.Api.ClawGripperCommand.Types.Request.Parser, new[]{ "Trajectory", "MaximumOpenCloseVelocity", "MaximumOpenCloseAcceleration", "MaximumTorque", "DisableForceOnContact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClawGripperCommand.Types.Feedback), global::Bosdyn.Api.ClawGripperCommand.Types.Feedback.Parser, new[]{ "Status" }, null, new[]{ typeof(global::Bosdyn.Api.ClawGripperCommand.Types.Feedback.Types.Status) }, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The synchronized command message for commanding the gripper to move.
  /// A synchronized commands is one of the possible robot command messages for controlling the robot.
  /// </summary>
  public sealed partial class GripperCommand : pb::IMessage<GripperCommand> {
    private static readonly pb::MessageParser<GripperCommand> _parser = new pb::MessageParser<GripperCommand>(() => new GripperCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GripperCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GripperCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripperCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripperCommand(GripperCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripperCommand Clone() {
      return new GripperCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GripperCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GripperCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GripperCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GripperCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The gripper request must be one of the basic command primitives.
      /// </summary>
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.GripperCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          switch (other.CommandCase) {
            case CommandOneofCase.ClawGripperCommand:
              ClawGripperCommand = other.ClawGripperCommand.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "claw_gripper_command" field.</summary>
        public const int ClawGripperCommandFieldNumber = 1;
        /// <summary>
        /// Control opening and closing the gripper.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ClawGripperCommand.Types.Request ClawGripperCommand {
          get { return commandCase_ == CommandOneofCase.ClawGripperCommand ? (global::Bosdyn.Api.ClawGripperCommand.Types.Request) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ClawGripperCommand;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          ClawGripperCommand = 1,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ClawGripperCommand, other.ClawGripperCommand)) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.ClawGripperCommand) hash ^= ClawGripperCommand.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.ClawGripperCommand) {
            output.WriteRawTag(10);
            output.WriteMessage(ClawGripperCommand);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.ClawGripperCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClawGripperCommand);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          switch (other.CommandCase) {
            case CommandOneofCase.ClawGripperCommand:
              if (ClawGripperCommand == null) {
                ClawGripperCommand = new global::Bosdyn.Api.ClawGripperCommand.Types.Request();
              }
              ClawGripperCommand.MergeFrom(other.ClawGripperCommand);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Bosdyn.Api.ClawGripperCommand.Types.Request subBuilder = new global::Bosdyn.Api.ClawGripperCommand.Types.Request();
                if (commandCase_ == CommandOneofCase.ClawGripperCommand) {
                  subBuilder.MergeFrom(ClawGripperCommand);
                }
                input.ReadMessage(subBuilder);
                ClawGripperCommand = subBuilder;
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The feedback for the gripper command that will provide information on the progress
      /// of the command.
      /// </summary>
      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.GripperCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          switch (other.CommandCase) {
            case CommandOneofCase.ClawGripperFeedback:
              ClawGripperFeedback = other.ClawGripperFeedback.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "claw_gripper_feedback" field.</summary>
        public const int ClawGripperFeedbackFieldNumber = 1;
        /// <summary>
        /// Feedback for the claw gripper command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ClawGripperCommand.Types.Feedback ClawGripperFeedback {
          get { return commandCase_ == CommandOneofCase.ClawGripperFeedback ? (global::Bosdyn.Api.ClawGripperCommand.Types.Feedback) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.ClawGripperFeedback;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status status_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          ClawGripperFeedback = 1,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ClawGripperFeedback, other.ClawGripperFeedback)) return false;
          if (Status != other.Status) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.ClawGripperFeedback) hash ^= ClawGripperFeedback.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.ClawGripperFeedback) {
            output.WriteRawTag(10);
            output.WriteMessage(ClawGripperFeedback);
          }
          if (Status != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.ClawGripperFeedback) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClawGripperFeedback);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          switch (other.CommandCase) {
            case CommandOneofCase.ClawGripperFeedback:
              if (ClawGripperFeedback == null) {
                ClawGripperFeedback = new global::Bosdyn.Api.ClawGripperCommand.Types.Feedback();
              }
              ClawGripperFeedback.MergeFrom(other.ClawGripperFeedback);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Bosdyn.Api.ClawGripperCommand.Types.Feedback subBuilder = new global::Bosdyn.Api.ClawGripperCommand.Types.Feedback();
                if (commandCase_ == CommandOneofCase.ClawGripperFeedback) {
                  subBuilder.MergeFrom(ClawGripperFeedback);
                }
                input.ReadMessage(subBuilder);
                ClawGripperFeedback = subBuilder;
                break;
              }
              case 16: {
                Status = (global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Command to open and close the gripper.
  /// </summary>
  public sealed partial class ClawGripperCommand : pb::IMessage<ClawGripperCommand> {
    private static readonly pb::MessageParser<ClawGripperCommand> _parser = new pb::MessageParser<ClawGripperCommand>(() => new ClawGripperCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClawGripperCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.GripperCommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClawGripperCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClawGripperCommand(ClawGripperCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClawGripperCommand Clone() {
      return new ClawGripperCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClawGripperCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClawGripperCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClawGripperCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClawGripperCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ClawGripperCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          trajectory_ = other.trajectory_ != null ? other.trajectory_.Clone() : null;
          MaximumOpenCloseVelocity = other.MaximumOpenCloseVelocity;
          MaximumOpenCloseAcceleration = other.MaximumOpenCloseAcceleration;
          MaximumTorque = other.MaximumTorque;
          disableForceOnContact_ = other.disableForceOnContact_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "trajectory" field.</summary>
        public const int TrajectoryFieldNumber = 5;
        private global::Bosdyn.Api.ScalarTrajectory trajectory_;
        /// <summary>
        /// Scalar trajectory for opening/closing the gripper. If 1 point is specified
        /// with no end time, we will execute a minimum time trajectory that observes
        /// velocity and acceleration constraints. Otherwise, we will use piecewise
        /// cubic interpolation, meaning there will be a cubic polynomial between each
        /// trajectory point, with continuous position and velocity at each trajectory
        /// point. If the requested trajectory violates the velocity or acceleration
        /// constraints below, a trajectory that is as close as possible but still
        /// obeys the constraints will be executed instead.
        /// position is radians: 0 is fully closed -1.5708 (-90 degrees) is fully open
        /// velocity is radians / sec.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ScalarTrajectory Trajectory {
          get { return trajectory_; }
          set {
            trajectory_ = value;
          }
        }

        /// <summary>Field number for the "maximum_open_close_velocity" field.</summary>
        public const int MaximumOpenCloseVelocityFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_maximumOpenCloseVelocity_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? maximumOpenCloseVelocity_;
        /// <summary>
        /// If unspecified, a default value of 10 (rad/s) will be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumOpenCloseVelocity {
          get { return maximumOpenCloseVelocity_; }
          set {
            maximumOpenCloseVelocity_ = value;
          }
        }


        /// <summary>Field number for the "maximum_open_close_acceleration" field.</summary>
        public const int MaximumOpenCloseAccelerationFieldNumber = 3;
        private static readonly pb::FieldCodec<double?> _single_maximumOpenCloseAcceleration_codec = pb::FieldCodec.ForStructWrapper<double>(26);
        private double? maximumOpenCloseAcceleration_;
        /// <summary>
        /// If unspecified, a default value of 40 (rad/s/s) will be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumOpenCloseAcceleration {
          get { return maximumOpenCloseAcceleration_; }
          set {
            maximumOpenCloseAcceleration_ = value;
          }
        }


        /// <summary>Field number for the "maximum_torque" field.</summary>
        public const int MaximumTorqueFieldNumber = 4;
        private static readonly pb::FieldCodec<double?> _single_maximumTorque_codec = pb::FieldCodec.ForStructWrapper<double>(34);
        private double? maximumTorque_;
        /// <summary>
        /// Maximum torque applied. If unspecified, a default value of 5.5 (Nm) will be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaximumTorque {
          get { return maximumTorque_; }
          set {
            maximumTorque_ = value;
          }
        }


        /// <summary>Field number for the "disable_force_on_contact" field.</summary>
        public const int DisableForceOnContactFieldNumber = 6;
        private bool disableForceOnContact_;
        /// <summary>
        /// By default the gripper transitions to force control when it detects an object closing.
        /// Setting this field to true disables the transition to force control on contact detection
        /// and always keeps the gripper in position control.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DisableForceOnContact {
          get { return disableForceOnContact_; }
          set {
            disableForceOnContact_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Trajectory, other.Trajectory)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumOpenCloseVelocity, other.MaximumOpenCloseVelocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumOpenCloseAcceleration, other.MaximumOpenCloseAcceleration)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaximumTorque, other.MaximumTorque)) return false;
          if (DisableForceOnContact != other.DisableForceOnContact) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (trajectory_ != null) hash ^= Trajectory.GetHashCode();
          if (maximumOpenCloseVelocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumOpenCloseVelocity);
          if (maximumOpenCloseAcceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumOpenCloseAcceleration);
          if (maximumTorque_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaximumTorque);
          if (DisableForceOnContact != false) hash ^= DisableForceOnContact.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (maximumOpenCloseVelocity_ != null) {
            _single_maximumOpenCloseVelocity_codec.WriteTagAndValue(output, MaximumOpenCloseVelocity);
          }
          if (maximumOpenCloseAcceleration_ != null) {
            _single_maximumOpenCloseAcceleration_codec.WriteTagAndValue(output, MaximumOpenCloseAcceleration);
          }
          if (maximumTorque_ != null) {
            _single_maximumTorque_codec.WriteTagAndValue(output, MaximumTorque);
          }
          if (trajectory_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Trajectory);
          }
          if (DisableForceOnContact != false) {
            output.WriteRawTag(48);
            output.WriteBool(DisableForceOnContact);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (trajectory_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectory);
          }
          if (maximumOpenCloseVelocity_ != null) {
            size += _single_maximumOpenCloseVelocity_codec.CalculateSizeWithTag(MaximumOpenCloseVelocity);
          }
          if (maximumOpenCloseAcceleration_ != null) {
            size += _single_maximumOpenCloseAcceleration_codec.CalculateSizeWithTag(MaximumOpenCloseAcceleration);
          }
          if (maximumTorque_ != null) {
            size += _single_maximumTorque_codec.CalculateSizeWithTag(MaximumTorque);
          }
          if (DisableForceOnContact != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.trajectory_ != null) {
            if (trajectory_ == null) {
              Trajectory = new global::Bosdyn.Api.ScalarTrajectory();
            }
            Trajectory.MergeFrom(other.Trajectory);
          }
          if (other.maximumOpenCloseVelocity_ != null) {
            if (maximumOpenCloseVelocity_ == null || other.MaximumOpenCloseVelocity != 0D) {
              MaximumOpenCloseVelocity = other.MaximumOpenCloseVelocity;
            }
          }
          if (other.maximumOpenCloseAcceleration_ != null) {
            if (maximumOpenCloseAcceleration_ == null || other.MaximumOpenCloseAcceleration != 0D) {
              MaximumOpenCloseAcceleration = other.MaximumOpenCloseAcceleration;
            }
          }
          if (other.maximumTorque_ != null) {
            if (maximumTorque_ == null || other.MaximumTorque != 0D) {
              MaximumTorque = other.MaximumTorque;
            }
          }
          if (other.DisableForceOnContact != false) {
            DisableForceOnContact = other.DisableForceOnContact;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18: {
                double? value = _single_maximumOpenCloseVelocity_codec.Read(input);
                if (maximumOpenCloseVelocity_ == null || value != 0D) {
                  MaximumOpenCloseVelocity = value;
                }
                break;
              }
              case 26: {
                double? value = _single_maximumOpenCloseAcceleration_codec.Read(input);
                if (maximumOpenCloseAcceleration_ == null || value != 0D) {
                  MaximumOpenCloseAcceleration = value;
                }
                break;
              }
              case 34: {
                double? value = _single_maximumTorque_codec.Read(input);
                if (maximumTorque_ == null || value != 0D) {
                  MaximumTorque = value;
                }
                break;
              }
              case 42: {
                if (trajectory_ == null) {
                  Trajectory = new global::Bosdyn.Api.ScalarTrajectory();
                }
                input.ReadMessage(Trajectory);
                break;
              }
              case 48: {
                DisableForceOnContact = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.ClawGripperCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.ClawGripperCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.ClawGripperCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.ClawGripperCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// The gripper is opening or closing.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 1,
            /// <summary>
            /// The gripper is at the final point of the trajectory.
            /// </summary>
            [pbr::OriginalName("STATUS_AT_GOAL")] AtGoal = 2,
            /// <summary>
            /// During a close, detected contact and transitioned to force control.
            /// </summary>
            [pbr::OriginalName("STATUS_APPLYING_FORCE")] ApplyingForce = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
