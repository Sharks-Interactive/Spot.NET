// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/time_sync_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The time-sync service estimates the difference between server and client clocks.
  /// Time synchronization is a tool which allows applications to work in a unified timebase with
  /// precision. It is useful in cases where a precise time must be set, independently of network
  /// communication lag. In distributed systems and robotics, hardware, system-level, and per-process
  /// approaches can be used to obtain synchronization.
  /// This service implements a stand alone time synchronization service. It enables clients to
  /// establish a per-process offset between two processes which may be on separate systems.
  /// </summary>
  public static partial class TimeSyncService
  {
    static readonly string __ServiceName = "bosdyn.api.TimeSyncService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.TimeSyncUpdateRequest> __Marshaller_bosdyn_api_TimeSyncUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TimeSyncUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.TimeSyncUpdateResponse> __Marshaller_bosdyn_api_TimeSyncUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TimeSyncUpdateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.TimeSyncUpdateRequest, global::Bosdyn.Api.TimeSyncUpdateResponse> __Method_TimeSyncUpdate = new grpc::Method<global::Bosdyn.Api.TimeSyncUpdateRequest, global::Bosdyn.Api.TimeSyncUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TimeSyncUpdate",
        __Marshaller_bosdyn_api_TimeSyncUpdateRequest,
        __Marshaller_bosdyn_api_TimeSyncUpdateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.TimeSyncServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TimeSyncService</summary>
    [grpc::BindServiceMethod(typeof(TimeSyncService), "BindService")]
    public abstract partial class TimeSyncServiceBase
    {
      /// <summary>
      /// See the exchange documentation in time_sync.proto. This call makes one client/server
      /// round trip toward clock synchronization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.TimeSyncUpdateResponse> TimeSyncUpdate(global::Bosdyn.Api.TimeSyncUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TimeSyncService</summary>
    public partial class TimeSyncServiceClient : grpc::ClientBase<TimeSyncServiceClient>
    {
      /// <summary>Creates a new client for TimeSyncService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TimeSyncServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TimeSyncService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TimeSyncServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TimeSyncServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TimeSyncServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// See the exchange documentation in time_sync.proto. This call makes one client/server
      /// round trip toward clock synchronization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TimeSyncUpdateResponse TimeSyncUpdate(global::Bosdyn.Api.TimeSyncUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeSyncUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See the exchange documentation in time_sync.proto. This call makes one client/server
      /// round trip toward clock synchronization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TimeSyncUpdateResponse TimeSyncUpdate(global::Bosdyn.Api.TimeSyncUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TimeSyncUpdate, null, options, request);
      }
      /// <summary>
      /// See the exchange documentation in time_sync.proto. This call makes one client/server
      /// round trip toward clock synchronization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TimeSyncUpdateResponse> TimeSyncUpdateAsync(global::Bosdyn.Api.TimeSyncUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeSyncUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See the exchange documentation in time_sync.proto. This call makes one client/server
      /// round trip toward clock synchronization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TimeSyncUpdateResponse> TimeSyncUpdateAsync(global::Bosdyn.Api.TimeSyncUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TimeSyncUpdate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TimeSyncServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TimeSyncServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TimeSyncServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TimeSyncUpdate, serviceImpl.TimeSyncUpdate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TimeSyncServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_TimeSyncUpdate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.TimeSyncUpdateRequest, global::Bosdyn.Api.TimeSyncUpdateResponse>(serviceImpl.TimeSyncUpdate));
    }

  }
}
#endregion
