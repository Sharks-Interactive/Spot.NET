// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/door.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api.Spot {

  /// <summary>Holder for reflection information generated from Protos/door.proto</summary>
  public static partial class DoorReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/door.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DoorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b3MvZG9vci5wcm90bxIPYm9zZHluLmFwaS5zcG90GhpQcm90b3Mv",
            "YmFzaWNfY29tbWFuZC5wcm90bxoVUHJvdG9zL2dlb21ldHJ5LnByb3RvGhNQ",
            "cm90b3MvaGVhZGVyLnByb3RvGhJQcm90b3MvbGVhc2UucHJvdG8ioQEKFk9w",
            "ZW5Eb29yQ29tbWFuZFJlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHlu",
            "LmFwaS5SZXF1ZXN0SGVhZGVyEiAKBWxlYXNlGAIgASgLMhEuYm9zZHluLmFw",
            "aS5MZWFzZRI6Cgxkb29yX2NvbW1hbmQYBCABKAsyJC5ib3NkeW4uYXBpLnNw",
            "b3QuRG9vckNvbW1hbmQuUmVxdWVzdCKzAgoXT3BlbkRvb3JDb21tYW5kUmVz",
            "cG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhl",
            "YWRlchI0ChBsZWFzZV91c2VfcmVzdWx0GAIgASgLMhouYm9zZHluLmFwaS5M",
            "ZWFzZVVzZVJlc3VsdBI/CgZzdGF0dXMYAyABKA4yLy5ib3NkeW4uYXBpLnNw",
            "b3QuT3BlbkRvb3JDb21tYW5kUmVzcG9uc2UuU3RhdHVzEg8KB21lc3NhZ2UY",
            "BCABKAkSFwoPZG9vcl9jb21tYW5kX2lkGAUgASgNIksKBlN0YXR1cxISCg5T",
            "VEFUVVNfVU5LTk9XThAAEg0KCVNUQVRVU19PSxABEh4KGlNUQVRVU19ST0JP",
            "VF9DT01NQU5EX0VSUk9SEAIiXQoXT3BlbkRvb3JGZWVkYmFja1JlcXVlc3QS",
            "KQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEhcK",
            "D2Rvb3JfY29tbWFuZF9pZBgCIAEoDSK+AQoYT3BlbkRvb3JGZWVkYmFja1Jl",
            "c3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VI",
            "ZWFkZXISPQoGc3RhdHVzGGQgASgOMi0uYm9zZHluLmFwaS5Sb2JvdENvbW1h",
            "bmRGZWVkYmFja1N0YXR1cy5TdGF0dXMSNwoIZmVlZGJhY2sYAiABKAsyJS5i",
            "b3NkeW4uYXBpLnNwb3QuRG9vckNvbW1hbmQuRmVlZGJhY2sixQoKC0Rvb3JD",
            "b21tYW5kGpACChBBdXRvR3Jhc3BDb21tYW5kEhIKCmZyYW1lX25hbWUYASAB",
            "KAkSMwoZc2VhcmNoX3JheV9zdGFydF9pbl9mcmFtZRgCIAEoCzIQLmJvc2R5",
            "bi5hcGkuVmVjMxIxChdzZWFyY2hfcmF5X2VuZF9pbl9mcmFtZRgDIAEoCzIQ",
            "LmJvc2R5bi5hcGkuVmVjMxI6CgpoaW5nZV9zaWRlGAQgASgOMiYuYm9zZHlu",
            "LmFwaS5zcG90LkRvb3JDb21tYW5kLkhpbmdlU2lkZRJECg9zd2luZ19kaXJl",
            "Y3Rpb24YBSABKA4yKy5ib3NkeW4uYXBpLnNwb3QuRG9vckNvbW1hbmQuU3dp",
            "bmdEaXJlY3Rpb24a0gEKEFdhcm1zdGFydENvbW1hbmQSOgoKaGluZ2Vfc2lk",
            "ZRgBIAEoDjImLmJvc2R5bi5hcGkuc3BvdC5Eb29yQ29tbWFuZC5IaW5nZVNp",
            "ZGUSRAoPc3dpbmdfZGlyZWN0aW9uGAIgASgOMisuYm9zZHluLmFwaS5zcG90",
            "LkRvb3JDb21tYW5kLlN3aW5nRGlyZWN0aW9uEjwKC2hhbmRsZV90eXBlGAMg",
            "ASgOMicuYm9zZHluLmFwaS5zcG90LkRvb3JDb21tYW5kLkhhbmRsZVR5cGUa",
            "kAEKD0F1dG9QdXNoQ29tbWFuZBISCgpmcmFtZV9uYW1lGAEgASgJEi0KE3B1",
            "c2hfcG9pbnRfaW5fZnJhbWUYAiABKAsyEC5ib3NkeW4uYXBpLlZlYzMSOgoK",
            "aGluZ2Vfc2lkZRgDIAEoDjImLmJvc2R5bi5hcGkuc3BvdC5Eb29yQ29tbWFu",
            "ZC5IaW5nZVNpZGUa+AEKB1JlcXVlc3QSSwoSYXV0b19ncmFzcF9jb21tYW5k",
            "GAogASgLMi0uYm9zZHluLmFwaS5zcG90LkRvb3JDb21tYW5kLkF1dG9HcmFz",
            "cENvbW1hbmRIABJKChF3YXJtc3RhcnRfY29tbWFuZBgLIAEoCzItLmJvc2R5",
            "bi5hcGkuc3BvdC5Eb29yQ29tbWFuZC5XYXJtc3RhcnRDb21tYW5kSAASSQoR",
            "YXV0b19wdXNoX2NvbW1hbmQYDCABKAsyLC5ib3NkeW4uYXBpLnNwb3QuRG9v",
            "ckNvbW1hbmQuQXV0b1B1c2hDb21tYW5kSABCCQoHY29tbWFuZBqUAQoIRmVl",
            "ZGJhY2sSPAoGc3RhdHVzGAEgASgOMiwuYm9zZHluLmFwaS5zcG90LkRvb3JD",
            "b21tYW5kLkZlZWRiYWNrLlN0YXR1cyJKCgZTdGF0dXMSEgoOU1RBVFVTX1VO",
            "S05PV04QABIUChBTVEFUVVNfQ09NUExFVEVEEAESFgoSU1RBVFVTX0lOX1BS",
            "T0dSRVNTEAIiTgoJSGluZ2VTaWRlEhYKEkhJTkdFX1NJREVfVU5LTk9XThAA",
            "EhMKD0hJTkdFX1NJREVfTEVGVBABEhQKEEhJTkdFX1NJREVfUklHSFQQAiJo",
            "Cg5Td2luZ0RpcmVjdGlvbhIbChdTV0lOR19ESVJFQ1RJT05fVU5LTk9XThAA",
            "EhsKF1NXSU5HX0RJUkVDVElPTl9JTlNXSU5HEAESHAoYU1dJTkdfRElSRUNU",
            "SU9OX09VVFNXSU5HEAIibwoKSGFuZGxlVHlwZRIXChNIQU5ETEVfVFlQRV9V",
            "TktOT1dOEAASFQoRSEFORExFX1RZUEVfTEVWRVIQARIUChBIQU5ETEVfVFlQ",
            "RV9LTk9CEAISGwoXSEFORExFX1RZUEVfRklYRURfR1JBU1AQA0ISQhBEb29y",
            "Q29tbWFuZFByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.BasicCommandReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.LeaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.OpenDoorCommandRequest), global::Bosdyn.Api.Spot.OpenDoorCommandRequest.Parser, new[]{ "Header", "Lease", "DoorCommand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.OpenDoorCommandResponse), global::Bosdyn.Api.Spot.OpenDoorCommandResponse.Parser, new[]{ "Header", "LeaseUseResult", "Status", "Message", "DoorCommandId" }, null, new[]{ typeof(global::Bosdyn.Api.Spot.OpenDoorCommandResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.OpenDoorFeedbackRequest), global::Bosdyn.Api.Spot.OpenDoorFeedbackRequest.Parser, new[]{ "Header", "DoorCommandId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.OpenDoorFeedbackResponse), global::Bosdyn.Api.Spot.OpenDoorFeedbackResponse.Parser, new[]{ "Header", "Status", "Feedback" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand), global::Bosdyn.Api.Spot.DoorCommand.Parser, null, null, new[]{ typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide), typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection), typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.HandleType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand), global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand.Parser, new[]{ "FrameName", "SearchRayStartInFrame", "SearchRayEndInFrame", "HingeSide", "SwingDirection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand), global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand.Parser, new[]{ "HingeSide", "SwingDirection", "HandleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand), global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand.Parser, new[]{ "FrameName", "PushPointInFrame", "HingeSide" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.Request), global::Bosdyn.Api.Spot.DoorCommand.Types.Request.Parser, new[]{ "AutoGraspCommand", "WarmstartCommand", "AutoPushCommand" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback), global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback.Parser, new[]{ "Status" }, null, new[]{ typeof(global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback.Types.Status) }, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A door command for the robot to execute plus a lease.
  /// </summary>
  public sealed partial class OpenDoorCommandRequest : pb::IMessage<OpenDoorCommandRequest> {
    private static readonly pb::MessageParser<OpenDoorCommandRequest> _parser = new pb::MessageParser<OpenDoorCommandRequest>(() => new OpenDoorCommandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenDoorCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.Spot.DoorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandRequest(OpenDoorCommandRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      doorCommand_ = other.doorCommand_ != null ? other.doorCommand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandRequest Clone() {
      return new OpenDoorCommandRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Bosdyn.Api.Lease lease_;
    /// <summary>
    /// The Lease to show ownership of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "door_command" field.</summary>
    public const int DoorCommandFieldNumber = 4;
    private global::Bosdyn.Api.Spot.DoorCommand.Types.Request doorCommand_;
    /// <summary>
    /// The command to execute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Spot.DoorCommand.Types.Request DoorCommand {
      get { return doorCommand_; }
      set {
        doorCommand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenDoorCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenDoorCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(DoorCommand, other.DoorCommand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (doorCommand_ != null) hash ^= DoorCommand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (doorCommand_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DoorCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (doorCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoorCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenDoorCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Bosdyn.Api.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.doorCommand_ != null) {
        if (doorCommand_ == null) {
          DoorCommand = new global::Bosdyn.Api.Spot.DoorCommand.Types.Request();
        }
        DoorCommand.MergeFrom(other.DoorCommand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Bosdyn.Api.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 34: {
            if (doorCommand_ == null) {
              DoorCommand = new global::Bosdyn.Api.Spot.DoorCommand.Types.Request();
            }
            input.ReadMessage(DoorCommand);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to the door command request.
  /// </summary>
  public sealed partial class OpenDoorCommandResponse : pb::IMessage<OpenDoorCommandResponse> {
    private static readonly pb::MessageParser<OpenDoorCommandResponse> _parser = new pb::MessageParser<OpenDoorCommandResponse>(() => new OpenDoorCommandResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenDoorCommandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.Spot.DoorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandResponse(OpenDoorCommandResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leaseUseResult_ = other.leaseUseResult_ != null ? other.leaseUseResult_.Clone() : null;
      status_ = other.status_;
      message_ = other.message_;
      doorCommandId_ = other.doorCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorCommandResponse Clone() {
      return new OpenDoorCommandResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "lease_use_result" field.</summary>
    public const int LeaseUseResultFieldNumber = 2;
    private global::Bosdyn.Api.LeaseUseResult leaseUseResult_;
    /// <summary>
    /// Details about how the lease was used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.LeaseUseResult LeaseUseResult {
      get { return leaseUseResult_; }
      set {
        leaseUseResult_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Bosdyn.Api.Spot.OpenDoorCommandResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for a request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Spot.OpenDoorCommandResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    /// Human-readable error description.  Not for programmatic analysis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "door_command_id" field.</summary>
    public const int DoorCommandIdFieldNumber = 5;
    private uint doorCommandId_;
    /// <summary>
    /// Unique identifier for the command, If empty, command was not accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DoorCommandId {
      get { return doorCommandId_; }
      set {
        doorCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenDoorCommandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenDoorCommandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LeaseUseResult, other.LeaseUseResult)) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (DoorCommandId != other.DoorCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (leaseUseResult_ != null) hash ^= LeaseUseResult.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (DoorCommandId != 0) hash ^= DoorCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (leaseUseResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaseUseResult);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (DoorCommandId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DoorCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (leaseUseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaseUseResult);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (DoorCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DoorCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenDoorCommandResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.leaseUseResult_ != null) {
        if (leaseUseResult_ == null) {
          LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
        }
        LeaseUseResult.MergeFrom(other.LeaseUseResult);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.DoorCommandId != 0) {
        DoorCommandId = other.DoorCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (leaseUseResult_ == null) {
              LeaseUseResult = new global::Bosdyn.Api.LeaseUseResult();
            }
            input.ReadMessage(LeaseUseResult);
            break;
          }
          case 24: {
            Status = (global::Bosdyn.Api.Spot.OpenDoorCommandResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 40: {
            DoorCommandId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OpenDoorCommandResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// An unknown / unexpected error occurred.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Request was accepted.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// Error sending command to RobotCommandService.
        /// </summary>
        [pbr::OriginalName("STATUS_ROBOT_COMMAND_ERROR")] RobotCommandError = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A request for feedback of a specific door command.
  /// </summary>
  public sealed partial class OpenDoorFeedbackRequest : pb::IMessage<OpenDoorFeedbackRequest> {
    private static readonly pb::MessageParser<OpenDoorFeedbackRequest> _parser = new pb::MessageParser<OpenDoorFeedbackRequest>(() => new OpenDoorFeedbackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenDoorFeedbackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.Spot.DoorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackRequest(OpenDoorFeedbackRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      doorCommandId_ = other.doorCommandId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackRequest Clone() {
      return new OpenDoorFeedbackRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "door_command_id" field.</summary>
    public const int DoorCommandIdFieldNumber = 2;
    private uint doorCommandId_;
    /// <summary>
    /// Unique identifier for the command, provided by OpenDoorResponse.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DoorCommandId {
      get { return doorCommandId_; }
      set {
        doorCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenDoorFeedbackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenDoorFeedbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (DoorCommandId != other.DoorCommandId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (DoorCommandId != 0) hash ^= DoorCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (DoorCommandId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DoorCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (DoorCommandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DoorCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenDoorFeedbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.DoorCommandId != 0) {
        DoorCommandId = other.DoorCommandId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            DoorCommandId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Feedback for a specific door command. This RPC reports the robot's progress opening a door.
  /// </summary>
  public sealed partial class OpenDoorFeedbackResponse : pb::IMessage<OpenDoorFeedbackResponse> {
    private static readonly pb::MessageParser<OpenDoorFeedbackResponse> _parser = new pb::MessageParser<OpenDoorFeedbackResponse>(() => new OpenDoorFeedbackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenDoorFeedbackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.Spot.DoorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackResponse(OpenDoorFeedbackResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      feedback_ = other.feedback_ != null ? other.feedback_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenDoorFeedbackResponse Clone() {
      return new OpenDoorFeedbackResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 100;
    private global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status status_ = 0;
    /// <summary>
    /// Generic robot command feedback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "feedback" field.</summary>
    public const int FeedbackFieldNumber = 2;
    private global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback feedback_;
    /// <summary>
    /// Specific door full body command feedback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback Feedback {
      get { return feedback_; }
      set {
        feedback_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenDoorFeedbackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenDoorFeedbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Feedback, other.Feedback)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (feedback_ != null) hash ^= Feedback.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (feedback_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Feedback);
      }
      if (Status != 0) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (feedback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feedback);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenDoorFeedbackResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.feedback_ != null) {
        if (feedback_ == null) {
          Feedback = new global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback();
        }
        Feedback.MergeFrom(other.Feedback);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (feedback_ == null) {
              Feedback = new global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback();
            }
            input.ReadMessage(Feedback);
            break;
          }
          case 800: {
            Status = (global::Bosdyn.Api.RobotCommandFeedbackStatus.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Door Command specific request and Feedback.
  /// </summary>
  public sealed partial class DoorCommand : pb::IMessage<DoorCommand> {
    private static readonly pb::MessageParser<DoorCommand> _parser = new pb::MessageParser<DoorCommand>(() => new DoorCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoorCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.Spot.DoorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoorCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoorCommand(DoorCommand other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoorCommand Clone() {
      return new DoorCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoorCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoorCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoorCommand other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DoorCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Specify if the hinge is on the left or right side of the door, when looking at the door,
      /// relative to the door handle.
      /// </summary>
      public enum HingeSide {
        [pbr::OriginalName("HINGE_SIDE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("HINGE_SIDE_LEFT")] Left = 1,
        [pbr::OriginalName("HINGE_SIDE_RIGHT")] Right = 2,
      }

      /// <summary>
      /// Specify if the door is push or pull, when looking at the door.
      /// </summary>
      public enum SwingDirection {
        [pbr::OriginalName("SWING_DIRECTION_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SWING_DIRECTION_INSWING")] Inswing = 1,
        [pbr::OriginalName("SWING_DIRECTION_OUTSWING")] Outswing = 2,
      }

      /// <summary>
      /// Specify type of door handle.
      /// </summary>
      public enum HandleType {
        [pbr::OriginalName("HANDLE_TYPE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("HANDLE_TYPE_LEVER")] Lever = 1,
        [pbr::OriginalName("HANDLE_TYPE_KNOB")] Knob = 2,
        [pbr::OriginalName("HANDLE_TYPE_FIXED_GRASP")] FixedGrasp = 3,
      }

      /// <summary>
      /// The robot searches along a ray for the door handle and automatically grasp it before
      /// executing door opening.
      /// </summary>
      public sealed partial class AutoGraspCommand : pb::IMessage<AutoGraspCommand> {
        private static readonly pb::MessageParser<AutoGraspCommand> _parser = new pb::MessageParser<AutoGraspCommand>(() => new AutoGraspCommand());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoGraspCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Spot.DoorCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoGraspCommand() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoGraspCommand(AutoGraspCommand other) : this() {
          frameName_ = other.frameName_;
          searchRayStartInFrame_ = other.searchRayStartInFrame_ != null ? other.searchRayStartInFrame_.Clone() : null;
          searchRayEndInFrame_ = other.searchRayEndInFrame_ != null ? other.searchRayEndInFrame_.Clone() : null;
          hingeSide_ = other.hingeSide_;
          swingDirection_ = other.swingDirection_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoGraspCommand Clone() {
          return new AutoGraspCommand(this);
        }

        /// <summary>Field number for the "frame_name" field.</summary>
        public const int FrameNameFieldNumber = 1;
        private string frameName_ = "";
        /// <summary>
        /// The name of the frame that the following fields are expressed in.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FrameName {
          get { return frameName_; }
          set {
            frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "search_ray_start_in_frame" field.</summary>
        public const int SearchRayStartInFrameFieldNumber = 2;
        private global::Bosdyn.Api.Vec3 searchRayStartInFrame_;
        /// <summary>
        /// The start of the ray the robot searches along for the door handle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 SearchRayStartInFrame {
          get { return searchRayStartInFrame_; }
          set {
            searchRayStartInFrame_ = value;
          }
        }

        /// <summary>Field number for the "search_ray_end_in_frame" field.</summary>
        public const int SearchRayEndInFrameFieldNumber = 3;
        private global::Bosdyn.Api.Vec3 searchRayEndInFrame_;
        /// <summary>
        /// The end of the ray the robot searches along for the door handle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 SearchRayEndInFrame {
          get { return searchRayEndInFrame_; }
          set {
            searchRayEndInFrame_ = value;
          }
        }

        /// <summary>Field number for the "hinge_side" field.</summary>
        public const int HingeSideFieldNumber = 4;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide hingeSide_ = 0;
        /// <summary>
        /// The side of the hinge with respect to the robot when facing the door.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide HingeSide {
          get { return hingeSide_; }
          set {
            hingeSide_ = value;
          }
        }

        /// <summary>Field number for the "swing_direction" field.</summary>
        public const int SwingDirectionFieldNumber = 5;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection swingDirection_ = 0;
        /// <summary>
        /// The direction the door moves with respect to the robot.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection SwingDirection {
          get { return swingDirection_; }
          set {
            swingDirection_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AutoGraspCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoGraspCommand other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrameName != other.FrameName) return false;
          if (!object.Equals(SearchRayStartInFrame, other.SearchRayStartInFrame)) return false;
          if (!object.Equals(SearchRayEndInFrame, other.SearchRayEndInFrame)) return false;
          if (HingeSide != other.HingeSide) return false;
          if (SwingDirection != other.SwingDirection) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
          if (searchRayStartInFrame_ != null) hash ^= SearchRayStartInFrame.GetHashCode();
          if (searchRayEndInFrame_ != null) hash ^= SearchRayEndInFrame.GetHashCode();
          if (HingeSide != 0) hash ^= HingeSide.GetHashCode();
          if (SwingDirection != 0) hash ^= SwingDirection.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrameName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FrameName);
          }
          if (searchRayStartInFrame_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SearchRayStartInFrame);
          }
          if (searchRayEndInFrame_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(SearchRayEndInFrame);
          }
          if (HingeSide != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) HingeSide);
          }
          if (SwingDirection != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) SwingDirection);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
          }
          if (searchRayStartInFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRayStartInFrame);
          }
          if (searchRayEndInFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRayEndInFrame);
          }
          if (HingeSide != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HingeSide);
          }
          if (SwingDirection != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwingDirection);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoGraspCommand other) {
          if (other == null) {
            return;
          }
          if (other.FrameName.Length != 0) {
            FrameName = other.FrameName;
          }
          if (other.searchRayStartInFrame_ != null) {
            if (searchRayStartInFrame_ == null) {
              SearchRayStartInFrame = new global::Bosdyn.Api.Vec3();
            }
            SearchRayStartInFrame.MergeFrom(other.SearchRayStartInFrame);
          }
          if (other.searchRayEndInFrame_ != null) {
            if (searchRayEndInFrame_ == null) {
              SearchRayEndInFrame = new global::Bosdyn.Api.Vec3();
            }
            SearchRayEndInFrame.MergeFrom(other.SearchRayEndInFrame);
          }
          if (other.HingeSide != 0) {
            HingeSide = other.HingeSide;
          }
          if (other.SwingDirection != 0) {
            SwingDirection = other.SwingDirection;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FrameName = input.ReadString();
                break;
              }
              case 18: {
                if (searchRayStartInFrame_ == null) {
                  SearchRayStartInFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(SearchRayStartInFrame);
                break;
              }
              case 26: {
                if (searchRayEndInFrame_ == null) {
                  SearchRayEndInFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(SearchRayEndInFrame);
                break;
              }
              case 32: {
                HingeSide = (global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide) input.ReadEnum();
                break;
              }
              case 40: {
                SwingDirection = (global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The robot is already grasping the door handle and will continue opening the door based on
      /// user specified params.
      /// </summary>
      public sealed partial class WarmstartCommand : pb::IMessage<WarmstartCommand> {
        private static readonly pb::MessageParser<WarmstartCommand> _parser = new pb::MessageParser<WarmstartCommand>(() => new WarmstartCommand());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WarmstartCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Spot.DoorCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WarmstartCommand() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WarmstartCommand(WarmstartCommand other) : this() {
          hingeSide_ = other.hingeSide_;
          swingDirection_ = other.swingDirection_;
          handleType_ = other.handleType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WarmstartCommand Clone() {
          return new WarmstartCommand(this);
        }

        /// <summary>Field number for the "hinge_side" field.</summary>
        public const int HingeSideFieldNumber = 1;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide hingeSide_ = 0;
        /// <summary>
        /// The side of the hinge with respect to the robot when facing the door.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide HingeSide {
          get { return hingeSide_; }
          set {
            hingeSide_ = value;
          }
        }

        /// <summary>Field number for the "swing_direction" field.</summary>
        public const int SwingDirectionFieldNumber = 2;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection swingDirection_ = 0;
        /// <summary>
        /// The direction the door moves with respect to the robot.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection SwingDirection {
          get { return swingDirection_; }
          set {
            swingDirection_ = value;
          }
        }

        /// <summary>Field number for the "handle_type" field.</summary>
        public const int HandleTypeFieldNumber = 3;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.HandleType handleType_ = 0;
        /// <summary>
        /// The type of handle on the door.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.HandleType HandleType {
          get { return handleType_; }
          set {
            handleType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WarmstartCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WarmstartCommand other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HingeSide != other.HingeSide) return false;
          if (SwingDirection != other.SwingDirection) return false;
          if (HandleType != other.HandleType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HingeSide != 0) hash ^= HingeSide.GetHashCode();
          if (SwingDirection != 0) hash ^= SwingDirection.GetHashCode();
          if (HandleType != 0) hash ^= HandleType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HingeSide != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) HingeSide);
          }
          if (SwingDirection != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SwingDirection);
          }
          if (HandleType != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) HandleType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HingeSide != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HingeSide);
          }
          if (SwingDirection != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwingDirection);
          }
          if (HandleType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandleType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WarmstartCommand other) {
          if (other == null) {
            return;
          }
          if (other.HingeSide != 0) {
            HingeSide = other.HingeSide;
          }
          if (other.SwingDirection != 0) {
            SwingDirection = other.SwingDirection;
          }
          if (other.HandleType != 0) {
            HandleType = other.HandleType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HingeSide = (global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide) input.ReadEnum();
                break;
              }
              case 16: {
                SwingDirection = (global::Bosdyn.Api.Spot.DoorCommand.Types.SwingDirection) input.ReadEnum();
                break;
              }
              case 24: {
                HandleType = (global::Bosdyn.Api.Spot.DoorCommand.Types.HandleType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Open doors that do not require a grasp, just a push. This could be a door with no latching
      /// mechanism that just requires a push, or a door with a pushbar.
      /// The robot will automatically push the door open and walk through.
      /// </summary>
      public sealed partial class AutoPushCommand : pb::IMessage<AutoPushCommand> {
        private static readonly pb::MessageParser<AutoPushCommand> _parser = new pb::MessageParser<AutoPushCommand>(() => new AutoPushCommand());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoPushCommand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Spot.DoorCommand.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPushCommand() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPushCommand(AutoPushCommand other) : this() {
          frameName_ = other.frameName_;
          pushPointInFrame_ = other.pushPointInFrame_ != null ? other.pushPointInFrame_.Clone() : null;
          hingeSide_ = other.hingeSide_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoPushCommand Clone() {
          return new AutoPushCommand(this);
        }

        /// <summary>Field number for the "frame_name" field.</summary>
        public const int FrameNameFieldNumber = 1;
        private string frameName_ = "";
        /// <summary>
        /// The name of the frame that the following fields are expressed in.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FrameName {
          get { return frameName_; }
          set {
            frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "push_point_in_frame" field.</summary>
        public const int PushPointInFrameFieldNumber = 2;
        private global::Bosdyn.Api.Vec3 pushPointInFrame_;
        /// <summary>
        /// The point that the robot will push on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 PushPointInFrame {
          get { return pushPointInFrame_; }
          set {
            pushPointInFrame_ = value;
          }
        }

        /// <summary>Field number for the "hinge_side" field.</summary>
        public const int HingeSideFieldNumber = 3;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide hingeSide_ = 0;
        /// <summary>
        /// The side of the hinge with respect to the robot when facing the door.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide HingeSide {
          get { return hingeSide_; }
          set {
            hingeSide_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AutoPushCommand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoPushCommand other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrameName != other.FrameName) return false;
          if (!object.Equals(PushPointInFrame, other.PushPointInFrame)) return false;
          if (HingeSide != other.HingeSide) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
          if (pushPointInFrame_ != null) hash ^= PushPointInFrame.GetHashCode();
          if (HingeSide != 0) hash ^= HingeSide.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrameName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FrameName);
          }
          if (pushPointInFrame_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PushPointInFrame);
          }
          if (HingeSide != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) HingeSide);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
          }
          if (pushPointInFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushPointInFrame);
          }
          if (HingeSide != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HingeSide);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoPushCommand other) {
          if (other == null) {
            return;
          }
          if (other.FrameName.Length != 0) {
            FrameName = other.FrameName;
          }
          if (other.pushPointInFrame_ != null) {
            if (pushPointInFrame_ == null) {
              PushPointInFrame = new global::Bosdyn.Api.Vec3();
            }
            PushPointInFrame.MergeFrom(other.PushPointInFrame);
          }
          if (other.HingeSide != 0) {
            HingeSide = other.HingeSide;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FrameName = input.ReadString();
                break;
              }
              case 18: {
                if (pushPointInFrame_ == null) {
                  PushPointInFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(PushPointInFrame);
                break;
              }
              case 24: {
                HingeSide = (global::Bosdyn.Api.Spot.DoorCommand.Types.HingeSide) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Spot.DoorCommand.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          switch (other.CommandCase) {
            case CommandOneofCase.AutoGraspCommand:
              AutoGraspCommand = other.AutoGraspCommand.Clone();
              break;
            case CommandOneofCase.WarmstartCommand:
              WarmstartCommand = other.WarmstartCommand.Clone();
              break;
            case CommandOneofCase.AutoPushCommand:
              AutoPushCommand = other.AutoPushCommand.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "auto_grasp_command" field.</summary>
        public const int AutoGraspCommandFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand AutoGraspCommand {
          get { return commandCase_ == CommandOneofCase.AutoGraspCommand ? (global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AutoGraspCommand;
          }
        }

        /// <summary>Field number for the "warmstart_command" field.</summary>
        public const int WarmstartCommandFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand WarmstartCommand {
          get { return commandCase_ == CommandOneofCase.WarmstartCommand ? (global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.WarmstartCommand;
          }
        }

        /// <summary>Field number for the "auto_push_command" field.</summary>
        public const int AutoPushCommandFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand AutoPushCommand {
          get { return commandCase_ == CommandOneofCase.AutoPushCommand ? (global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand) command_ : null; }
          set {
            command_ = value;
            commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AutoPushCommand;
          }
        }

        private object command_;
        /// <summary>Enum of possible cases for the "command" oneof.</summary>
        public enum CommandOneofCase {
          None = 0,
          AutoGraspCommand = 10,
          WarmstartCommand = 11,
          AutoPushCommand = 12,
        }
        private CommandOneofCase commandCase_ = CommandOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandOneofCase CommandCase {
          get { return commandCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCommand() {
          commandCase_ = CommandOneofCase.None;
          command_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(AutoGraspCommand, other.AutoGraspCommand)) return false;
          if (!object.Equals(WarmstartCommand, other.WarmstartCommand)) return false;
          if (!object.Equals(AutoPushCommand, other.AutoPushCommand)) return false;
          if (CommandCase != other.CommandCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (commandCase_ == CommandOneofCase.AutoGraspCommand) hash ^= AutoGraspCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.WarmstartCommand) hash ^= WarmstartCommand.GetHashCode();
          if (commandCase_ == CommandOneofCase.AutoPushCommand) hash ^= AutoPushCommand.GetHashCode();
          hash ^= (int) commandCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (commandCase_ == CommandOneofCase.AutoGraspCommand) {
            output.WriteRawTag(82);
            output.WriteMessage(AutoGraspCommand);
          }
          if (commandCase_ == CommandOneofCase.WarmstartCommand) {
            output.WriteRawTag(90);
            output.WriteMessage(WarmstartCommand);
          }
          if (commandCase_ == CommandOneofCase.AutoPushCommand) {
            output.WriteRawTag(98);
            output.WriteMessage(AutoPushCommand);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (commandCase_ == CommandOneofCase.AutoGraspCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoGraspCommand);
          }
          if (commandCase_ == CommandOneofCase.WarmstartCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarmstartCommand);
          }
          if (commandCase_ == CommandOneofCase.AutoPushCommand) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoPushCommand);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          switch (other.CommandCase) {
            case CommandOneofCase.AutoGraspCommand:
              if (AutoGraspCommand == null) {
                AutoGraspCommand = new global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand();
              }
              AutoGraspCommand.MergeFrom(other.AutoGraspCommand);
              break;
            case CommandOneofCase.WarmstartCommand:
              if (WarmstartCommand == null) {
                WarmstartCommand = new global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand();
              }
              WarmstartCommand.MergeFrom(other.WarmstartCommand);
              break;
            case CommandOneofCase.AutoPushCommand:
              if (AutoPushCommand == null) {
                AutoPushCommand = new global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand();
              }
              AutoPushCommand.MergeFrom(other.AutoPushCommand);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand subBuilder = new global::Bosdyn.Api.Spot.DoorCommand.Types.AutoGraspCommand();
                if (commandCase_ == CommandOneofCase.AutoGraspCommand) {
                  subBuilder.MergeFrom(AutoGraspCommand);
                }
                input.ReadMessage(subBuilder);
                AutoGraspCommand = subBuilder;
                break;
              }
              case 90: {
                global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand subBuilder = new global::Bosdyn.Api.Spot.DoorCommand.Types.WarmstartCommand();
                if (commandCase_ == CommandOneofCase.WarmstartCommand) {
                  subBuilder.MergeFrom(WarmstartCommand);
                }
                input.ReadMessage(subBuilder);
                WarmstartCommand = subBuilder;
                break;
              }
              case 98: {
                global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand subBuilder = new global::Bosdyn.Api.Spot.DoorCommand.Types.AutoPushCommand();
                if (commandCase_ == CommandOneofCase.AutoPushCommand) {
                  subBuilder.MergeFrom(AutoPushCommand);
                }
                input.ReadMessage(subBuilder);
                AutoPushCommand = subBuilder;
                break;
              }
            }
          }
        }

      }

      public sealed partial class Feedback : pb::IMessage<Feedback> {
        private static readonly pb::MessageParser<Feedback> _parser = new pb::MessageParser<Feedback>(() => new Feedback());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feedback> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Spot.DoorCommand.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback(Feedback other) : this() {
          status_ = other.status_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feedback Clone() {
          return new Feedback(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback.Types.Status status_ = 0;
        /// <summary>
        /// Current status of the command.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback.Types.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feedback);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feedback other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Status != other.Status) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Status != 0) hash ^= Status.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Status != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feedback other) {
          if (other == null) {
            return;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Status = (global::Bosdyn.Api.Spot.DoorCommand.Types.Feedback.Types.Status) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feedback message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Status {
            /// <summary>
            /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            /// </summary>
            [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
            /// <summary>
            /// Robot has finished opening the door.
            /// </summary>
            [pbr::OriginalName("STATUS_COMPLETED")] Completed = 1,
            /// <summary>
            /// Robot is attempting to open the door.
            /// </summary>
            [pbr::OriginalName("STATUS_IN_PROGRESS")] InProgress = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
