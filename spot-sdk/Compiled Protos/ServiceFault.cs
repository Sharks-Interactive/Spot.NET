// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/service_fault.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/service_fault.proto</summary>
  public static partial class ServiceFaultReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/service_fault.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceFaultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQcm90b3Mvc2VydmljZV9mYXVsdC5wcm90bxIKYm9zZHluLmFwaRoTUHJv",
            "dG9zL2hlYWRlci5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvIlAKDlNlcnZp",
            "Y2VGYXVsdElkEhIKCmZhdWx0X25hbWUYASABKAkSFAoMc2VydmljZV9uYW1l",
            "GAIgASgJEhQKDHBheWxvYWRfZ3VpZBgDIAEoCSLdAgoMU2VydmljZUZhdWx0",
            "EiwKCGZhdWx0X2lkGAEgASgLMhouYm9zZHluLmFwaS5TZXJ2aWNlRmF1bHRJ",
            "ZBIVCg1lcnJvcl9tZXNzYWdlGAIgASgJEhIKCmF0dHJpYnV0ZXMYAyADKAkS",
            "MwoIc2V2ZXJpdHkYBCABKA4yIS5ib3NkeW4uYXBpLlNlcnZpY2VGYXVsdC5T",
            "ZXZlcml0eRIzCg9vbnNldF90aW1lc3RhbXAYBSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEisKCGR1cmF0aW9uGAYgASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uIl0KCFNldmVyaXR5EhQKEFNFVkVSSVRZX1VOS05P",
            "V04QABIRCg1TRVZFUklUWV9JTkZPEAESEQoNU0VWRVJJVFlfV0FSThACEhUK",
            "EVNFVkVSSVRZX0NSSVRJQ0FMEAMicAoaVHJpZ2dlclNlcnZpY2VGYXVsdFJl",
            "cXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVh",
            "ZGVyEicKBWZhdWx0GAIgASgLMhguYm9zZHluLmFwaS5TZXJ2aWNlRmF1bHQi",
            "1wEKG1RyaWdnZXJTZXJ2aWNlRmF1bHRSZXNwb25zZRIqCgZoZWFkZXIYASAB",
            "KAsyGi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEj4KBnN0YXR1cxgCIAEo",
            "DjIuLmJvc2R5bi5hcGkuVHJpZ2dlclNlcnZpY2VGYXVsdFJlc3BvbnNlLlN0",
            "YXR1cyJMCgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABINCglTVEFUVVNf",
            "T0sQARIfChtTVEFUVVNfRkFVTFRfQUxSRUFEWV9BQ1RJVkUQAiK3AQoYQ2xl",
            "YXJTZXJ2aWNlRmF1bHRSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5",
            "bi5hcGkuUmVxdWVzdEhlYWRlchIsCghmYXVsdF9pZBgCIAEoCzIaLmJvc2R5",
            "bi5hcGkuU2VydmljZUZhdWx0SWQSIAoYY2xlYXJfYWxsX3NlcnZpY2VfZmF1",
            "bHRzGAMgASgIEiAKGGNsZWFyX2FsbF9wYXlsb2FkX2ZhdWx0cxgEIAEoCCLP",
            "AQoZQ2xlYXJTZXJ2aWNlRmF1bHRSZXNwb25zZRIqCgZoZWFkZXIYASABKAsy",
            "Gi5ib3NkeW4uYXBpLlJlc3BvbnNlSGVhZGVyEjwKBnN0YXR1cxgCIAEoDjIs",
            "LmJvc2R5bi5hcGkuQ2xlYXJTZXJ2aWNlRmF1bHRSZXNwb25zZS5TdGF0dXMi",
            "SAoGU3RhdHVzEhIKDlNUQVRVU19VTktOT1dOEAASDQoJU1RBVFVTX09LEAES",
            "GwoXU1RBVFVTX0ZBVUxUX05PVF9BQ1RJVkUQAkITQhFTZXJ2aWNlRmF1bHRQ",
            "cm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.HeaderReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ServiceFaultId), global::Bosdyn.Api.ServiceFaultId.Parser, new[]{ "FaultName", "ServiceName", "PayloadGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ServiceFault), global::Bosdyn.Api.ServiceFault.Parser, new[]{ "FaultId", "ErrorMessage", "Attributes", "Severity", "OnsetTimestamp", "Duration" }, null, new[]{ typeof(global::Bosdyn.Api.ServiceFault.Types.Severity) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TriggerServiceFaultRequest), global::Bosdyn.Api.TriggerServiceFaultRequest.Parser, new[]{ "Header", "Fault" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.TriggerServiceFaultResponse), global::Bosdyn.Api.TriggerServiceFaultResponse.Parser, new[]{ "Header", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.TriggerServiceFaultResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClearServiceFaultRequest), global::Bosdyn.Api.ClearServiceFaultRequest.Parser, new[]{ "Header", "FaultId", "ClearAllServiceFaults", "ClearAllPayloadFaults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ClearServiceFaultResponse), global::Bosdyn.Api.ClearServiceFaultResponse.Parser, new[]{ "Header", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.ClearServiceFaultResponse.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Information necessary to uniquely specify a service fault.
  /// A service fault typically is associated with a service running on the robot or a
  /// payload. Occassionally, the fault may pertain to a payload but no specific service
  /// on the payload. In that situation, no service_name should not be specified and instead
  /// a payload_guid should be specified. Otherwise, in the standard case of a service
  /// originating fault, only the service_name should be specified and the payload_guid
  /// will be populated automatically by the fault service on robot.
  /// </summary>
  public sealed partial class ServiceFaultId : pb::IMessage<ServiceFaultId> {
    private static readonly pb::MessageParser<ServiceFaultId> _parser = new pb::MessageParser<ServiceFaultId>(() => new ServiceFaultId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceFaultId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultId(ServiceFaultId other) : this() {
      faultName_ = other.faultName_;
      serviceName_ = other.serviceName_;
      payloadGuid_ = other.payloadGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultId Clone() {
      return new ServiceFaultId(this);
    }

    /// <summary>Field number for the "fault_name" field.</summary>
    public const int FaultNameFieldNumber = 1;
    private string faultName_ = "";
    /// <summary>
    /// Name of the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultName {
      get { return faultName_; }
      set {
        faultName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    /// Name of the registered service associated with the fault.
    /// Optional. Service name does not need to be specified if this is a payload-level
    /// fault with no associated service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload_guid" field.</summary>
    public const int PayloadGuidFieldNumber = 3;
    private string payloadGuid_ = "";
    /// <summary>
    /// GUID of the payload associated with the faulted service.
    /// Optional. If not set, it will be assigned to the payload associated with the
    /// service_name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayloadGuid {
      get { return payloadGuid_; }
      set {
        payloadGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceFaultId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceFaultId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaultName != other.FaultName) return false;
      if (ServiceName != other.ServiceName) return false;
      if (PayloadGuid != other.PayloadGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaultName.Length != 0) hash ^= FaultName.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (PayloadGuid.Length != 0) hash ^= PayloadGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaultName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FaultName);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (PayloadGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PayloadGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaultName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultName);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (PayloadGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceFaultId other) {
      if (other == null) {
        return;
      }
      if (other.FaultName.Length != 0) {
        FaultName = other.FaultName;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.PayloadGuid.Length != 0) {
        PayloadGuid = other.PayloadGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FaultName = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            PayloadGuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The current service faults for services registered with the robot.
  /// A fault is an indicator of a problem with a service or payload registered
  /// with the robot. An active fault may indicate a service may fail to comply
  /// with a user request.
  /// If the name, service_name, and payload_guid of a newly triggered ServiceFault matches an
  /// already active ServiceFault the new fault will not be added to the active fault list.
  /// The oldest matching fault will be maintained.
  /// </summary>
  public sealed partial class ServiceFault : pb::IMessage<ServiceFault> {
    private static readonly pb::MessageParser<ServiceFault> _parser = new pb::MessageParser<ServiceFault>(() => new ServiceFault());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceFault> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFault() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFault(ServiceFault other) : this() {
      faultId_ = other.faultId_ != null ? other.faultId_.Clone() : null;
      errorMessage_ = other.errorMessage_;
      attributes_ = other.attributes_.Clone();
      severity_ = other.severity_;
      onsetTimestamp_ = other.onsetTimestamp_ != null ? other.onsetTimestamp_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFault Clone() {
      return new ServiceFault(this);
    }

    /// <summary>Field number for the "fault_id" field.</summary>
    public const int FaultIdFieldNumber = 1;
    private global::Bosdyn.Api.ServiceFaultId faultId_;
    /// <summary>
    /// Identifying information of the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceFaultId FaultId {
      get { return faultId_; }
      set {
        faultId_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 2;
    private string errorMessage_ = "";
    /// <summary>
    /// User visible description of the fault (and possibly remedies). Will be
    /// displayed on tablet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_attributes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> attributes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fault attributes
    /// Each fault may be flagged with attribute metadata (strings in this case.)
    /// These attributes are useful to communicate that a particular fault may
    /// have significant effect on the operations of services. Some potential attributes
    /// may be "autowalk", "Spot CORE", "vision", or "gauge detection". These
    /// attributes enable the caller to flag a fault as indicating a problem with
    /// particular robot abstractions. A fault may have, zero, one, or more
    /// attributes attached to it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 4;
    private global::Bosdyn.Api.ServiceFault.Types.Severity severity_ = 0;
    /// <summary>
    /// The severity level will have some indication of the potential breakage
    /// resulting from the fault. For example, a fault associated with payload
    /// X and severity level SEVERITY_INFO may indicate the payload is in an
    /// unexpected state but still operational. However, a fault with serverity
    /// level SEVERITY_CRITICAL may indicate the payload is no
    /// longer operational.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceFault.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "onset_timestamp" field.</summary>
    public const int OnsetTimestampFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp onsetTimestamp_;
    /// <summary>
    /// Time of robot local clock at fault onset. Set by robot-state service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OnsetTimestamp {
      get { return onsetTimestamp_; }
      set {
        onsetTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Time elapsed since onset of the fault. Set by robot-state service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceFault);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceFault other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FaultId, other.FaultId)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (Severity != other.Severity) return false;
      if (!object.Equals(OnsetTimestamp, other.OnsetTimestamp)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (faultId_ != null) hash ^= FaultId.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (onsetTimestamp_ != null) hash ^= OnsetTimestamp.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (faultId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FaultId);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMessage);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (Severity != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Severity);
      }
      if (onsetTimestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OnsetTimestamp);
      }
      if (duration_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (faultId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaultId);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (onsetTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnsetTimestamp);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceFault other) {
      if (other == null) {
        return;
      }
      if (other.faultId_ != null) {
        if (faultId_ == null) {
          FaultId = new global::Bosdyn.Api.ServiceFaultId();
        }
        FaultId.MergeFrom(other.FaultId);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      attributes_.Add(other.attributes_);
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.onsetTimestamp_ != null) {
        if (onsetTimestamp_ == null) {
          OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OnsetTimestamp.MergeFrom(other.OnsetTimestamp);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (faultId_ == null) {
              FaultId = new global::Bosdyn.Api.ServiceFaultId();
            }
            input.ReadMessage(FaultId);
            break;
          }
          case 18: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 26: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 32: {
            Severity = (global::Bosdyn.Api.ServiceFault.Types.Severity) input.ReadEnum();
            break;
          }
          case 42: {
            if (onsetTimestamp_ == null) {
              OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OnsetTimestamp);
            break;
          }
          case 50: {
            if (duration_ == null) {
              Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Duration);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceFault message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Severity {
        /// <summary>
        /// Unknown severity
        /// </summary>
        [pbr::OriginalName("SEVERITY_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Service still functional
        /// </summary>
        [pbr::OriginalName("SEVERITY_INFO")] Info = 1,
        /// <summary>
        /// Service performance may be degraded
        /// </summary>
        [pbr::OriginalName("SEVERITY_WARN")] Warn = 2,
        /// <summary>
        /// Critical service fault
        /// </summary>
        [pbr::OriginalName("SEVERITY_CRITICAL")] Critical = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Trigger a new service fault that will be reported in the robot ServiceFaultState.
  /// These faults will be displayed in the tablet. Developers should be careful to
  /// avoid overwhelming operators with dozens of minor messages.
  /// </summary>
  public sealed partial class TriggerServiceFaultRequest : pb::IMessage<TriggerServiceFaultRequest> {
    private static readonly pb::MessageParser<TriggerServiceFaultRequest> _parser = new pb::MessageParser<TriggerServiceFaultRequest>(() => new TriggerServiceFaultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerServiceFaultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultRequest(TriggerServiceFaultRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      fault_ = other.fault_ != null ? other.fault_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultRequest Clone() {
      return new TriggerServiceFaultRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "fault" field.</summary>
    public const int FaultFieldNumber = 2;
    private global::Bosdyn.Api.ServiceFault fault_;
    /// <summary>
    /// The fault to report in ServiceFaultState.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceFault Fault {
      get { return fault_; }
      set {
        fault_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerServiceFaultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerServiceFaultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Fault, other.Fault)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (fault_ != null) hash ^= Fault.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (fault_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Fault);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (fault_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fault);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerServiceFaultRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.fault_ != null) {
        if (fault_ == null) {
          Fault = new global::Bosdyn.Api.ServiceFault();
        }
        Fault.MergeFrom(other.Fault);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (fault_ == null) {
              Fault = new global::Bosdyn.Api.ServiceFault();
            }
            input.ReadMessage(Fault);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The TriggerServiceFault response message contains a header indicating success.
  /// </summary>
  public sealed partial class TriggerServiceFaultResponse : pb::IMessage<TriggerServiceFaultResponse> {
    private static readonly pb::MessageParser<TriggerServiceFaultResponse> _parser = new pb::MessageParser<TriggerServiceFaultResponse>(() => new TriggerServiceFaultResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerServiceFaultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultResponse(TriggerServiceFaultResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerServiceFaultResponse Clone() {
      return new TriggerServiceFaultResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.TriggerServiceFaultResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.TriggerServiceFaultResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerServiceFaultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerServiceFaultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerServiceFaultResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.TriggerServiceFaultResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TriggerServiceFaultResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Success. The fault has been triggerd.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// ServiceFaultId already in active faults.
        /// </summary>
        [pbr::OriginalName("STATUS_FAULT_ALREADY_ACTIVE")] FaultAlreadyActive = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Clear a service fault from the robot's ServiceFaultState (in robot_state.proto).
  /// The active ServiceFault to clear will be determined by matching fault_name and
  /// service_name/payload_guid, specified in the ServiceFaultId message.
  /// </summary>
  public sealed partial class ClearServiceFaultRequest : pb::IMessage<ClearServiceFaultRequest> {
    private static readonly pb::MessageParser<ClearServiceFaultRequest> _parser = new pb::MessageParser<ClearServiceFaultRequest>(() => new ClearServiceFaultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearServiceFaultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultRequest(ClearServiceFaultRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      faultId_ = other.faultId_ != null ? other.faultId_.Clone() : null;
      clearAllServiceFaults_ = other.clearAllServiceFaults_;
      clearAllPayloadFaults_ = other.clearAllPayloadFaults_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultRequest Clone() {
      return new ClearServiceFaultRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "fault_id" field.</summary>
    public const int FaultIdFieldNumber = 2;
    private global::Bosdyn.Api.ServiceFaultId faultId_;
    /// <summary>
    /// Identifying information of the fault to clear.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceFaultId FaultId {
      get { return faultId_; }
      set {
        faultId_ = value;
      }
    }

    /// <summary>Field number for the "clear_all_service_faults" field.</summary>
    public const int ClearAllServiceFaultsFieldNumber = 3;
    private bool clearAllServiceFaults_;
    /// <summary>
    /// Clear all faults that are associated with the same service_name. Use carefully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearAllServiceFaults {
      get { return clearAllServiceFaults_; }
      set {
        clearAllServiceFaults_ = value;
      }
    }

    /// <summary>Field number for the "clear_all_payload_faults" field.</summary>
    public const int ClearAllPayloadFaultsFieldNumber = 4;
    private bool clearAllPayloadFaults_;
    /// <summary>
    /// Clear all faults that are associated with the same payload_guid. Use carefully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearAllPayloadFaults {
      get { return clearAllPayloadFaults_; }
      set {
        clearAllPayloadFaults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearServiceFaultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearServiceFaultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(FaultId, other.FaultId)) return false;
      if (ClearAllServiceFaults != other.ClearAllServiceFaults) return false;
      if (ClearAllPayloadFaults != other.ClearAllPayloadFaults) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (faultId_ != null) hash ^= FaultId.GetHashCode();
      if (ClearAllServiceFaults != false) hash ^= ClearAllServiceFaults.GetHashCode();
      if (ClearAllPayloadFaults != false) hash ^= ClearAllPayloadFaults.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (faultId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FaultId);
      }
      if (ClearAllServiceFaults != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearAllServiceFaults);
      }
      if (ClearAllPayloadFaults != false) {
        output.WriteRawTag(32);
        output.WriteBool(ClearAllPayloadFaults);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (faultId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaultId);
      }
      if (ClearAllServiceFaults != false) {
        size += 1 + 1;
      }
      if (ClearAllPayloadFaults != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearServiceFaultRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.faultId_ != null) {
        if (faultId_ == null) {
          FaultId = new global::Bosdyn.Api.ServiceFaultId();
        }
        FaultId.MergeFrom(other.FaultId);
      }
      if (other.ClearAllServiceFaults != false) {
        ClearAllServiceFaults = other.ClearAllServiceFaults;
      }
      if (other.ClearAllPayloadFaults != false) {
        ClearAllPayloadFaults = other.ClearAllPayloadFaults;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (faultId_ == null) {
              FaultId = new global::Bosdyn.Api.ServiceFaultId();
            }
            input.ReadMessage(FaultId);
            break;
          }
          case 24: {
            ClearAllServiceFaults = input.ReadBool();
            break;
          }
          case 32: {
            ClearAllPayloadFaults = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ClearServiceFault response message contains a header indicating success.
  /// </summary>
  public sealed partial class ClearServiceFaultResponse : pb::IMessage<ClearServiceFaultResponse> {
    private static readonly pb::MessageParser<ClearServiceFaultResponse> _parser = new pb::MessageParser<ClearServiceFaultResponse>(() => new ClearServiceFaultResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearServiceFaultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.ServiceFaultReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultResponse(ClearServiceFaultResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearServiceFaultResponse Clone() {
      return new ClearServiceFaultResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.ClearServiceFaultResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ClearServiceFaultResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearServiceFaultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearServiceFaultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearServiceFaultResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.ClearServiceFaultResponse.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClearServiceFaultResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// UNKNOWN should never be used.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Success. The fault has been cleared.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// ServiceFaultId not found in active faults.
        /// </summary>
        [pbr::OriginalName("STATUS_FAULT_NOT_ACTIVE")] FaultNotActive = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
