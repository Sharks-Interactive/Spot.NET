// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/lease_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// LeaseService provides Leases of shared resources to clients.
  /// An example of a shared resource is the set of leg motors on Spot, which
  /// has the resource name of "body".
  /// Clients can delegate out the Leases they receive from the LeaseService
  /// to additional clients or services by generating sub-leases.
  /// Leases obtained from the LeaseService may be revoked if the Lease holder
  /// does not check in frequently to the LeaseService, or if another client
  /// force-acquires a Lease.
  /// </summary>
  public static partial class LeaseService
  {
    static readonly string __ServiceName = "bosdyn.api.LeaseService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.AcquireLeaseRequest> __Marshaller_bosdyn_api_AcquireLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.AcquireLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.AcquireLeaseResponse> __Marshaller_bosdyn_api_AcquireLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.AcquireLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.TakeLeaseRequest> __Marshaller_bosdyn_api_TakeLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TakeLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.TakeLeaseResponse> __Marshaller_bosdyn_api_TakeLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.TakeLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ReturnLeaseRequest> __Marshaller_bosdyn_api_ReturnLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ReturnLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ReturnLeaseResponse> __Marshaller_bosdyn_api_ReturnLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ReturnLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListLeasesRequest> __Marshaller_bosdyn_api_ListLeasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListLeasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListLeasesResponse> __Marshaller_bosdyn_api_ListLeasesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListLeasesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RetainLeaseRequest> __Marshaller_bosdyn_api_RetainLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RetainLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.RetainLeaseResponse> __Marshaller_bosdyn_api_RetainLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.RetainLeaseResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.AcquireLeaseRequest, global::Bosdyn.Api.AcquireLeaseResponse> __Method_AcquireLease = new grpc::Method<global::Bosdyn.Api.AcquireLeaseRequest, global::Bosdyn.Api.AcquireLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcquireLease",
        __Marshaller_bosdyn_api_AcquireLeaseRequest,
        __Marshaller_bosdyn_api_AcquireLeaseResponse);

    static readonly grpc::Method<global::Bosdyn.Api.TakeLeaseRequest, global::Bosdyn.Api.TakeLeaseResponse> __Method_TakeLease = new grpc::Method<global::Bosdyn.Api.TakeLeaseRequest, global::Bosdyn.Api.TakeLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TakeLease",
        __Marshaller_bosdyn_api_TakeLeaseRequest,
        __Marshaller_bosdyn_api_TakeLeaseResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ReturnLeaseRequest, global::Bosdyn.Api.ReturnLeaseResponse> __Method_ReturnLease = new grpc::Method<global::Bosdyn.Api.ReturnLeaseRequest, global::Bosdyn.Api.ReturnLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReturnLease",
        __Marshaller_bosdyn_api_ReturnLeaseRequest,
        __Marshaller_bosdyn_api_ReturnLeaseResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ListLeasesRequest, global::Bosdyn.Api.ListLeasesResponse> __Method_ListLeases = new grpc::Method<global::Bosdyn.Api.ListLeasesRequest, global::Bosdyn.Api.ListLeasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLeases",
        __Marshaller_bosdyn_api_ListLeasesRequest,
        __Marshaller_bosdyn_api_ListLeasesResponse);

    static readonly grpc::Method<global::Bosdyn.Api.RetainLeaseRequest, global::Bosdyn.Api.RetainLeaseResponse> __Method_RetainLease = new grpc::Method<global::Bosdyn.Api.RetainLeaseRequest, global::Bosdyn.Api.RetainLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RetainLease",
        __Marshaller_bosdyn_api_RetainLeaseRequest,
        __Marshaller_bosdyn_api_RetainLeaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.LeaseServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LeaseService</summary>
    [grpc::BindServiceMethod(typeof(LeaseService), "BindService")]
    public abstract partial class LeaseServiceBase
    {
      /// <summary>
      /// Acquire a lease to a specific resource if the resource is available.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.AcquireLeaseResponse> AcquireLease(global::Bosdyn.Api.AcquireLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Take a lease for a specific resource even if another client has a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.TakeLeaseResponse> TakeLease(global::Bosdyn.Api.TakeLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return a lease to the LeaseService.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ReturnLeaseResponse> ReturnLease(global::Bosdyn.Api.ReturnLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List state of all leases managed by the LeaseService.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListLeasesResponse> ListLeases(global::Bosdyn.Api.ListLeasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retain possession of a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.RetainLeaseResponse> RetainLease(global::Bosdyn.Api.RetainLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LeaseService</summary>
    public partial class LeaseServiceClient : grpc::ClientBase<LeaseServiceClient>
    {
      /// <summary>Creates a new client for LeaseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LeaseServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LeaseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LeaseServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LeaseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LeaseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Acquire a lease to a specific resource if the resource is available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.AcquireLeaseResponse AcquireLease(global::Bosdyn.Api.AcquireLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acquire a lease to a specific resource if the resource is available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.AcquireLeaseResponse AcquireLease(global::Bosdyn.Api.AcquireLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcquireLease, null, options, request);
      }
      /// <summary>
      /// Acquire a lease to a specific resource if the resource is available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.AcquireLeaseResponse> AcquireLeaseAsync(global::Bosdyn.Api.AcquireLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acquire a lease to a specific resource if the resource is available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.AcquireLeaseResponse> AcquireLeaseAsync(global::Bosdyn.Api.AcquireLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcquireLease, null, options, request);
      }
      /// <summary>
      /// Take a lease for a specific resource even if another client has a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TakeLeaseResponse TakeLease(global::Bosdyn.Api.TakeLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TakeLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Take a lease for a specific resource even if another client has a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.TakeLeaseResponse TakeLease(global::Bosdyn.Api.TakeLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TakeLease, null, options, request);
      }
      /// <summary>
      /// Take a lease for a specific resource even if another client has a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TakeLeaseResponse> TakeLeaseAsync(global::Bosdyn.Api.TakeLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TakeLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Take a lease for a specific resource even if another client has a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.TakeLeaseResponse> TakeLeaseAsync(global::Bosdyn.Api.TakeLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TakeLease, null, options, request);
      }
      /// <summary>
      /// Return a lease to the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ReturnLeaseResponse ReturnLease(global::Bosdyn.Api.ReturnLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a lease to the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ReturnLeaseResponse ReturnLease(global::Bosdyn.Api.ReturnLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReturnLease, null, options, request);
      }
      /// <summary>
      /// Return a lease to the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ReturnLeaseResponse> ReturnLeaseAsync(global::Bosdyn.Api.ReturnLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a lease to the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ReturnLeaseResponse> ReturnLeaseAsync(global::Bosdyn.Api.ReturnLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReturnLease, null, options, request);
      }
      /// <summary>
      /// List state of all leases managed by the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListLeasesResponse ListLeases(global::Bosdyn.Api.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List state of all leases managed by the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListLeasesResponse ListLeases(global::Bosdyn.Api.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// List state of all leases managed by the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListLeasesResponse> ListLeasesAsync(global::Bosdyn.Api.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List state of all leases managed by the LeaseService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListLeasesResponse> ListLeasesAsync(global::Bosdyn.Api.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// Retain possession of a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RetainLeaseResponse RetainLease(global::Bosdyn.Api.RetainLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RetainLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retain possession of a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.RetainLeaseResponse RetainLease(global::Bosdyn.Api.RetainLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RetainLease, null, options, request);
      }
      /// <summary>
      /// Retain possession of a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RetainLeaseResponse> RetainLeaseAsync(global::Bosdyn.Api.RetainLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RetainLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retain possession of a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.RetainLeaseResponse> RetainLeaseAsync(global::Bosdyn.Api.RetainLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RetainLease, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LeaseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LeaseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LeaseServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AcquireLease, serviceImpl.AcquireLease)
          .AddMethod(__Method_TakeLease, serviceImpl.TakeLease)
          .AddMethod(__Method_ReturnLease, serviceImpl.ReturnLease)
          .AddMethod(__Method_ListLeases, serviceImpl.ListLeases)
          .AddMethod(__Method_RetainLease, serviceImpl.RetainLease).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LeaseServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AcquireLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.AcquireLeaseRequest, global::Bosdyn.Api.AcquireLeaseResponse>(serviceImpl.AcquireLease));
      serviceBinder.AddMethod(__Method_TakeLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.TakeLeaseRequest, global::Bosdyn.Api.TakeLeaseResponse>(serviceImpl.TakeLease));
      serviceBinder.AddMethod(__Method_ReturnLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ReturnLeaseRequest, global::Bosdyn.Api.ReturnLeaseResponse>(serviceImpl.ReturnLease));
      serviceBinder.AddMethod(__Method_ListLeases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListLeasesRequest, global::Bosdyn.Api.ListLeasesResponse>(serviceImpl.ListLeases));
      serviceBinder.AddMethod(__Method_RetainLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.RetainLeaseRequest, global::Bosdyn.Api.RetainLeaseResponse>(serviceImpl.RetainLease));
    }

  }
}
#endregion
