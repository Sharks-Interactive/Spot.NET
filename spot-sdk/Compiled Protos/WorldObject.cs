// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/world_object.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/world_object.proto</summary>
  public static partial class WorldObjectReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/world_object.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldObjectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90b3Mvd29ybGRfb2JqZWN0LnByb3RvEgpib3NkeW4uYXBpGhRQcm90",
            "b3MvZG9ja2luZy5wcm90bxoVUHJvdG9zL2dlb21ldHJ5LnByb3RvGhNQcm90",
            "b3MvaGVhZGVyLnByb3RvGhJQcm90b3MvaW1hZ2UucHJvdG8aHFByb3Rvcy9z",
            "cGFyc2VfZmVhdHVyZXMucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3Rh",
            "bXAucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8iqwQKC1dvcmxk",
            "T2JqZWN0EgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSNAoQYWNxdWlzaXRp",
            "b25fdGltZRgeIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOgoT",
            "dHJhbnNmb3Jtc19zbmFwc2hvdBgfIAEoCzIdLmJvc2R5bi5hcGkuRnJhbWVU",
            "cmVlU25hcHNob3QSOwoTZHJhd2FibGVfcHJvcGVydGllcxgFIAMoCzIeLmJv",
            "c2R5bi5hcGkuRHJhd2FibGVQcm9wZXJ0aWVzEjsKE2FwcmlsdGFnX3Byb3Bl",
            "cnRpZXMYBiABKAsyHi5ib3NkeW4uYXBpLkFwcmlsVGFnUHJvcGVydGllcxI1",
            "ChBpbWFnZV9wcm9wZXJ0aWVzGAkgASgLMhsuYm9zZHluLmFwaS5JbWFnZVBy",
            "b3BlcnRpZXMSMwoPZG9ja19wcm9wZXJ0aWVzGAogASgLMhouYm9zZHluLmFw",
            "aS5Eb2NrUHJvcGVydGllcxIxCg5yYXlfcHJvcGVydGllcxgLIAEoCzIZLmJv",
            "c2R5bi5hcGkuUmF5UHJvcGVydGllcxJCChdib3VuZGluZ19ib3hfcHJvcGVy",
            "dGllcxgMIAEoCzIhLmJvc2R5bi5hcGkuQm91bmRpbmdCb3hQcm9wZXJ0aWVz",
            "EjMKFWFkZGl0aW9uYWxfcHJvcGVydGllcxhkIAEoCzIULmdvb2dsZS5wcm90",
            "b2J1Zi5BbnkiqwEKFkxpc3RXb3JsZE9iamVjdFJlcXVlc3QSKQoGaGVhZGVy",
            "GAEgASgLMhkuYm9zZHluLmFwaS5SZXF1ZXN0SGVhZGVyEjAKC29iamVjdF90",
            "eXBlGAIgAygOMhsuYm9zZHluLmFwaS5Xb3JsZE9iamVjdFR5cGUSNAoQdGlt",
            "ZXN0YW1wX2ZpbHRlchgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXAidQoXTGlzdFdvcmxkT2JqZWN0UmVzcG9uc2USKgoGaGVhZGVyGAEgASgL",
            "MhouYm9zZHluLmFwaS5SZXNwb25zZUhlYWRlchIuCg13b3JsZF9vYmplY3Rz",
            "GAIgAygLMhcuYm9zZHluLmFwaS5Xb3JsZE9iamVjdCLMAgoYTXV0YXRlV29y",
            "bGRPYmplY3RSZXF1ZXN0EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGku",
            "UmVxdWVzdEhlYWRlchI/CghtdXRhdGlvbhgCIAEoCzItLmJvc2R5bi5hcGku",
            "TXV0YXRlV29ybGRPYmplY3RSZXF1ZXN0Lk11dGF0aW9uGnAKCE11dGF0aW9u",
            "EjsKBmFjdGlvbhgBIAEoDjIrLmJvc2R5bi5hcGkuTXV0YXRlV29ybGRPYmpl",
            "Y3RSZXF1ZXN0LkFjdGlvbhInCgZvYmplY3QYAiABKAsyFy5ib3NkeW4uYXBp",
            "LldvcmxkT2JqZWN0IlIKBkFjdGlvbhISCg5BQ1RJT05fVU5LTk9XThAAEg4K",
            "CkFDVElPTl9BREQQARIRCg1BQ1RJT05fQ0hBTkdFEAISEQoNQUNUSU9OX0RF",
            "TEVURRADIocCChlNdXRhdGVXb3JsZE9iamVjdFJlc3BvbnNlEioKBmhlYWRl",
            "chgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VIZWFkZXISPAoGc3RhdHVz",
            "GAIgASgOMiwuYm9zZHluLmFwaS5NdXRhdGVXb3JsZE9iamVjdFJlc3BvbnNl",
            "LlN0YXR1cxIZChFtdXRhdGVkX29iamVjdF9pZBgEIAEoBSJlCgZTdGF0dXMS",
            "EgoOU1RBVFVTX1VOS05PV04QABINCglTVEFUVVNfT0sQARIeChpTVEFUVVNf",
            "SU5WQUxJRF9NVVRBVElPTl9JRBACEhgKFFNUQVRVU19OT19QRVJNSVNTSU9O",
            "EAMilgIKD0ltYWdlUHJvcGVydGllcxIVCg1jYW1lcmFfc291cmNlGAEgASgJ",
            "EioKC2Nvb3JkaW5hdGVzGAIgASgLMhMuYm9zZHluLmFwaS5Qb2x5Z29uSAAS",
            "LAoJa2V5cG9pbnRzGAQgASgLMhcuYm9zZHluLmFwaS5LZXlwb2ludFNldEgA",
            "Ei0KDGltYWdlX3NvdXJjZRgFIAEoCzIXLmJvc2R5bi5hcGkuSW1hZ2VTb3Vy",
            "Y2USLwoNaW1hZ2VfY2FwdHVyZRgGIAEoCzIYLmJvc2R5bi5hcGkuSW1hZ2VD",
            "YXB0dXJlEiQKHGZyYW1lX25hbWVfaW1hZ2VfY29vcmRpbmF0ZXMYAyABKAlC",
            "DAoKaW1hZ2VfZGF0YSJ7Cg5Eb2NrUHJvcGVydGllcxIPCgdkb2NrX2lkGAEg",
            "ASgNEioKBHR5cGUYAiABKA4yHC5ib3NkeW4uYXBpLmRvY2tpbmcuRG9ja1R5",
            "cGUSFwoPZnJhbWVfbmFtZV9kb2NrGAMgASgJEhMKC3VuYXZhaWxhYmxlGAQg",
            "ASgIIqAEChJBcHJpbFRhZ1Byb3BlcnRpZXMSDgoGdGFnX2lkGAEgASgFEiQK",
            "CmRpbWVuc2lvbnMYAiABKAsyEC5ib3NkeW4uYXBpLlZlYzISGwoTZnJhbWVf",
            "bmFtZV9maWR1Y2lhbBgDIAEoCRJPChRmaWR1Y2lhbF9wb3NlX3N0YXR1cxgI",
            "IAEoDjIxLmJvc2R5bi5hcGkuQXByaWxUYWdQcm9wZXJ0aWVzLkFwcmlsVGFn",
            "UG9zZVN0YXR1cxIkChxmcmFtZV9uYW1lX2ZpZHVjaWFsX2ZpbHRlcmVkGAQg",
            "ASgJElgKHWZpZHVjaWFsX2ZpbHRlcmVkX3Bvc2Vfc3RhdHVzGAkgASgOMjEu",
            "Ym9zZHluLmFwaS5BcHJpbFRhZ1Byb3BlcnRpZXMuQXByaWxUYWdQb3NlU3Rh",
            "dHVzEhkKEWZyYW1lX25hbWVfY2FtZXJhGAcgASgJEjcKFGRldGVjdGlvbl9j",
            "b3ZhcmlhbmNlGAUgASgLMhkuYm9zZHluLmFwaS5TRTNDb3ZhcmlhbmNlEiwK",
            "JGRldGVjdGlvbl9jb3ZhcmlhbmNlX3JlZmVyZW5jZV9mcmFtZRgGIAEoCSJk",
            "ChJBcHJpbFRhZ1Bvc2VTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABINCglT",
            "VEFUVVNfT0sQARIUChBTVEFUVVNfQU1CSUdVT1VTEAISFQoRU1RBVFVTX0hJ",
            "R0hfRVJST1IQAyI8Cg1SYXlQcm9wZXJ0aWVzEhwKA3JheRgBIAEoCzIPLmJv",
            "c2R5bi5hcGkuUmF5Eg0KBWZyYW1lGAIgASgJIlEKFUJvdW5kaW5nQm94UHJv",
            "cGVydGllcxIpCg9zaXplX2V3cnRfZnJhbWUYASABKAsyEC5ib3NkeW4uYXBp",
            "LlZlYzMSDQoFZnJhbWUYAiABKAkiuwQKEkRyYXdhYmxlUHJvcGVydGllcxIz",
            "CgVjb2xvchgBIAEoCzIkLmJvc2R5bi5hcGkuRHJhd2FibGVQcm9wZXJ0aWVz",
            "LkNvbG9yEg0KBWxhYmVsGAIgASgJEhEKCXdpcmVmcmFtZRgDIAEoCBIqCgVm",
            "cmFtZRgEIAEoCzIZLmJvc2R5bi5hcGkuRHJhd2FibGVGcmFtZUgAEiwKBnNw",
            "aGVyZRgFIAEoCzIaLmJvc2R5bi5hcGkuRHJhd2FibGVTcGhlcmVIABImCgNi",
            "b3gYBiABKAsyFy5ib3NkeW4uYXBpLkRyYXdhYmxlQm94SAASKgoFYXJyb3cY",
            "ByABKAsyGS5ib3NkeW4uYXBpLkRyYXdhYmxlQXJyb3dIABIuCgdjYXBzdWxl",
            "GAggASgLMhsuYm9zZHluLmFwaS5EcmF3YWJsZUNhcHN1bGVIABIwCghjeWxp",
            "bmRlchgJIAEoCzIcLmJvc2R5bi5hcGkuRHJhd2FibGVDeWxpbmRlckgAEjIK",
            "CWxpbmVzdHJpcBgKIAEoCzIdLmJvc2R5bi5hcGkuRHJhd2FibGVMaW5lU3Ry",
            "aXBIABIsCgZwb2ludHMYCyABKAsyGi5ib3NkeW4uYXBpLkRyYXdhYmxlUG9p",
            "bnRzSAASGwoTZnJhbWVfbmFtZV9kcmF3YWJsZRgMIAEoCRozCgVDb2xvchIJ",
            "CgFyGAEgASgFEgkKAWcYAiABKAUSCQoBYhgDIAEoBRIJCgFhGAQgASgBQgoK",
            "CGRyYXdhYmxlIjsKDURyYXdhYmxlRnJhbWUSFAoMYXJyb3dfbGVuZ3RoGAEg",
            "ASgBEhQKDGFycm93X3JhZGl1cxgCIAEoASIgCg5EcmF3YWJsZVNwaGVyZRIO",
            "CgZyYWRpdXMYASABKAEiLQoLRHJhd2FibGVCb3gSHgoEc2l6ZRgBIAEoCzIQ",
            "LmJvc2R5bi5hcGkuVmVjMyJECg1EcmF3YWJsZUFycm93EiMKCWRpcmVjdGlv",
            "bhgBIAEoCzIQLmJvc2R5bi5hcGkuVmVjMxIOCgZyYWRpdXMYAiABKAEiRgoP",
            "RHJhd2FibGVDYXBzdWxlEiMKCWRpcmVjdGlvbhgBIAEoCzIQLmJvc2R5bi5h",
            "cGkuVmVjMxIOCgZyYWRpdXMYAiABKAEiRwoQRHJhd2FibGVDeWxpbmRlchIj",
            "CglkaXJlY3Rpb24YASABKAsyEC5ib3NkeW4uYXBpLlZlYzMSDgoGcmFkaXVz",
            "GAIgASgBIjUKEURyYXdhYmxlTGluZVN0cmlwEiAKBnBvaW50cxgBIAEoCzIQ",
            "LmJvc2R5bi5hcGkuVmVjMyIyCg5EcmF3YWJsZVBvaW50cxIgCgZwb2ludHMY",
            "ASADKAsyEC5ib3NkeW4uYXBpLlZlYzMqnAEKD1dvcmxkT2JqZWN0VHlwZRIY",
            "ChRXT1JMRF9PQkpFQ1RfVU5LTk9XThAAEhkKFVdPUkxEX09CSkVDVF9EUkFX",
            "QUJMRRABEhkKFVdPUkxEX09CSkVDVF9BUFJJTFRBRxACEiIKHldPUkxEX09C",
            "SkVDVF9JTUFHRV9DT09SRElOQVRFUxAFEhUKEVdPUkxEX09CSkVDVF9ET0NL",
            "EAZCEkIQV29ybGRPYmplY3RQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.Docking.DockingReflection.Descriptor, global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.ImageReflection.Descriptor, global::Bosdyn.Api.SparseFeaturesReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bosdyn.Api.WorldObjectType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.WorldObject), global::Bosdyn.Api.WorldObject.Parser, new[]{ "Id", "Name", "AcquisitionTime", "TransformsSnapshot", "DrawableProperties", "ApriltagProperties", "ImageProperties", "DockProperties", "RayProperties", "BoundingBoxProperties", "AdditionalProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListWorldObjectRequest), global::Bosdyn.Api.ListWorldObjectRequest.Parser, new[]{ "Header", "ObjectType", "TimestampFilter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ListWorldObjectResponse), global::Bosdyn.Api.ListWorldObjectResponse.Parser, new[]{ "Header", "WorldObjects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MutateWorldObjectRequest), global::Bosdyn.Api.MutateWorldObjectRequest.Parser, new[]{ "Header", "Mutation" }, null, new[]{ typeof(global::Bosdyn.Api.MutateWorldObjectRequest.Types.Action) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation), global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation.Parser, new[]{ "Action", "Object" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.MutateWorldObjectResponse), global::Bosdyn.Api.MutateWorldObjectResponse.Parser, new[]{ "Header", "Status", "MutatedObjectId" }, null, new[]{ typeof(global::Bosdyn.Api.MutateWorldObjectResponse.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ImageProperties), global::Bosdyn.Api.ImageProperties.Parser, new[]{ "CameraSource", "Coordinates", "Keypoints", "ImageSource", "ImageCapture", "FrameNameImageCoordinates" }, new[]{ "ImageData" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DockProperties), global::Bosdyn.Api.DockProperties.Parser, new[]{ "DockId", "Type", "FrameNameDock", "Unavailable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.AprilTagProperties), global::Bosdyn.Api.AprilTagProperties.Parser, new[]{ "TagId", "Dimensions", "FrameNameFiducial", "FiducialPoseStatus", "FrameNameFiducialFiltered", "FiducialFilteredPoseStatus", "FrameNameCamera", "DetectionCovariance", "DetectionCovarianceReferenceFrame" }, null, new[]{ typeof(global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RayProperties), global::Bosdyn.Api.RayProperties.Parser, new[]{ "Ray", "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.BoundingBoxProperties), global::Bosdyn.Api.BoundingBoxProperties.Parser, new[]{ "SizeEwrtFrame", "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableProperties), global::Bosdyn.Api.DrawableProperties.Parser, new[]{ "Color", "Label", "Wireframe", "Frame", "Sphere", "Box", "Arrow", "Capsule", "Cylinder", "Linestrip", "Points", "FrameNameDrawable" }, new[]{ "Drawable" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableProperties.Types.Color), global::Bosdyn.Api.DrawableProperties.Types.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableFrame), global::Bosdyn.Api.DrawableFrame.Parser, new[]{ "ArrowLength", "ArrowRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableSphere), global::Bosdyn.Api.DrawableSphere.Parser, new[]{ "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableBox), global::Bosdyn.Api.DrawableBox.Parser, new[]{ "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableArrow), global::Bosdyn.Api.DrawableArrow.Parser, new[]{ "Direction", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableCapsule), global::Bosdyn.Api.DrawableCapsule.Parser, new[]{ "Direction", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableCylinder), global::Bosdyn.Api.DrawableCylinder.Parser, new[]{ "Direction", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawableLineStrip), global::Bosdyn.Api.DrawableLineStrip.Parser, new[]{ "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.DrawablePoints), global::Bosdyn.Api.DrawablePoints.Parser, new[]{ "Points" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A type for the world object, which is associated with whatever properties the world object includes. This can
  /// be used to request specific kinds of objects; for example, a request for only fiducials.
  /// </summary>
  public enum WorldObjectType {
    [pbr::OriginalName("WORLD_OBJECT_UNKNOWN")] WorldObjectUnknown = 0,
    [pbr::OriginalName("WORLD_OBJECT_DRAWABLE")] WorldObjectDrawable = 1,
    [pbr::OriginalName("WORLD_OBJECT_APRILTAG")] WorldObjectApriltag = 2,
    [pbr::OriginalName("WORLD_OBJECT_IMAGE_COORDINATES")] WorldObjectImageCoordinates = 5,
    [pbr::OriginalName("WORLD_OBJECT_DOCK")] WorldObjectDock = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The world object message is used to describe different objects seen by a robot. It contains information
  /// about the properties of the object in addition to a unique id and the transform snapshot.
  /// The world object uses "properties" to describe different traits about the object, such as image coordinates
  /// associated with the camera the object was detected in. A world object can have multiple different properties
  /// that are all associated with the single object.
  /// </summary>
  public sealed partial class WorldObject : pb::IMessage<WorldObject> {
    private static readonly pb::MessageParser<WorldObject> _parser = new pb::MessageParser<WorldObject>(() => new WorldObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldObject(WorldObject other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      acquisitionTime_ = other.acquisitionTime_ != null ? other.acquisitionTime_.Clone() : null;
      transformsSnapshot_ = other.transformsSnapshot_ != null ? other.transformsSnapshot_.Clone() : null;
      drawableProperties_ = other.drawableProperties_.Clone();
      apriltagProperties_ = other.apriltagProperties_ != null ? other.apriltagProperties_.Clone() : null;
      imageProperties_ = other.imageProperties_ != null ? other.imageProperties_.Clone() : null;
      dockProperties_ = other.dockProperties_ != null ? other.dockProperties_.Clone() : null;
      rayProperties_ = other.rayProperties_ != null ? other.rayProperties_.Clone() : null;
      boundingBoxProperties_ = other.boundingBoxProperties_ != null ? other.boundingBoxProperties_.Clone() : null;
      additionalProperties_ = other.additionalProperties_ != null ? other.additionalProperties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldObject Clone() {
      return new WorldObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// Unique integer identifier that will be consistent for the duration of a robot's battery life
    /// The id is set internally by the world object service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// A human readable name for the world object. Note that this differs from any frame_name's associated
    /// with the object (since there can be multiple frames describing a single object).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acquisition_time" field.</summary>
    public const int AcquisitionTimeFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp acquisitionTime_;
    /// <summary>
    /// Time in robot time clock at which this object was most recently detected and valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AcquisitionTime {
      get { return acquisitionTime_; }
      set {
        acquisitionTime_ = value;
      }
    }

    /// <summary>Field number for the "transforms_snapshot" field.</summary>
    public const int TransformsSnapshotFieldNumber = 31;
    private global::Bosdyn.Api.FrameTreeSnapshot transformsSnapshot_;
    /// <summary>
    /// A tree-based collection of transformations, which will include the transformations to each
    /// of the returned world objects in addition to transformations to the common frames ("vision",
    /// "body", "odom"). All transforms within the snapshot are at the acquisition time of the world object.
    /// Note that each object's frame names are defined within the properties submessage. For example,
    /// the apriltag frame name is defined in the AprilTagProperties message as "frame_name_fiducial"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FrameTreeSnapshot TransformsSnapshot {
      get { return transformsSnapshot_; }
      set {
        transformsSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "drawable_properties" field.</summary>
    public const int DrawablePropertiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.DrawableProperties> _repeated_drawableProperties_codec
        = pb::FieldCodec.ForMessage(42, global::Bosdyn.Api.DrawableProperties.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.DrawableProperties> drawableProperties_ = new pbc::RepeatedField<global::Bosdyn.Api.DrawableProperties>();
    /// <summary>
    /// The drawable properties describe geometric shapes associated with an object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.DrawableProperties> DrawableProperties {
      get { return drawableProperties_; }
    }

    /// <summary>Field number for the "apriltag_properties" field.</summary>
    public const int ApriltagPropertiesFieldNumber = 6;
    private global::Bosdyn.Api.AprilTagProperties apriltagProperties_;
    /// <summary>
    /// The apriltag properties describe any fiducial identifying an object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AprilTagProperties ApriltagProperties {
      get { return apriltagProperties_; }
      set {
        apriltagProperties_ = value;
      }
    }

    /// <summary>Field number for the "image_properties" field.</summary>
    public const int ImagePropertiesFieldNumber = 9;
    private global::Bosdyn.Api.ImageProperties imageProperties_;
    /// <summary>
    /// The image properties describe any camera and image coordinates associated with an object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageProperties ImageProperties {
      get { return imageProperties_; }
      set {
        imageProperties_ = value;
      }
    }

    /// <summary>Field number for the "dock_properties" field.</summary>
    public const int DockPropertiesFieldNumber = 10;
    private global::Bosdyn.Api.DockProperties dockProperties_;
    /// <summary>
    /// Properties describing a dock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DockProperties DockProperties {
      get { return dockProperties_; }
      set {
        dockProperties_ = value;
      }
    }

    /// <summary>Field number for the "ray_properties" field.</summary>
    public const int RayPropertiesFieldNumber = 11;
    private global::Bosdyn.Api.RayProperties rayProperties_;
    /// <summary>
    /// A ray pointing at the object.  Useful in cases where position is unknown but direction is
    /// known.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RayProperties RayProperties {
      get { return rayProperties_; }
      set {
        rayProperties_ = value;
      }
    }

    /// <summary>Field number for the "bounding_box_properties" field.</summary>
    public const int BoundingBoxPropertiesFieldNumber = 12;
    private global::Bosdyn.Api.BoundingBoxProperties boundingBoxProperties_;
    /// <summary>
    /// Bounding box in the world, oriented at the location provided in the transforms_snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.BoundingBoxProperties BoundingBoxProperties {
      get { return boundingBoxProperties_; }
      set {
        boundingBoxProperties_ = value;
      }
    }

    /// <summary>Field number for the "additional_properties" field.</summary>
    public const int AdditionalPropertiesFieldNumber = 100;
    private global::Google.Protobuf.WellKnownTypes.Any additionalProperties_;
    /// <summary>
    /// An extra field for application-specific object properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any AdditionalProperties {
      get { return additionalProperties_; }
      set {
        additionalProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(AcquisitionTime, other.AcquisitionTime)) return false;
      if (!object.Equals(TransformsSnapshot, other.TransformsSnapshot)) return false;
      if(!drawableProperties_.Equals(other.drawableProperties_)) return false;
      if (!object.Equals(ApriltagProperties, other.ApriltagProperties)) return false;
      if (!object.Equals(ImageProperties, other.ImageProperties)) return false;
      if (!object.Equals(DockProperties, other.DockProperties)) return false;
      if (!object.Equals(RayProperties, other.RayProperties)) return false;
      if (!object.Equals(BoundingBoxProperties, other.BoundingBoxProperties)) return false;
      if (!object.Equals(AdditionalProperties, other.AdditionalProperties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (acquisitionTime_ != null) hash ^= AcquisitionTime.GetHashCode();
      if (transformsSnapshot_ != null) hash ^= TransformsSnapshot.GetHashCode();
      hash ^= drawableProperties_.GetHashCode();
      if (apriltagProperties_ != null) hash ^= ApriltagProperties.GetHashCode();
      if (imageProperties_ != null) hash ^= ImageProperties.GetHashCode();
      if (dockProperties_ != null) hash ^= DockProperties.GetHashCode();
      if (rayProperties_ != null) hash ^= RayProperties.GetHashCode();
      if (boundingBoxProperties_ != null) hash ^= BoundingBoxProperties.GetHashCode();
      if (additionalProperties_ != null) hash ^= AdditionalProperties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      drawableProperties_.WriteTo(output, _repeated_drawableProperties_codec);
      if (apriltagProperties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ApriltagProperties);
      }
      if (imageProperties_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ImageProperties);
      }
      if (dockProperties_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DockProperties);
      }
      if (rayProperties_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(RayProperties);
      }
      if (boundingBoxProperties_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BoundingBoxProperties);
      }
      if (acquisitionTime_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransformsSnapshot);
      }
      if (additionalProperties_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(AdditionalProperties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (acquisitionTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionTime);
      }
      if (transformsSnapshot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformsSnapshot);
      }
      size += drawableProperties_.CalculateSize(_repeated_drawableProperties_codec);
      if (apriltagProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApriltagProperties);
      }
      if (imageProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageProperties);
      }
      if (dockProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DockProperties);
      }
      if (rayProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RayProperties);
      }
      if (boundingBoxProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBoxProperties);
      }
      if (additionalProperties_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdditionalProperties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldObject other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.acquisitionTime_ != null) {
        if (acquisitionTime_ == null) {
          AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AcquisitionTime.MergeFrom(other.AcquisitionTime);
      }
      if (other.transformsSnapshot_ != null) {
        if (transformsSnapshot_ == null) {
          TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
        }
        TransformsSnapshot.MergeFrom(other.TransformsSnapshot);
      }
      drawableProperties_.Add(other.drawableProperties_);
      if (other.apriltagProperties_ != null) {
        if (apriltagProperties_ == null) {
          ApriltagProperties = new global::Bosdyn.Api.AprilTagProperties();
        }
        ApriltagProperties.MergeFrom(other.ApriltagProperties);
      }
      if (other.imageProperties_ != null) {
        if (imageProperties_ == null) {
          ImageProperties = new global::Bosdyn.Api.ImageProperties();
        }
        ImageProperties.MergeFrom(other.ImageProperties);
      }
      if (other.dockProperties_ != null) {
        if (dockProperties_ == null) {
          DockProperties = new global::Bosdyn.Api.DockProperties();
        }
        DockProperties.MergeFrom(other.DockProperties);
      }
      if (other.rayProperties_ != null) {
        if (rayProperties_ == null) {
          RayProperties = new global::Bosdyn.Api.RayProperties();
        }
        RayProperties.MergeFrom(other.RayProperties);
      }
      if (other.boundingBoxProperties_ != null) {
        if (boundingBoxProperties_ == null) {
          BoundingBoxProperties = new global::Bosdyn.Api.BoundingBoxProperties();
        }
        BoundingBoxProperties.MergeFrom(other.BoundingBoxProperties);
      }
      if (other.additionalProperties_ != null) {
        if (additionalProperties_ == null) {
          AdditionalProperties = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        AdditionalProperties.MergeFrom(other.AdditionalProperties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            drawableProperties_.AddEntriesFrom(input, _repeated_drawableProperties_codec);
            break;
          }
          case 50: {
            if (apriltagProperties_ == null) {
              ApriltagProperties = new global::Bosdyn.Api.AprilTagProperties();
            }
            input.ReadMessage(ApriltagProperties);
            break;
          }
          case 74: {
            if (imageProperties_ == null) {
              ImageProperties = new global::Bosdyn.Api.ImageProperties();
            }
            input.ReadMessage(ImageProperties);
            break;
          }
          case 82: {
            if (dockProperties_ == null) {
              DockProperties = new global::Bosdyn.Api.DockProperties();
            }
            input.ReadMessage(DockProperties);
            break;
          }
          case 90: {
            if (rayProperties_ == null) {
              RayProperties = new global::Bosdyn.Api.RayProperties();
            }
            input.ReadMessage(RayProperties);
            break;
          }
          case 98: {
            if (boundingBoxProperties_ == null) {
              BoundingBoxProperties = new global::Bosdyn.Api.BoundingBoxProperties();
            }
            input.ReadMessage(BoundingBoxProperties);
            break;
          }
          case 242: {
            if (acquisitionTime_ == null) {
              AcquisitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AcquisitionTime);
            break;
          }
          case 250: {
            if (transformsSnapshot_ == null) {
              TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
            }
            input.ReadMessage(TransformsSnapshot);
            break;
          }
          case 802: {
            if (additionalProperties_ == null) {
              AdditionalProperties = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(AdditionalProperties);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListWorldObject request message, which can optionally include filters for the object type or timestamp.
  /// </summary>
  public sealed partial class ListWorldObjectRequest : pb::IMessage<ListWorldObjectRequest> {
    private static readonly pb::MessageParser<ListWorldObjectRequest> _parser = new pb::MessageParser<ListWorldObjectRequest>(() => new ListWorldObjectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListWorldObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectRequest(ListWorldObjectRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      objectType_ = other.objectType_.Clone();
      timestampFilter_ = other.timestampFilter_ != null ? other.timestampFilter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectRequest Clone() {
      return new ListWorldObjectRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "object_type" field.</summary>
    public const int ObjectTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.WorldObjectType> _repeated_objectType_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Bosdyn.Api.WorldObjectType) x);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.WorldObjectType> objectType_ = new pbc::RepeatedField<global::Bosdyn.Api.WorldObjectType>();
    /// <summary>
    /// Optional filters to apply to the world object request
    /// Specific type of object; can request multiple different properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.WorldObjectType> ObjectType {
      get { return objectType_; }
    }

    /// <summary>Field number for the "timestamp_filter" field.</summary>
    public const int TimestampFilterFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestampFilter_;
    /// <summary>
    /// Timestamp to filter objects based on. The time should be in robot time
    /// All objects with header timestamps after (>) timestamp_filter will be returned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampFilter {
      get { return timestampFilter_; }
      set {
        timestampFilter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListWorldObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListWorldObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!objectType_.Equals(other.objectType_)) return false;
      if (!object.Equals(TimestampFilter, other.TimestampFilter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= objectType_.GetHashCode();
      if (timestampFilter_ != null) hash ^= TimestampFilter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      objectType_.WriteTo(output, _repeated_objectType_codec);
      if (timestampFilter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimestampFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += objectType_.CalculateSize(_repeated_objectType_codec);
      if (timestampFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampFilter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListWorldObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      objectType_.Add(other.objectType_);
      if (other.timestampFilter_ != null) {
        if (timestampFilter_ == null) {
          TimestampFilter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimestampFilter.MergeFrom(other.TimestampFilter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18:
          case 16: {
            objectType_.AddEntriesFrom(input, _repeated_objectType_codec);
            break;
          }
          case 26: {
            if (timestampFilter_ == null) {
              TimestampFilter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimestampFilter);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ListWorldObject response message, which contains all of the current world objects in the
  /// robot's perception scene.
  /// </summary>
  public sealed partial class ListWorldObjectResponse : pb::IMessage<ListWorldObjectResponse> {
    private static readonly pb::MessageParser<ListWorldObjectResponse> _parser = new pb::MessageParser<ListWorldObjectResponse>(() => new ListWorldObjectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListWorldObjectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectResponse(ListWorldObjectResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      worldObjects_ = other.worldObjects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListWorldObjectResponse Clone() {
      return new ListWorldObjectResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "world_objects" field.</summary>
    public const int WorldObjectsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.WorldObject> _repeated_worldObjects_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.WorldObject.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.WorldObject> worldObjects_ = new pbc::RepeatedField<global::Bosdyn.Api.WorldObject>();
    /// <summary>
    /// The currently perceived world objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.WorldObject> WorldObjects {
      get { return worldObjects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListWorldObjectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListWorldObjectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!worldObjects_.Equals(other.worldObjects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= worldObjects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      worldObjects_.WriteTo(output, _repeated_worldObjects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += worldObjects_.CalculateSize(_repeated_worldObjects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListWorldObjectResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      worldObjects_.Add(other.worldObjects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            worldObjects_.AddEntriesFrom(input, _repeated_worldObjects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The MutateWorldObject request message, which specifies the type of mutation and which object
  /// the mutation should be applied to.
  /// </summary>
  public sealed partial class MutateWorldObjectRequest : pb::IMessage<MutateWorldObjectRequest> {
    private static readonly pb::MessageParser<MutateWorldObjectRequest> _parser = new pb::MessageParser<MutateWorldObjectRequest>(() => new MutateWorldObjectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateWorldObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectRequest(MutateWorldObjectRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      mutation_ = other.mutation_ != null ? other.mutation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectRequest Clone() {
      return new MutateWorldObjectRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "mutation" field.</summary>
    public const int MutationFieldNumber = 2;
    private global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation mutation_;
    /// <summary>
    /// The mutation for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation Mutation {
      get { return mutation_; }
      set {
        mutation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateWorldObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateWorldObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Mutation, other.Mutation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (mutation_ != null) hash ^= Mutation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (mutation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mutation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (mutation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mutation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateWorldObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.mutation_ != null) {
        if (mutation_ == null) {
          Mutation = new global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation();
        }
        Mutation.MergeFrom(other.Mutation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (mutation_ == null) {
              Mutation = new global::Bosdyn.Api.MutateWorldObjectRequest.Types.Mutation();
            }
            input.ReadMessage(Mutation);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MutateWorldObjectRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        /// <summary>
        /// Invalid action.
        /// </summary>
        [pbr::OriginalName("ACTION_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Add a new object.
        /// </summary>
        [pbr::OriginalName("ACTION_ADD")] Add = 1,
        /// <summary>
        /// Change an existing objected (ID'd by integer ID number). This is
        /// only allowed to change objects added by the API-user, and not
        /// objects detected by Spot's perception system.
        /// </summary>
        [pbr::OriginalName("ACTION_CHANGE")] Change = 2,
        /// <summary>
        /// Delete the object, ID'd by integer ID number. This is
        /// only allowed to change objects added by the API-user, and not
        /// objects detected by Spot's perception system.
        /// </summary>
        [pbr::OriginalName("ACTION_DELETE")] Delete = 3,
      }

      public sealed partial class Mutation : pb::IMessage<Mutation> {
        private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.MutateWorldObjectRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation(Mutation other) : this() {
          action_ = other.action_;
          object_ = other.object_ != null ? other.object_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation Clone() {
          return new Mutation(this);
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 1;
        private global::Bosdyn.Api.MutateWorldObjectRequest.Types.Action action_ = 0;
        /// <summary>
        /// The action (add, change, or delete) to be applied to a world object.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.MutateWorldObjectRequest.Types.Action Action {
          get { return action_; }
          set {
            action_ = value;
          }
        }

        /// <summary>Field number for the "object" field.</summary>
        public const int ObjectFieldNumber = 2;
        private global::Bosdyn.Api.WorldObject object_;
        /// <summary>
        /// World object to be mutated.
        /// If an object is being changed/deleted, then the world object id must match a world
        /// object id known by the service.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.WorldObject Object {
          get { return object_; }
          set {
            object_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mutation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mutation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Action != other.Action) return false;
          if (!object.Equals(Object, other.Object)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Action != 0) hash ^= Action.GetHashCode();
          if (object_ != null) hash ^= Object.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Action != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Action);
          }
          if (object_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Object);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Action != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
          }
          if (object_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mutation other) {
          if (other == null) {
            return;
          }
          if (other.Action != 0) {
            Action = other.Action;
          }
          if (other.object_ != null) {
            if (object_ == null) {
              Object = new global::Bosdyn.Api.WorldObject();
            }
            Object.MergeFrom(other.Object);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Action = (global::Bosdyn.Api.MutateWorldObjectRequest.Types.Action) input.ReadEnum();
                break;
              }
              case 18: {
                if (object_ == null) {
                  Object = new global::Bosdyn.Api.WorldObject();
                }
                input.ReadMessage(Object);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The MutateWorldObject response message, which includes the world object id for the object that
  /// the mutation was applied to if the request succeeds.
  /// </summary>
  public sealed partial class MutateWorldObjectResponse : pb::IMessage<MutateWorldObjectResponse> {
    private static readonly pb::MessageParser<MutateWorldObjectResponse> _parser = new pb::MessageParser<MutateWorldObjectResponse>(() => new MutateWorldObjectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateWorldObjectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectResponse(MutateWorldObjectResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      status_ = other.status_;
      mutatedObjectId_ = other.mutatedObjectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateWorldObjectResponse Clone() {
      return new MutateWorldObjectResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Bosdyn.Api.MutateWorldObjectResponse.Types.Status status_ = 0;
    /// <summary>
    /// Return status for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.MutateWorldObjectResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "mutated_object_id" field.</summary>
    public const int MutatedObjectIdFieldNumber = 4;
    private int mutatedObjectId_;
    /// <summary>
    /// ID set by the world object service for the mutated object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MutatedObjectId {
      get { return mutatedObjectId_; }
      set {
        mutatedObjectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateWorldObjectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateWorldObjectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Status != other.Status) return false;
      if (MutatedObjectId != other.MutatedObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MutatedObjectId != 0) hash ^= MutatedObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (MutatedObjectId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MutatedObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (MutatedObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MutatedObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateWorldObjectResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MutatedObjectId != 0) {
        MutatedObjectId = other.MutatedObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Status = (global::Bosdyn.Api.MutateWorldObjectResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 32: {
            MutatedObjectId = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MutateWorldObjectResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// Status of request is unknown. Check the status code of the response header.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Request was accepted; GetObjectListResponse must still be checked to verify the changes.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] Ok = 1,
        /// <summary>
        /// The mutation object's ID is unknown such that the service could not recognize this object.
        /// This error applies to the CHANGE and DELETE actions, since it must identify the object by
        /// it's id number given by the service.
        /// </summary>
        [pbr::OriginalName("STATUS_INVALID_MUTATION_ID")] InvalidMutationId = 2,
        /// <summary>
        /// The mutation request is not allowed because it is attempting to change or delete an object
        /// detected by Spot's perception system.
        /// </summary>
        [pbr::OriginalName("STATUS_NO_PERMISSION")] NoPermission = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///  World object properties describing image coordinates associated with an object or scene.
  /// </summary>
  public sealed partial class ImageProperties : pb::IMessage<ImageProperties> {
    private static readonly pb::MessageParser<ImageProperties> _parser = new pb::MessageParser<ImageProperties>(() => new ImageProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties(ImageProperties other) : this() {
      cameraSource_ = other.cameraSource_;
      imageSource_ = other.imageSource_ != null ? other.imageSource_.Clone() : null;
      imageCapture_ = other.imageCapture_ != null ? other.imageCapture_.Clone() : null;
      frameNameImageCoordinates_ = other.frameNameImageCoordinates_;
      switch (other.ImageDataCase) {
        case ImageDataOneofCase.Coordinates:
          Coordinates = other.Coordinates.Clone();
          break;
        case ImageDataOneofCase.Keypoints:
          Keypoints = other.Keypoints.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties Clone() {
      return new ImageProperties(this);
    }

    /// <summary>Field number for the "camera_source" field.</summary>
    public const int CameraSourceFieldNumber = 1;
    private string cameraSource_ = "";
    /// <summary>
    /// Camera Source of such as "back", "frontleft", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraSource {
      get { return cameraSource_; }
      set {
        cameraSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coordinates" field.</summary>
    public const int CoordinatesFieldNumber = 2;
    /// <summary>
    /// Image coordinates of the corners of a polygon (pixels of x[row], y[col]) in either
    /// clockwise/counter clockwise order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Polygon Coordinates {
      get { return imageDataCase_ == ImageDataOneofCase.Coordinates ? (global::Bosdyn.Api.Polygon) imageData_ : null; }
      set {
        imageData_ = value;
        imageDataCase_ = value == null ? ImageDataOneofCase.None : ImageDataOneofCase.Coordinates;
      }
    }

    /// <summary>Field number for the "keypoints" field.</summary>
    public const int KeypointsFieldNumber = 4;
    /// <summary>
    /// A set of keypoints and their associated metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.KeypointSet Keypoints {
      get { return imageDataCase_ == ImageDataOneofCase.Keypoints ? (global::Bosdyn.Api.KeypointSet) imageData_ : null; }
      set {
        imageData_ = value;
        imageDataCase_ = value == null ? ImageDataOneofCase.None : ImageDataOneofCase.Keypoints;
      }
    }

    /// <summary>Field number for the "image_source" field.</summary>
    public const int ImageSourceFieldNumber = 5;
    private global::Bosdyn.Api.ImageSource imageSource_;
    /// <summary>
    /// Camera parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageSource ImageSource {
      get { return imageSource_; }
      set {
        imageSource_ = value;
      }
    }

    /// <summary>Field number for the "image_capture" field.</summary>
    public const int ImageCaptureFieldNumber = 6;
    private global::Bosdyn.Api.ImageCapture imageCapture_;
    /// <summary>
    /// Image that produced the data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ImageCapture ImageCapture {
      get { return imageCapture_; }
      set {
        imageCapture_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_image_coordinates" field.</summary>
    public const int FrameNameImageCoordinatesFieldNumber = 3;
    private string frameNameImageCoordinates_ = "";
    /// <summary>
    /// Frame name for the object described by image coordinates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameImageCoordinates {
      get { return frameNameImageCoordinates_; }
      set {
        frameNameImageCoordinates_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object imageData_;
    /// <summary>Enum of possible cases for the "image_data" oneof.</summary>
    public enum ImageDataOneofCase {
      None = 0,
      Coordinates = 2,
      Keypoints = 4,
    }
    private ImageDataOneofCase imageDataCase_ = ImageDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataOneofCase ImageDataCase {
      get { return imageDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageData() {
      imageDataCase_ = ImageDataOneofCase.None;
      imageData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CameraSource != other.CameraSource) return false;
      if (!object.Equals(Coordinates, other.Coordinates)) return false;
      if (!object.Equals(Keypoints, other.Keypoints)) return false;
      if (!object.Equals(ImageSource, other.ImageSource)) return false;
      if (!object.Equals(ImageCapture, other.ImageCapture)) return false;
      if (FrameNameImageCoordinates != other.FrameNameImageCoordinates) return false;
      if (ImageDataCase != other.ImageDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CameraSource.Length != 0) hash ^= CameraSource.GetHashCode();
      if (imageDataCase_ == ImageDataOneofCase.Coordinates) hash ^= Coordinates.GetHashCode();
      if (imageDataCase_ == ImageDataOneofCase.Keypoints) hash ^= Keypoints.GetHashCode();
      if (imageSource_ != null) hash ^= ImageSource.GetHashCode();
      if (imageCapture_ != null) hash ^= ImageCapture.GetHashCode();
      if (FrameNameImageCoordinates.Length != 0) hash ^= FrameNameImageCoordinates.GetHashCode();
      hash ^= (int) imageDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CameraSource.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CameraSource);
      }
      if (imageDataCase_ == ImageDataOneofCase.Coordinates) {
        output.WriteRawTag(18);
        output.WriteMessage(Coordinates);
      }
      if (FrameNameImageCoordinates.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrameNameImageCoordinates);
      }
      if (imageDataCase_ == ImageDataOneofCase.Keypoints) {
        output.WriteRawTag(34);
        output.WriteMessage(Keypoints);
      }
      if (imageSource_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ImageSource);
      }
      if (imageCapture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ImageCapture);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CameraSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraSource);
      }
      if (imageDataCase_ == ImageDataOneofCase.Coordinates) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coordinates);
      }
      if (imageDataCase_ == ImageDataOneofCase.Keypoints) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keypoints);
      }
      if (imageSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageSource);
      }
      if (imageCapture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageCapture);
      }
      if (FrameNameImageCoordinates.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameImageCoordinates);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageProperties other) {
      if (other == null) {
        return;
      }
      if (other.CameraSource.Length != 0) {
        CameraSource = other.CameraSource;
      }
      if (other.imageSource_ != null) {
        if (imageSource_ == null) {
          ImageSource = new global::Bosdyn.Api.ImageSource();
        }
        ImageSource.MergeFrom(other.ImageSource);
      }
      if (other.imageCapture_ != null) {
        if (imageCapture_ == null) {
          ImageCapture = new global::Bosdyn.Api.ImageCapture();
        }
        ImageCapture.MergeFrom(other.ImageCapture);
      }
      if (other.FrameNameImageCoordinates.Length != 0) {
        FrameNameImageCoordinates = other.FrameNameImageCoordinates;
      }
      switch (other.ImageDataCase) {
        case ImageDataOneofCase.Coordinates:
          if (Coordinates == null) {
            Coordinates = new global::Bosdyn.Api.Polygon();
          }
          Coordinates.MergeFrom(other.Coordinates);
          break;
        case ImageDataOneofCase.Keypoints:
          if (Keypoints == null) {
            Keypoints = new global::Bosdyn.Api.KeypointSet();
          }
          Keypoints.MergeFrom(other.Keypoints);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CameraSource = input.ReadString();
            break;
          }
          case 18: {
            global::Bosdyn.Api.Polygon subBuilder = new global::Bosdyn.Api.Polygon();
            if (imageDataCase_ == ImageDataOneofCase.Coordinates) {
              subBuilder.MergeFrom(Coordinates);
            }
            input.ReadMessage(subBuilder);
            Coordinates = subBuilder;
            break;
          }
          case 26: {
            FrameNameImageCoordinates = input.ReadString();
            break;
          }
          case 34: {
            global::Bosdyn.Api.KeypointSet subBuilder = new global::Bosdyn.Api.KeypointSet();
            if (imageDataCase_ == ImageDataOneofCase.Keypoints) {
              subBuilder.MergeFrom(Keypoints);
            }
            input.ReadMessage(subBuilder);
            Keypoints = subBuilder;
            break;
          }
          case 42: {
            if (imageSource_ == null) {
              ImageSource = new global::Bosdyn.Api.ImageSource();
            }
            input.ReadMessage(ImageSource);
            break;
          }
          case 50: {
            if (imageCapture_ == null) {
              ImageCapture = new global::Bosdyn.Api.ImageCapture();
            }
            input.ReadMessage(ImageCapture);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// World object properties describing a dock
  /// </summary>
  public sealed partial class DockProperties : pb::IMessage<DockProperties> {
    private static readonly pb::MessageParser<DockProperties> _parser = new pb::MessageParser<DockProperties>(() => new DockProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockProperties(DockProperties other) : this() {
      dockId_ = other.dockId_;
      type_ = other.type_;
      frameNameDock_ = other.frameNameDock_;
      unavailable_ = other.unavailable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockProperties Clone() {
      return new DockProperties(this);
    }

    /// <summary>Field number for the "dock_id" field.</summary>
    public const int DockIdFieldNumber = 1;
    private uint dockId_;
    /// <summary>
    /// Consistent id associated with a given dock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DockId {
      get { return dockId_; }
      set {
        dockId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bosdyn.Api.Docking.DockType type_ = 0;
    /// <summary>
    /// Type of dock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Docking.DockType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_dock" field.</summary>
    public const int FrameNameDockFieldNumber = 3;
    private string frameNameDock_ = "";
    /// <summary>
    /// The frame name for the location of dock origin. This will be included in the transform snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameDock {
      get { return frameNameDock_; }
      set {
        frameNameDock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unavailable" field.</summary>
    public const int UnavailableFieldNumber = 4;
    private bool unavailable_;
    /// <summary>
    /// Availability if the dock can be used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unavailable {
      get { return unavailable_; }
      set {
        unavailable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DockId != other.DockId) return false;
      if (Type != other.Type) return false;
      if (FrameNameDock != other.FrameNameDock) return false;
      if (Unavailable != other.Unavailable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DockId != 0) hash ^= DockId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FrameNameDock.Length != 0) hash ^= FrameNameDock.GetHashCode();
      if (Unavailable != false) hash ^= Unavailable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DockId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DockId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (FrameNameDock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrameNameDock);
      }
      if (Unavailable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Unavailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DockId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FrameNameDock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameDock);
      }
      if (Unavailable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockProperties other) {
      if (other == null) {
        return;
      }
      if (other.DockId != 0) {
        DockId = other.DockId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FrameNameDock.Length != 0) {
        FrameNameDock = other.FrameNameDock;
      }
      if (other.Unavailable != false) {
        Unavailable = other.Unavailable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DockId = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::Bosdyn.Api.Docking.DockType) input.ReadEnum();
            break;
          }
          case 26: {
            FrameNameDock = input.ReadString();
            break;
          }
          case 32: {
            Unavailable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  World object properties describing a fiducial object.
  /// </summary>
  public sealed partial class AprilTagProperties : pb::IMessage<AprilTagProperties> {
    private static readonly pb::MessageParser<AprilTagProperties> _parser = new pb::MessageParser<AprilTagProperties>(() => new AprilTagProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AprilTagProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AprilTagProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AprilTagProperties(AprilTagProperties other) : this() {
      tagId_ = other.tagId_;
      dimensions_ = other.dimensions_ != null ? other.dimensions_.Clone() : null;
      frameNameFiducial_ = other.frameNameFiducial_;
      fiducialPoseStatus_ = other.fiducialPoseStatus_;
      frameNameFiducialFiltered_ = other.frameNameFiducialFiltered_;
      fiducialFilteredPoseStatus_ = other.fiducialFilteredPoseStatus_;
      frameNameCamera_ = other.frameNameCamera_;
      detectionCovariance_ = other.detectionCovariance_ != null ? other.detectionCovariance_.Clone() : null;
      detectionCovarianceReferenceFrame_ = other.detectionCovarianceReferenceFrame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AprilTagProperties Clone() {
      return new AprilTagProperties(this);
    }

    /// <summary>Field number for the "tag_id" field.</summary>
    public const int TagIdFieldNumber = 1;
    private int tagId_;
    /// <summary>
    /// Consistent integer id associated with a given apriltag. April Tag detections will be from the
    /// tag family 36h11.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagId {
      get { return tagId_; }
      set {
        tagId_ = value;
      }
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 2;
    private global::Bosdyn.Api.Vec2 dimensions_;
    /// <summary>
    /// Apriltag size in meters, where x is the row/width length and y is the
    /// height/col length of the tag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec2 Dimensions {
      get { return dimensions_; }
      set {
        dimensions_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_fiducial" field.</summary>
    public const int FrameNameFiducialFieldNumber = 3;
    private string frameNameFiducial_ = "";
    /// <summary>
    /// The frame name for the raw version of this fiducial. This will be included in the transform snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameFiducial {
      get { return frameNameFiducial_; }
      set {
        frameNameFiducial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fiducial_pose_status" field.</summary>
    public const int FiducialPoseStatusFieldNumber = 8;
    private global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus fiducialPoseStatus_ = 0;
    /// <summary>
    /// Status of the pose estimation of the unfiltered fiducial frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus FiducialPoseStatus {
      get { return fiducialPoseStatus_; }
      set {
        fiducialPoseStatus_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_fiducial_filtered" field.</summary>
    public const int FrameNameFiducialFilteredFieldNumber = 4;
    private string frameNameFiducialFiltered_ = "";
    /// <summary>
    /// The frame name for the filtered version of this fiducial. This will be included in the transform snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameFiducialFiltered {
      get { return frameNameFiducialFiltered_; }
      set {
        frameNameFiducialFiltered_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fiducial_filtered_pose_status" field.</summary>
    public const int FiducialFilteredPoseStatusFieldNumber = 9;
    private global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus fiducialFilteredPoseStatus_ = 0;
    /// <summary>
    /// Status of the pose estimation of the filtered fiducial frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus FiducialFilteredPoseStatus {
      get { return fiducialFilteredPoseStatus_; }
      set {
        fiducialFilteredPoseStatus_ = value;
      }
    }

    /// <summary>Field number for the "frame_name_camera" field.</summary>
    public const int FrameNameCameraFieldNumber = 7;
    private string frameNameCamera_ = "";
    /// <summary>
    /// The frame name for the camera that detected this fiducial.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameCamera {
      get { return frameNameCamera_; }
      set {
        frameNameCamera_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detection_covariance" field.</summary>
    public const int DetectionCovarianceFieldNumber = 5;
    private global::Bosdyn.Api.SE3Covariance detectionCovariance_;
    /// <summary>
    /// A 6 x 6 Covariance matrix representing the marginal uncertainty of the last detection.
    /// The rows/columns are:
    /// rx, ry, rz, tx, ty, tz
    /// which represent incremental rotation and translation along the x, y, and z axes of the
    /// given frame, respectively.
    /// This is computed using the Jacobian of the pose estimation algorithm.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Covariance DetectionCovariance {
      get { return detectionCovariance_; }
      set {
        detectionCovariance_ = value;
      }
    }

    /// <summary>Field number for the "detection_covariance_reference_frame" field.</summary>
    public const int DetectionCovarianceReferenceFrameFieldNumber = 6;
    private string detectionCovarianceReferenceFrame_ = "";
    /// <summary>
    /// The frame that the detection covariance is expressed in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetectionCovarianceReferenceFrame {
      get { return detectionCovarianceReferenceFrame_; }
      set {
        detectionCovarianceReferenceFrame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AprilTagProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AprilTagProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TagId != other.TagId) return false;
      if (!object.Equals(Dimensions, other.Dimensions)) return false;
      if (FrameNameFiducial != other.FrameNameFiducial) return false;
      if (FiducialPoseStatus != other.FiducialPoseStatus) return false;
      if (FrameNameFiducialFiltered != other.FrameNameFiducialFiltered) return false;
      if (FiducialFilteredPoseStatus != other.FiducialFilteredPoseStatus) return false;
      if (FrameNameCamera != other.FrameNameCamera) return false;
      if (!object.Equals(DetectionCovariance, other.DetectionCovariance)) return false;
      if (DetectionCovarianceReferenceFrame != other.DetectionCovarianceReferenceFrame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TagId != 0) hash ^= TagId.GetHashCode();
      if (dimensions_ != null) hash ^= Dimensions.GetHashCode();
      if (FrameNameFiducial.Length != 0) hash ^= FrameNameFiducial.GetHashCode();
      if (FiducialPoseStatus != 0) hash ^= FiducialPoseStatus.GetHashCode();
      if (FrameNameFiducialFiltered.Length != 0) hash ^= FrameNameFiducialFiltered.GetHashCode();
      if (FiducialFilteredPoseStatus != 0) hash ^= FiducialFilteredPoseStatus.GetHashCode();
      if (FrameNameCamera.Length != 0) hash ^= FrameNameCamera.GetHashCode();
      if (detectionCovariance_ != null) hash ^= DetectionCovariance.GetHashCode();
      if (DetectionCovarianceReferenceFrame.Length != 0) hash ^= DetectionCovarianceReferenceFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TagId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TagId);
      }
      if (dimensions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dimensions);
      }
      if (FrameNameFiducial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrameNameFiducial);
      }
      if (FrameNameFiducialFiltered.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FrameNameFiducialFiltered);
      }
      if (detectionCovariance_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DetectionCovariance);
      }
      if (DetectionCovarianceReferenceFrame.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DetectionCovarianceReferenceFrame);
      }
      if (FrameNameCamera.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FrameNameCamera);
      }
      if (FiducialPoseStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) FiducialPoseStatus);
      }
      if (FiducialFilteredPoseStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) FiducialFilteredPoseStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TagId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TagId);
      }
      if (dimensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dimensions);
      }
      if (FrameNameFiducial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameFiducial);
      }
      if (FiducialPoseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FiducialPoseStatus);
      }
      if (FrameNameFiducialFiltered.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameFiducialFiltered);
      }
      if (FiducialFilteredPoseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FiducialFilteredPoseStatus);
      }
      if (FrameNameCamera.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameCamera);
      }
      if (detectionCovariance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetectionCovariance);
      }
      if (DetectionCovarianceReferenceFrame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DetectionCovarianceReferenceFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AprilTagProperties other) {
      if (other == null) {
        return;
      }
      if (other.TagId != 0) {
        TagId = other.TagId;
      }
      if (other.dimensions_ != null) {
        if (dimensions_ == null) {
          Dimensions = new global::Bosdyn.Api.Vec2();
        }
        Dimensions.MergeFrom(other.Dimensions);
      }
      if (other.FrameNameFiducial.Length != 0) {
        FrameNameFiducial = other.FrameNameFiducial;
      }
      if (other.FiducialPoseStatus != 0) {
        FiducialPoseStatus = other.FiducialPoseStatus;
      }
      if (other.FrameNameFiducialFiltered.Length != 0) {
        FrameNameFiducialFiltered = other.FrameNameFiducialFiltered;
      }
      if (other.FiducialFilteredPoseStatus != 0) {
        FiducialFilteredPoseStatus = other.FiducialFilteredPoseStatus;
      }
      if (other.FrameNameCamera.Length != 0) {
        FrameNameCamera = other.FrameNameCamera;
      }
      if (other.detectionCovariance_ != null) {
        if (detectionCovariance_ == null) {
          DetectionCovariance = new global::Bosdyn.Api.SE3Covariance();
        }
        DetectionCovariance.MergeFrom(other.DetectionCovariance);
      }
      if (other.DetectionCovarianceReferenceFrame.Length != 0) {
        DetectionCovarianceReferenceFrame = other.DetectionCovarianceReferenceFrame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TagId = input.ReadInt32();
            break;
          }
          case 18: {
            if (dimensions_ == null) {
              Dimensions = new global::Bosdyn.Api.Vec2();
            }
            input.ReadMessage(Dimensions);
            break;
          }
          case 26: {
            FrameNameFiducial = input.ReadString();
            break;
          }
          case 34: {
            FrameNameFiducialFiltered = input.ReadString();
            break;
          }
          case 42: {
            if (detectionCovariance_ == null) {
              DetectionCovariance = new global::Bosdyn.Api.SE3Covariance();
            }
            input.ReadMessage(DetectionCovariance);
            break;
          }
          case 50: {
            DetectionCovarianceReferenceFrame = input.ReadString();
            break;
          }
          case 58: {
            FrameNameCamera = input.ReadString();
            break;
          }
          case 64: {
            FiducialPoseStatus = (global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus) input.ReadEnum();
            break;
          }
          case 72: {
            FiducialFilteredPoseStatus = (global::Bosdyn.Api.AprilTagProperties.Types.AprilTagPoseStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AprilTagProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AprilTagPoseStatus {
        [pbr::OriginalName("STATUS_UNKNOWN")] StatusUnknown = 0,
        /// <summary>
        /// No known issues with the pose estimate.
        /// </summary>
        [pbr::OriginalName("STATUS_OK")] StatusOk = 1,
        /// <summary>
        /// The orientation of the tag is ambiguous.
        /// </summary>
        [pbr::OriginalName("STATUS_AMBIGUOUS")] StatusAmbiguous = 2,
        /// <summary>
        /// The pose may be unreliable due to high reprojection error.
        /// </summary>
        [pbr::OriginalName("STATUS_HIGH_ERROR")] StatusHighError = 3,
      }

    }
    #endregion

  }

  public sealed partial class RayProperties : pb::IMessage<RayProperties> {
    private static readonly pb::MessageParser<RayProperties> _parser = new pb::MessageParser<RayProperties>(() => new RayProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RayProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RayProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RayProperties(RayProperties other) : this() {
      ray_ = other.ray_ != null ? other.ray_.Clone() : null;
      frame_ = other.frame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RayProperties Clone() {
      return new RayProperties(this);
    }

    /// <summary>Field number for the "ray" field.</summary>
    public const int RayFieldNumber = 1;
    private global::Bosdyn.Api.Ray ray_;
    /// <summary>
    /// Ray, usually pointing from the camera to the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Ray Ray {
      get { return ray_; }
      set {
        ray_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private string frame_ = "";
    /// <summary>
    /// Frame the ray is expressed with respect to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RayProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RayProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ray, other.Ray)) return false;
      if (Frame != other.Frame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ray_ != null) hash ^= Ray.GetHashCode();
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ray_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ray);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ray_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ray);
      }
      if (Frame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RayProperties other) {
      if (other == null) {
        return;
      }
      if (other.ray_ != null) {
        if (ray_ == null) {
          Ray = new global::Bosdyn.Api.Ray();
        }
        Ray.MergeFrom(other.Ray);
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ray_ == null) {
              Ray = new global::Bosdyn.Api.Ray();
            }
            input.ReadMessage(Ray);
            break;
          }
          case 18: {
            Frame = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoundingBoxProperties : pb::IMessage<BoundingBoxProperties> {
    private static readonly pb::MessageParser<BoundingBoxProperties> _parser = new pb::MessageParser<BoundingBoxProperties>(() => new BoundingBoxProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundingBoxProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxProperties(BoundingBoxProperties other) : this() {
      sizeEwrtFrame_ = other.sizeEwrtFrame_ != null ? other.sizeEwrtFrame_.Clone() : null;
      frame_ = other.frame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundingBoxProperties Clone() {
      return new BoundingBoxProperties(this);
    }

    /// <summary>Field number for the "size_ewrt_frame" field.</summary>
    public const int SizeEwrtFrameFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 sizeEwrtFrame_;
    /// <summary>
    /// An Oriented Bounding Box, with position and orientation at the frame provided in the
    /// transforms snapshot.
    ///
    /// The size of the box is expressed with respect to the frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 SizeEwrtFrame {
      get { return sizeEwrtFrame_; }
      set {
        sizeEwrtFrame_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private string frame_ = "";
    /// <summary>
    /// Frame the size is expressed with respect to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundingBoxProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundingBoxProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SizeEwrtFrame, other.SizeEwrtFrame)) return false;
      if (Frame != other.Frame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sizeEwrtFrame_ != null) hash ^= SizeEwrtFrame.GetHashCode();
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sizeEwrtFrame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SizeEwrtFrame);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sizeEwrtFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SizeEwrtFrame);
      }
      if (Frame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundingBoxProperties other) {
      if (other == null) {
        return;
      }
      if (other.sizeEwrtFrame_ != null) {
        if (sizeEwrtFrame_ == null) {
          SizeEwrtFrame = new global::Bosdyn.Api.Vec3();
        }
        SizeEwrtFrame.MergeFrom(other.SizeEwrtFrame);
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sizeEwrtFrame_ == null) {
              SizeEwrtFrame = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(SizeEwrtFrame);
            break;
          }
          case 18: {
            Frame = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The drawing and visualization information for a world object.
  /// </summary>
  public sealed partial class DrawableProperties : pb::IMessage<DrawableProperties> {
    private static readonly pb::MessageParser<DrawableProperties> _parser = new pb::MessageParser<DrawableProperties>(() => new DrawableProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableProperties(DrawableProperties other) : this() {
      color_ = other.color_ != null ? other.color_.Clone() : null;
      label_ = other.label_;
      wireframe_ = other.wireframe_;
      frameNameDrawable_ = other.frameNameDrawable_;
      switch (other.DrawableCase) {
        case DrawableOneofCase.Frame:
          Frame = other.Frame.Clone();
          break;
        case DrawableOneofCase.Sphere:
          Sphere = other.Sphere.Clone();
          break;
        case DrawableOneofCase.Box:
          Box = other.Box.Clone();
          break;
        case DrawableOneofCase.Arrow:
          Arrow = other.Arrow.Clone();
          break;
        case DrawableOneofCase.Capsule:
          Capsule = other.Capsule.Clone();
          break;
        case DrawableOneofCase.Cylinder:
          Cylinder = other.Cylinder.Clone();
          break;
        case DrawableOneofCase.Linestrip:
          Linestrip = other.Linestrip.Clone();
          break;
        case DrawableOneofCase.Points:
          Points = other.Points.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableProperties Clone() {
      return new DrawableProperties(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Bosdyn.Api.DrawableProperties.Types.Color color_;
    /// <summary>
    /// Color of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableProperties.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    /// <summary>
    /// Label to be drawn at the origin of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wireframe" field.</summary>
    public const int WireframeFieldNumber = 3;
    private bool wireframe_;
    /// <summary>
    /// Drawn objects in wireframe.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wireframe {
      get { return wireframe_; }
      set {
        wireframe_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 4;
    /// <summary>
    /// A drawable frame (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableFrame Frame {
      get { return drawableCase_ == DrawableOneofCase.Frame ? (global::Bosdyn.Api.DrawableFrame) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Frame;
      }
    }

    /// <summary>Field number for the "sphere" field.</summary>
    public const int SphereFieldNumber = 5;
    /// <summary>
    /// A drawable sphere (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableSphere Sphere {
      get { return drawableCase_ == DrawableOneofCase.Sphere ? (global::Bosdyn.Api.DrawableSphere) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Sphere;
      }
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 6;
    /// <summary>
    /// A drawable box (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableBox Box {
      get { return drawableCase_ == DrawableOneofCase.Box ? (global::Bosdyn.Api.DrawableBox) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Box;
      }
    }

    /// <summary>Field number for the "arrow" field.</summary>
    public const int ArrowFieldNumber = 7;
    /// <summary>
    /// A drawable arrow (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableArrow Arrow {
      get { return drawableCase_ == DrawableOneofCase.Arrow ? (global::Bosdyn.Api.DrawableArrow) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Arrow;
      }
    }

    /// <summary>Field number for the "capsule" field.</summary>
    public const int CapsuleFieldNumber = 8;
    /// <summary>
    /// A drawable capsule (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableCapsule Capsule {
      get { return drawableCase_ == DrawableOneofCase.Capsule ? (global::Bosdyn.Api.DrawableCapsule) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Capsule;
      }
    }

    /// <summary>Field number for the "cylinder" field.</summary>
    public const int CylinderFieldNumber = 9;
    /// <summary>
    /// A drawable cylinder (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableCylinder Cylinder {
      get { return drawableCase_ == DrawableOneofCase.Cylinder ? (global::Bosdyn.Api.DrawableCylinder) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Cylinder;
      }
    }

    /// <summary>Field number for the "linestrip" field.</summary>
    public const int LinestripFieldNumber = 10;
    /// <summary>
    /// A drawable linestrip (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawableLineStrip Linestrip {
      get { return drawableCase_ == DrawableOneofCase.Linestrip ? (global::Bosdyn.Api.DrawableLineStrip) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Linestrip;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 11;
    /// <summary>
    /// A drawable set of points (oneof drawable field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.DrawablePoints Points {
      get { return drawableCase_ == DrawableOneofCase.Points ? (global::Bosdyn.Api.DrawablePoints) drawable_ : null; }
      set {
        drawable_ = value;
        drawableCase_ = value == null ? DrawableOneofCase.None : DrawableOneofCase.Points;
      }
    }

    /// <summary>Field number for the "frame_name_drawable" field.</summary>
    public const int FrameNameDrawableFieldNumber = 12;
    private string frameNameDrawable_ = "";
    /// <summary>
    /// The frame name for the drawable object. This will optionally be
    /// included in the frame tree snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameNameDrawable {
      get { return frameNameDrawable_; }
      set {
        frameNameDrawable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object drawable_;
    /// <summary>Enum of possible cases for the "drawable" oneof.</summary>
    public enum DrawableOneofCase {
      None = 0,
      Frame = 4,
      Sphere = 5,
      Box = 6,
      Arrow = 7,
      Capsule = 8,
      Cylinder = 9,
      Linestrip = 10,
      Points = 11,
    }
    private DrawableOneofCase drawableCase_ = DrawableOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableOneofCase DrawableCase {
      get { return drawableCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDrawable() {
      drawableCase_ = DrawableOneofCase.None;
      drawable_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (Label != other.Label) return false;
      if (Wireframe != other.Wireframe) return false;
      if (!object.Equals(Frame, other.Frame)) return false;
      if (!object.Equals(Sphere, other.Sphere)) return false;
      if (!object.Equals(Box, other.Box)) return false;
      if (!object.Equals(Arrow, other.Arrow)) return false;
      if (!object.Equals(Capsule, other.Capsule)) return false;
      if (!object.Equals(Cylinder, other.Cylinder)) return false;
      if (!object.Equals(Linestrip, other.Linestrip)) return false;
      if (!object.Equals(Points, other.Points)) return false;
      if (FrameNameDrawable != other.FrameNameDrawable) return false;
      if (DrawableCase != other.DrawableCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Wireframe != false) hash ^= Wireframe.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Frame) hash ^= Frame.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Sphere) hash ^= Sphere.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Box) hash ^= Box.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Arrow) hash ^= Arrow.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Capsule) hash ^= Capsule.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Cylinder) hash ^= Cylinder.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Linestrip) hash ^= Linestrip.GetHashCode();
      if (drawableCase_ == DrawableOneofCase.Points) hash ^= Points.GetHashCode();
      if (FrameNameDrawable.Length != 0) hash ^= FrameNameDrawable.GetHashCode();
      hash ^= (int) drawableCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Wireframe != false) {
        output.WriteRawTag(24);
        output.WriteBool(Wireframe);
      }
      if (drawableCase_ == DrawableOneofCase.Frame) {
        output.WriteRawTag(34);
        output.WriteMessage(Frame);
      }
      if (drawableCase_ == DrawableOneofCase.Sphere) {
        output.WriteRawTag(42);
        output.WriteMessage(Sphere);
      }
      if (drawableCase_ == DrawableOneofCase.Box) {
        output.WriteRawTag(50);
        output.WriteMessage(Box);
      }
      if (drawableCase_ == DrawableOneofCase.Arrow) {
        output.WriteRawTag(58);
        output.WriteMessage(Arrow);
      }
      if (drawableCase_ == DrawableOneofCase.Capsule) {
        output.WriteRawTag(66);
        output.WriteMessage(Capsule);
      }
      if (drawableCase_ == DrawableOneofCase.Cylinder) {
        output.WriteRawTag(74);
        output.WriteMessage(Cylinder);
      }
      if (drawableCase_ == DrawableOneofCase.Linestrip) {
        output.WriteRawTag(82);
        output.WriteMessage(Linestrip);
      }
      if (drawableCase_ == DrawableOneofCase.Points) {
        output.WriteRawTag(90);
        output.WriteMessage(Points);
      }
      if (FrameNameDrawable.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FrameNameDrawable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Wireframe != false) {
        size += 1 + 1;
      }
      if (drawableCase_ == DrawableOneofCase.Frame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (drawableCase_ == DrawableOneofCase.Sphere) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sphere);
      }
      if (drawableCase_ == DrawableOneofCase.Box) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Box);
      }
      if (drawableCase_ == DrawableOneofCase.Arrow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrow);
      }
      if (drawableCase_ == DrawableOneofCase.Capsule) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capsule);
      }
      if (drawableCase_ == DrawableOneofCase.Cylinder) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cylinder);
      }
      if (drawableCase_ == DrawableOneofCase.Linestrip) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linestrip);
      }
      if (drawableCase_ == DrawableOneofCase.Points) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Points);
      }
      if (FrameNameDrawable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameNameDrawable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableProperties other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Bosdyn.Api.DrawableProperties.Types.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Wireframe != false) {
        Wireframe = other.Wireframe;
      }
      if (other.FrameNameDrawable.Length != 0) {
        FrameNameDrawable = other.FrameNameDrawable;
      }
      switch (other.DrawableCase) {
        case DrawableOneofCase.Frame:
          if (Frame == null) {
            Frame = new global::Bosdyn.Api.DrawableFrame();
          }
          Frame.MergeFrom(other.Frame);
          break;
        case DrawableOneofCase.Sphere:
          if (Sphere == null) {
            Sphere = new global::Bosdyn.Api.DrawableSphere();
          }
          Sphere.MergeFrom(other.Sphere);
          break;
        case DrawableOneofCase.Box:
          if (Box == null) {
            Box = new global::Bosdyn.Api.DrawableBox();
          }
          Box.MergeFrom(other.Box);
          break;
        case DrawableOneofCase.Arrow:
          if (Arrow == null) {
            Arrow = new global::Bosdyn.Api.DrawableArrow();
          }
          Arrow.MergeFrom(other.Arrow);
          break;
        case DrawableOneofCase.Capsule:
          if (Capsule == null) {
            Capsule = new global::Bosdyn.Api.DrawableCapsule();
          }
          Capsule.MergeFrom(other.Capsule);
          break;
        case DrawableOneofCase.Cylinder:
          if (Cylinder == null) {
            Cylinder = new global::Bosdyn.Api.DrawableCylinder();
          }
          Cylinder.MergeFrom(other.Cylinder);
          break;
        case DrawableOneofCase.Linestrip:
          if (Linestrip == null) {
            Linestrip = new global::Bosdyn.Api.DrawableLineStrip();
          }
          Linestrip.MergeFrom(other.Linestrip);
          break;
        case DrawableOneofCase.Points:
          if (Points == null) {
            Points = new global::Bosdyn.Api.DrawablePoints();
          }
          Points.MergeFrom(other.Points);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (color_ == null) {
              Color = new global::Bosdyn.Api.DrawableProperties.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 24: {
            Wireframe = input.ReadBool();
            break;
          }
          case 34: {
            global::Bosdyn.Api.DrawableFrame subBuilder = new global::Bosdyn.Api.DrawableFrame();
            if (drawableCase_ == DrawableOneofCase.Frame) {
              subBuilder.MergeFrom(Frame);
            }
            input.ReadMessage(subBuilder);
            Frame = subBuilder;
            break;
          }
          case 42: {
            global::Bosdyn.Api.DrawableSphere subBuilder = new global::Bosdyn.Api.DrawableSphere();
            if (drawableCase_ == DrawableOneofCase.Sphere) {
              subBuilder.MergeFrom(Sphere);
            }
            input.ReadMessage(subBuilder);
            Sphere = subBuilder;
            break;
          }
          case 50: {
            global::Bosdyn.Api.DrawableBox subBuilder = new global::Bosdyn.Api.DrawableBox();
            if (drawableCase_ == DrawableOneofCase.Box) {
              subBuilder.MergeFrom(Box);
            }
            input.ReadMessage(subBuilder);
            Box = subBuilder;
            break;
          }
          case 58: {
            global::Bosdyn.Api.DrawableArrow subBuilder = new global::Bosdyn.Api.DrawableArrow();
            if (drawableCase_ == DrawableOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
          case 66: {
            global::Bosdyn.Api.DrawableCapsule subBuilder = new global::Bosdyn.Api.DrawableCapsule();
            if (drawableCase_ == DrawableOneofCase.Capsule) {
              subBuilder.MergeFrom(Capsule);
            }
            input.ReadMessage(subBuilder);
            Capsule = subBuilder;
            break;
          }
          case 74: {
            global::Bosdyn.Api.DrawableCylinder subBuilder = new global::Bosdyn.Api.DrawableCylinder();
            if (drawableCase_ == DrawableOneofCase.Cylinder) {
              subBuilder.MergeFrom(Cylinder);
            }
            input.ReadMessage(subBuilder);
            Cylinder = subBuilder;
            break;
          }
          case 82: {
            global::Bosdyn.Api.DrawableLineStrip subBuilder = new global::Bosdyn.Api.DrawableLineStrip();
            if (drawableCase_ == DrawableOneofCase.Linestrip) {
              subBuilder.MergeFrom(Linestrip);
            }
            input.ReadMessage(subBuilder);
            Linestrip = subBuilder;
            break;
          }
          case 90: {
            global::Bosdyn.Api.DrawablePoints subBuilder = new global::Bosdyn.Api.DrawablePoints();
            if (drawableCase_ == DrawableOneofCase.Points) {
              subBuilder.MergeFrom(Points);
            }
            input.ReadMessage(subBuilder);
            Points = subBuilder;
            break;
          }
          case 98: {
            FrameNameDrawable = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DrawableProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// RGBA values for color ranging from [0,255] for R/G/B, and [0,1] for A.
      /// </summary>
      public sealed partial class Color : pb::IMessage<Color> {
        private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Color> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.DrawableProperties.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color(Color other) : this() {
          r_ = other.r_;
          g_ = other.g_;
          b_ = other.b_;
          a_ = other.a_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color Clone() {
          return new Color(this);
        }

        /// <summary>Field number for the "r" field.</summary>
        public const int RFieldNumber = 1;
        private int r_;
        /// <summary>
        /// Red value ranging from [0,255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int R {
          get { return r_; }
          set {
            r_ = value;
          }
        }

        /// <summary>Field number for the "g" field.</summary>
        public const int GFieldNumber = 2;
        private int g_;
        /// <summary>
        //// Green value ranging from [0,255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int G {
          get { return g_; }
          set {
            g_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 3;
        private int b_;
        /// <summary>
        /// Blue value ranging from [0,255].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int B {
          get { return b_; }
          set {
            b_ = value;
          }
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 4;
        private double a_;
        /// <summary>
        /// Alpha (transparency) value ranging from [0,1].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Color);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Color other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (R != other.R) return false;
          if (G != other.G) return false;
          if (B != other.B) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(A, other.A)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (R != 0) hash ^= R.GetHashCode();
          if (G != 0) hash ^= G.GetHashCode();
          if (B != 0) hash ^= B.GetHashCode();
          if (A != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(A);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (R != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(R);
          }
          if (G != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(G);
          }
          if (B != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(B);
          }
          if (A != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(A);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (R != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
          }
          if (G != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
          }
          if (B != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
          }
          if (A != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Color other) {
          if (other == null) {
            return;
          }
          if (other.R != 0) {
            R = other.R;
          }
          if (other.G != 0) {
            G = other.G;
          }
          if (other.B != 0) {
            B = other.B;
          }
          if (other.A != 0D) {
            A = other.A;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                R = input.ReadInt32();
                break;
              }
              case 16: {
                G = input.ReadInt32();
                break;
              }
              case 24: {
                B = input.ReadInt32();
                break;
              }
              case 33: {
                A = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A coordinate frame drawing object, describing how large to render the arrows.
  /// </summary>
  public sealed partial class DrawableFrame : pb::IMessage<DrawableFrame> {
    private static readonly pb::MessageParser<DrawableFrame> _parser = new pb::MessageParser<DrawableFrame>(() => new DrawableFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableFrame(DrawableFrame other) : this() {
      arrowLength_ = other.arrowLength_;
      arrowRadius_ = other.arrowRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableFrame Clone() {
      return new DrawableFrame(this);
    }

    /// <summary>Field number for the "arrow_length" field.</summary>
    public const int ArrowLengthFieldNumber = 1;
    private double arrowLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ArrowLength {
      get { return arrowLength_; }
      set {
        arrowLength_ = value;
      }
    }

    /// <summary>Field number for the "arrow_radius" field.</summary>
    public const int ArrowRadiusFieldNumber = 2;
    private double arrowRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ArrowRadius {
      get { return arrowRadius_; }
      set {
        arrowRadius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArrowLength, other.ArrowLength)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ArrowRadius, other.ArrowRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArrowLength != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArrowLength);
      if (ArrowRadius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ArrowRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArrowLength != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ArrowLength);
      }
      if (ArrowRadius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ArrowRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArrowLength != 0D) {
        size += 1 + 8;
      }
      if (ArrowRadius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableFrame other) {
      if (other == null) {
        return;
      }
      if (other.ArrowLength != 0D) {
        ArrowLength = other.ArrowLength;
      }
      if (other.ArrowRadius != 0D) {
        ArrowRadius = other.ArrowRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ArrowLength = input.ReadDouble();
            break;
          }
          case 17: {
            ArrowRadius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A sphere drawing object.
  /// </summary>
  public sealed partial class DrawableSphere : pb::IMessage<DrawableSphere> {
    private static readonly pb::MessageParser<DrawableSphere> _parser = new pb::MessageParser<DrawableSphere>(() => new DrawableSphere());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableSphere> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableSphere() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableSphere(DrawableSphere other) : this() {
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableSphere Clone() {
      return new DrawableSphere(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableSphere);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableSphere other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableSphere other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A three dimensional box drawing object.
  /// </summary>
  public sealed partial class DrawableBox : pb::IMessage<DrawableBox> {
    private static readonly pb::MessageParser<DrawableBox> _parser = new pb::MessageParser<DrawableBox>(() => new DrawableBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableBox(DrawableBox other) : this() {
      size_ = other.size_ != null ? other.size_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableBox Clone() {
      return new DrawableBox(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableBox other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Bosdyn.Api.Vec3();
        }
        Size.MergeFrom(other.Size);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (size_ == null) {
              Size = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Size);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A directed arrow drawing object.
  /// </summary>
  public sealed partial class DrawableArrow : pb::IMessage<DrawableArrow> {
    private static readonly pb::MessageParser<DrawableArrow> _parser = new pb::MessageParser<DrawableArrow>(() => new DrawableArrow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableArrow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableArrow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableArrow(DrawableArrow other) : this() {
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableArrow Clone() {
      return new DrawableArrow(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableArrow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableArrow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableArrow other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Bosdyn.Api.Vec3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A oval-like capsule drawing object.
  /// </summary>
  public sealed partial class DrawableCapsule : pb::IMessage<DrawableCapsule> {
    private static readonly pb::MessageParser<DrawableCapsule> _parser = new pb::MessageParser<DrawableCapsule>(() => new DrawableCapsule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableCapsule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCapsule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCapsule(DrawableCapsule other) : this() {
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCapsule Clone() {
      return new DrawableCapsule(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableCapsule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableCapsule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableCapsule other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Bosdyn.Api.Vec3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A cylinder drawing object.
  /// </summary>
  public sealed partial class DrawableCylinder : pb::IMessage<DrawableCylinder> {
    private static readonly pb::MessageParser<DrawableCylinder> _parser = new pb::MessageParser<DrawableCylinder>(() => new DrawableCylinder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableCylinder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCylinder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCylinder(DrawableCylinder other) : this() {
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableCylinder Clone() {
      return new DrawableCylinder(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableCylinder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableCylinder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableCylinder other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Bosdyn.Api.Vec3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A line strip drawing object.
  /// </summary>
  public sealed partial class DrawableLineStrip : pb::IMessage<DrawableLineStrip> {
    private static readonly pb::MessageParser<DrawableLineStrip> _parser = new pb::MessageParser<DrawableLineStrip>(() => new DrawableLineStrip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawableLineStrip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableLineStrip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableLineStrip(DrawableLineStrip other) : this() {
      points_ = other.points_ != null ? other.points_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawableLineStrip Clone() {
      return new DrawableLineStrip(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawableLineStrip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawableLineStrip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Points, other.Points)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (points_ != null) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (points_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (points_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawableLineStrip other) {
      if (other == null) {
        return;
      }
      if (other.points_ != null) {
        if (points_ == null) {
          Points = new global::Bosdyn.Api.Vec3();
        }
        Points.MergeFrom(other.Points);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (points_ == null) {
              Points = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(Points);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A set of points drawing object.
  /// </summary>
  public sealed partial class DrawablePoints : pb::IMessage<DrawablePoints> {
    private static readonly pb::MessageParser<DrawablePoints> _parser = new pb::MessageParser<DrawablePoints>(() => new DrawablePoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawablePoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.WorldObjectReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawablePoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawablePoints(DrawablePoints other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawablePoints Clone() {
      return new DrawablePoints(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Vec3> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.Vec3.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Vec3> points_ = new pbc::RepeatedField<global::Bosdyn.Api.Vec3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Vec3> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawablePoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawablePoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawablePoints other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
