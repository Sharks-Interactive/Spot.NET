// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/data_acquisition_store_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api {
  /// <summary>
  /// The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
  /// in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
  /// requests can be made to the DataAcquisitionStoreService to identify different pieces of data or entire
  /// capture actions which match query parameters, such as time ranges or action/group names.
  /// </summary>
  public static partial class DataAcquisitionStoreService
  {
    static readonly string __ServiceName = "bosdyn.api.DataAcquisitionStoreService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.ListCaptureActionsRequest> __Marshaller_bosdyn_api_ListCaptureActionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListCaptureActionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListCaptureActionsResponse> __Marshaller_bosdyn_api_ListCaptureActionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListCaptureActionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredDataRequest> __Marshaller_bosdyn_api_ListStoredDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredDataResponse> __Marshaller_bosdyn_api_ListStoredDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreDataRequest> __Marshaller_bosdyn_api_StoreDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreDataResponse> __Marshaller_bosdyn_api_StoreDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredImagesRequest> __Marshaller_bosdyn_api_ListStoredImagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredImagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredImagesResponse> __Marshaller_bosdyn_api_ListStoredImagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredImagesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreImageRequest> __Marshaller_bosdyn_api_StoreImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreImageResponse> __Marshaller_bosdyn_api_StoreImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredMetadataRequest> __Marshaller_bosdyn_api_ListStoredMetadataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredMetadataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.ListStoredMetadataResponse> __Marshaller_bosdyn_api_ListStoredMetadataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.ListStoredMetadataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreMetadataRequest> __Marshaller_bosdyn_api_StoreMetadataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreMetadataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.StoreMetadataResponse> __Marshaller_bosdyn_api_StoreMetadataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.StoreMetadataResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.ListCaptureActionsRequest, global::Bosdyn.Api.ListCaptureActionsResponse> __Method_ListCaptureActions = new grpc::Method<global::Bosdyn.Api.ListCaptureActionsRequest, global::Bosdyn.Api.ListCaptureActionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCaptureActions",
        __Marshaller_bosdyn_api_ListCaptureActionsRequest,
        __Marshaller_bosdyn_api_ListCaptureActionsResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ListStoredDataRequest, global::Bosdyn.Api.ListStoredDataResponse> __Method_ListStoredData = new grpc::Method<global::Bosdyn.Api.ListStoredDataRequest, global::Bosdyn.Api.ListStoredDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStoredData",
        __Marshaller_bosdyn_api_ListStoredDataRequest,
        __Marshaller_bosdyn_api_ListStoredDataResponse);

    static readonly grpc::Method<global::Bosdyn.Api.StoreDataRequest, global::Bosdyn.Api.StoreDataResponse> __Method_StoreData = new grpc::Method<global::Bosdyn.Api.StoreDataRequest, global::Bosdyn.Api.StoreDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StoreData",
        __Marshaller_bosdyn_api_StoreDataRequest,
        __Marshaller_bosdyn_api_StoreDataResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ListStoredImagesRequest, global::Bosdyn.Api.ListStoredImagesResponse> __Method_ListStoredImages = new grpc::Method<global::Bosdyn.Api.ListStoredImagesRequest, global::Bosdyn.Api.ListStoredImagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStoredImages",
        __Marshaller_bosdyn_api_ListStoredImagesRequest,
        __Marshaller_bosdyn_api_ListStoredImagesResponse);

    static readonly grpc::Method<global::Bosdyn.Api.StoreImageRequest, global::Bosdyn.Api.StoreImageResponse> __Method_StoreImage = new grpc::Method<global::Bosdyn.Api.StoreImageRequest, global::Bosdyn.Api.StoreImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StoreImage",
        __Marshaller_bosdyn_api_StoreImageRequest,
        __Marshaller_bosdyn_api_StoreImageResponse);

    static readonly grpc::Method<global::Bosdyn.Api.ListStoredMetadataRequest, global::Bosdyn.Api.ListStoredMetadataResponse> __Method_ListStoredMetadata = new grpc::Method<global::Bosdyn.Api.ListStoredMetadataRequest, global::Bosdyn.Api.ListStoredMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStoredMetadata",
        __Marshaller_bosdyn_api_ListStoredMetadataRequest,
        __Marshaller_bosdyn_api_ListStoredMetadataResponse);

    static readonly grpc::Method<global::Bosdyn.Api.StoreMetadataRequest, global::Bosdyn.Api.StoreMetadataResponse> __Method_StoreMetadata = new grpc::Method<global::Bosdyn.Api.StoreMetadataRequest, global::Bosdyn.Api.StoreMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StoreMetadata",
        __Marshaller_bosdyn_api_StoreMetadataRequest,
        __Marshaller_bosdyn_api_StoreMetadataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.DataAcquisitionStoreServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataAcquisitionStoreService</summary>
    [grpc::BindServiceMethod(typeof(DataAcquisitionStoreService), "BindService")]
    public abstract partial class DataAcquisitionStoreServiceBase
    {
      /// <summary>
      /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
      /// that match the query parameters provided in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListCaptureActionsResponse> ListCaptureActions(global::Bosdyn.Api.ListCaptureActionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List data identifiers (which identify specific pieces of data from
      /// an action) for stored data that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListStoredDataResponse> ListStoredData(global::Bosdyn.Api.ListStoredDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Store arbitrary data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.StoreDataResponse> StoreData(global::Bosdyn.Api.StoreDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Type-safe to images: list data identifiers (which identify specific images
      /// from an action) for stored images that satisfy the
      /// query parameters in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListStoredImagesResponse> ListStoredImages(global::Bosdyn.Api.ListStoredImagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Type-safe to images: store image data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.StoreImageResponse> StoreImage(global::Bosdyn.Api.StoreImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
      /// an action) for stored metadata that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.ListStoredMetadataResponse> ListStoredMetadata(global::Bosdyn.Api.ListStoredMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.StoreMetadataResponse> StoreMetadata(global::Bosdyn.Api.StoreMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataAcquisitionStoreService</summary>
    public partial class DataAcquisitionStoreServiceClient : grpc::ClientBase<DataAcquisitionStoreServiceClient>
    {
      /// <summary>Creates a new client for DataAcquisitionStoreService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataAcquisitionStoreServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataAcquisitionStoreService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataAcquisitionStoreServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataAcquisitionStoreServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataAcquisitionStoreServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
      /// that match the query parameters provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListCaptureActionsResponse ListCaptureActions(global::Bosdyn.Api.ListCaptureActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCaptureActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
      /// that match the query parameters provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListCaptureActionsResponse ListCaptureActions(global::Bosdyn.Api.ListCaptureActionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCaptureActions, null, options, request);
      }
      /// <summary>
      /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
      /// that match the query parameters provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListCaptureActionsResponse> ListCaptureActionsAsync(global::Bosdyn.Api.ListCaptureActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCaptureActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
      /// that match the query parameters provided in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListCaptureActionsResponse> ListCaptureActionsAsync(global::Bosdyn.Api.ListCaptureActionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCaptureActions, null, options, request);
      }
      /// <summary>
      /// List data identifiers (which identify specific pieces of data from
      /// an action) for stored data that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredDataResponse ListStoredData(global::Bosdyn.Api.ListStoredDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List data identifiers (which identify specific pieces of data from
      /// an action) for stored data that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredDataResponse ListStoredData(global::Bosdyn.Api.ListStoredDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStoredData, null, options, request);
      }
      /// <summary>
      /// List data identifiers (which identify specific pieces of data from
      /// an action) for stored data that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredDataResponse> ListStoredDataAsync(global::Bosdyn.Api.ListStoredDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List data identifiers (which identify specific pieces of data from
      /// an action) for stored data that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredDataResponse> ListStoredDataAsync(global::Bosdyn.Api.ListStoredDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStoredData, null, options, request);
      }
      /// <summary>
      /// Store arbitrary data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreDataResponse StoreData(global::Bosdyn.Api.StoreDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Store arbitrary data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreDataResponse StoreData(global::Bosdyn.Api.StoreDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StoreData, null, options, request);
      }
      /// <summary>
      /// Store arbitrary data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreDataResponse> StoreDataAsync(global::Bosdyn.Api.StoreDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Store arbitrary data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreDataResponse> StoreDataAsync(global::Bosdyn.Api.StoreDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StoreData, null, options, request);
      }
      /// <summary>
      /// Type-safe to images: list data identifiers (which identify specific images
      /// from an action) for stored images that satisfy the
      /// query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredImagesResponse ListStoredImages(global::Bosdyn.Api.ListStoredImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to images: list data identifiers (which identify specific images
      /// from an action) for stored images that satisfy the
      /// query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredImagesResponse ListStoredImages(global::Bosdyn.Api.ListStoredImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStoredImages, null, options, request);
      }
      /// <summary>
      /// Type-safe to images: list data identifiers (which identify specific images
      /// from an action) for stored images that satisfy the
      /// query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredImagesResponse> ListStoredImagesAsync(global::Bosdyn.Api.ListStoredImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredImagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to images: list data identifiers (which identify specific images
      /// from an action) for stored images that satisfy the
      /// query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredImagesResponse> ListStoredImagesAsync(global::Bosdyn.Api.ListStoredImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStoredImages, null, options, request);
      }
      /// <summary>
      /// Type-safe to images: store image data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreImageResponse StoreImage(global::Bosdyn.Api.StoreImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to images: store image data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreImageResponse StoreImage(global::Bosdyn.Api.StoreImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StoreImage, null, options, request);
      }
      /// <summary>
      /// Type-safe to images: store image data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreImageResponse> StoreImageAsync(global::Bosdyn.Api.StoreImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to images: store image data associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreImageResponse> StoreImageAsync(global::Bosdyn.Api.StoreImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StoreImage, null, options, request);
      }
      /// <summary>
      /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
      /// an action) for stored metadata that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredMetadataResponse ListStoredMetadata(global::Bosdyn.Api.ListStoredMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
      /// an action) for stored metadata that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.ListStoredMetadataResponse ListStoredMetadata(global::Bosdyn.Api.ListStoredMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStoredMetadata, null, options, request);
      }
      /// <summary>
      /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
      /// an action) for stored metadata that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredMetadataResponse> ListStoredMetadataAsync(global::Bosdyn.Api.ListStoredMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStoredMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
      /// an action) for stored metadata that satisfy the query parameters in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.ListStoredMetadataResponse> ListStoredMetadataAsync(global::Bosdyn.Api.ListStoredMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStoredMetadata, null, options, request);
      }
      /// <summary>
      /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreMetadataResponse StoreMetadata(global::Bosdyn.Api.StoreMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.StoreMetadataResponse StoreMetadata(global::Bosdyn.Api.StoreMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StoreMetadata, null, options, request);
      }
      /// <summary>
      /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreMetadataResponse> StoreMetadataAsync(global::Bosdyn.Api.StoreMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StoreMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.StoreMetadataResponse> StoreMetadataAsync(global::Bosdyn.Api.StoreMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StoreMetadata, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataAcquisitionStoreServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataAcquisitionStoreServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataAcquisitionStoreServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListCaptureActions, serviceImpl.ListCaptureActions)
          .AddMethod(__Method_ListStoredData, serviceImpl.ListStoredData)
          .AddMethod(__Method_StoreData, serviceImpl.StoreData)
          .AddMethod(__Method_ListStoredImages, serviceImpl.ListStoredImages)
          .AddMethod(__Method_StoreImage, serviceImpl.StoreImage)
          .AddMethod(__Method_ListStoredMetadata, serviceImpl.ListStoredMetadata)
          .AddMethod(__Method_StoreMetadata, serviceImpl.StoreMetadata).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataAcquisitionStoreServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListCaptureActions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListCaptureActionsRequest, global::Bosdyn.Api.ListCaptureActionsResponse>(serviceImpl.ListCaptureActions));
      serviceBinder.AddMethod(__Method_ListStoredData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListStoredDataRequest, global::Bosdyn.Api.ListStoredDataResponse>(serviceImpl.ListStoredData));
      serviceBinder.AddMethod(__Method_StoreData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.StoreDataRequest, global::Bosdyn.Api.StoreDataResponse>(serviceImpl.StoreData));
      serviceBinder.AddMethod(__Method_ListStoredImages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListStoredImagesRequest, global::Bosdyn.Api.ListStoredImagesResponse>(serviceImpl.ListStoredImages));
      serviceBinder.AddMethod(__Method_StoreImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.StoreImageRequest, global::Bosdyn.Api.StoreImageResponse>(serviceImpl.StoreImage));
      serviceBinder.AddMethod(__Method_ListStoredMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.ListStoredMetadataRequest, global::Bosdyn.Api.ListStoredMetadataResponse>(serviceImpl.ListStoredMetadata));
      serviceBinder.AddMethod(__Method_StoreMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.StoreMetadataRequest, global::Bosdyn.Api.StoreMetadataResponse>(serviceImpl.StoreMetadata));
    }

  }
}
#endregion
