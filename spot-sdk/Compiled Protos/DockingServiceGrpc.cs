// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/docking_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bosdyn.Api.Docking {
  /// <summary>
  /// The DockingService provides an interface to dock and undock the robot from Spot Docks,
  /// as well as get feedback on command status, and get the current docked status of the robot.
  /// </summary>
  public static partial class DockingService
  {
    static readonly string __ServiceName = "bosdyn.api.docking.DockingService";

    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.DockingCommandRequest> __Marshaller_bosdyn_api_docking_DockingCommandRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.DockingCommandRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.DockingCommandResponse> __Marshaller_bosdyn_api_docking_DockingCommandResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.DockingCommandResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest> __Marshaller_bosdyn_api_docking_DockingCommandFeedbackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse> __Marshaller_bosdyn_api_docking_DockingCommandFeedbackResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.GetDockingConfigRequest> __Marshaller_bosdyn_api_docking_GetDockingConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.GetDockingConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.GetDockingConfigResponse> __Marshaller_bosdyn_api_docking_GetDockingConfigResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.GetDockingConfigResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.GetDockingStateRequest> __Marshaller_bosdyn_api_docking_GetDockingStateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.GetDockingStateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Bosdyn.Api.Docking.GetDockingStateResponse> __Marshaller_bosdyn_api_docking_GetDockingStateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bosdyn.Api.Docking.GetDockingStateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Bosdyn.Api.Docking.DockingCommandRequest, global::Bosdyn.Api.Docking.DockingCommandResponse> __Method_DockingCommand = new grpc::Method<global::Bosdyn.Api.Docking.DockingCommandRequest, global::Bosdyn.Api.Docking.DockingCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DockingCommand",
        __Marshaller_bosdyn_api_docking_DockingCommandRequest,
        __Marshaller_bosdyn_api_docking_DockingCommandResponse);

    static readonly grpc::Method<global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest, global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse> __Method_DockingCommandFeedback = new grpc::Method<global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest, global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DockingCommandFeedback",
        __Marshaller_bosdyn_api_docking_DockingCommandFeedbackRequest,
        __Marshaller_bosdyn_api_docking_DockingCommandFeedbackResponse);

    static readonly grpc::Method<global::Bosdyn.Api.Docking.GetDockingConfigRequest, global::Bosdyn.Api.Docking.GetDockingConfigResponse> __Method_GetDockingConfig = new grpc::Method<global::Bosdyn.Api.Docking.GetDockingConfigRequest, global::Bosdyn.Api.Docking.GetDockingConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDockingConfig",
        __Marshaller_bosdyn_api_docking_GetDockingConfigRequest,
        __Marshaller_bosdyn_api_docking_GetDockingConfigResponse);

    static readonly grpc::Method<global::Bosdyn.Api.Docking.GetDockingStateRequest, global::Bosdyn.Api.Docking.GetDockingStateResponse> __Method_GetDockingState = new grpc::Method<global::Bosdyn.Api.Docking.GetDockingStateRequest, global::Bosdyn.Api.Docking.GetDockingStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDockingState",
        __Marshaller_bosdyn_api_docking_GetDockingStateRequest,
        __Marshaller_bosdyn_api_docking_GetDockingStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bosdyn.Api.Docking.DockingServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DockingService</summary>
    [grpc::BindServiceMethod(typeof(DockingService), "BindService")]
    public abstract partial class DockingServiceBase
    {
      /// <summary>
      /// Starts a docking command on the robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.Docking.DockingCommandResponse> DockingCommand(global::Bosdyn.Api.Docking.DockingCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check the status of a docking command.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse> DockingCommandFeedback(global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the configured dock ID ranges.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.Docking.GetDockingConfigResponse> GetDockingConfig(global::Bosdyn.Api.Docking.GetDockingConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the robot's docking state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Bosdyn.Api.Docking.GetDockingStateResponse> GetDockingState(global::Bosdyn.Api.Docking.GetDockingStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DockingService</summary>
    public partial class DockingServiceClient : grpc::ClientBase<DockingServiceClient>
    {
      /// <summary>Creates a new client for DockingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DockingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DockingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DockingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DockingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DockingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Starts a docking command on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.DockingCommandResponse DockingCommand(global::Bosdyn.Api.Docking.DockingCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockingCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a docking command on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.DockingCommandResponse DockingCommand(global::Bosdyn.Api.Docking.DockingCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DockingCommand, null, options, request);
      }
      /// <summary>
      /// Starts a docking command on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.DockingCommandResponse> DockingCommandAsync(global::Bosdyn.Api.Docking.DockingCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockingCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a docking command on the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.DockingCommandResponse> DockingCommandAsync(global::Bosdyn.Api.Docking.DockingCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DockingCommand, null, options, request);
      }
      /// <summary>
      /// Check the status of a docking command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse DockingCommandFeedback(global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockingCommandFeedback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the status of a docking command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse DockingCommandFeedback(global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DockingCommandFeedback, null, options, request);
      }
      /// <summary>
      /// Check the status of a docking command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse> DockingCommandFeedbackAsync(global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DockingCommandFeedbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the status of a docking command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse> DockingCommandFeedbackAsync(global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DockingCommandFeedback, null, options, request);
      }
      /// <summary>
      /// Get the configured dock ID ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.GetDockingConfigResponse GetDockingConfig(global::Bosdyn.Api.Docking.GetDockingConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockingConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the configured dock ID ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.GetDockingConfigResponse GetDockingConfig(global::Bosdyn.Api.Docking.GetDockingConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDockingConfig, null, options, request);
      }
      /// <summary>
      /// Get the configured dock ID ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.GetDockingConfigResponse> GetDockingConfigAsync(global::Bosdyn.Api.Docking.GetDockingConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockingConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the configured dock ID ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.GetDockingConfigResponse> GetDockingConfigAsync(global::Bosdyn.Api.Docking.GetDockingConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDockingConfig, null, options, request);
      }
      /// <summary>
      /// Get the robot's docking state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.GetDockingStateResponse GetDockingState(global::Bosdyn.Api.Docking.GetDockingStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockingState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the robot's docking state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Bosdyn.Api.Docking.GetDockingStateResponse GetDockingState(global::Bosdyn.Api.Docking.GetDockingStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDockingState, null, options, request);
      }
      /// <summary>
      /// Get the robot's docking state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.GetDockingStateResponse> GetDockingStateAsync(global::Bosdyn.Api.Docking.GetDockingStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDockingStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the robot's docking state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Bosdyn.Api.Docking.GetDockingStateResponse> GetDockingStateAsync(global::Bosdyn.Api.Docking.GetDockingStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDockingState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DockingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DockingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DockingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DockingCommand, serviceImpl.DockingCommand)
          .AddMethod(__Method_DockingCommandFeedback, serviceImpl.DockingCommandFeedback)
          .AddMethod(__Method_GetDockingConfig, serviceImpl.GetDockingConfig)
          .AddMethod(__Method_GetDockingState, serviceImpl.GetDockingState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DockingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DockingCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.Docking.DockingCommandRequest, global::Bosdyn.Api.Docking.DockingCommandResponse>(serviceImpl.DockingCommand));
      serviceBinder.AddMethod(__Method_DockingCommandFeedback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.Docking.DockingCommandFeedbackRequest, global::Bosdyn.Api.Docking.DockingCommandFeedbackResponse>(serviceImpl.DockingCommandFeedback));
      serviceBinder.AddMethod(__Method_GetDockingConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.Docking.GetDockingConfigRequest, global::Bosdyn.Api.Docking.GetDockingConfigResponse>(serviceImpl.GetDockingConfig));
      serviceBinder.AddMethod(__Method_GetDockingState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bosdyn.Api.Docking.GetDockingStateRequest, global::Bosdyn.Api.Docking.GetDockingStateResponse>(serviceImpl.GetDockingState));
    }

  }
}
#endregion
