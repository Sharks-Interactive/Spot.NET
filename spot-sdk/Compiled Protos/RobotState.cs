// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/robot_state.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bosdyn.Api {

  /// <summary>Holder for reflection information generated from Protos/robot_state.proto</summary>
  public static partial class RobotStateReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/robot_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3Mvcm9ib3Rfc3RhdGUucHJvdG8SCmJvc2R5bi5hcGkaFVByb3Rv",
            "cy9nZW9tZXRyeS5wcm90bxoTUHJvdG9zL2hlYWRlci5wcm90bxoWUHJvdG9z",
            "L3BhcmFtZXRlci5wcm90bxoaUHJvdG9zL3NlcnZpY2VfZmF1bHQucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi9kdXJhdGlvbi5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJz",
            "LnByb3RvIsYBCghTa2VsZXRvbhIoCgVsaW5rcxgCIAMoCzIZLmJvc2R5bi5h",
            "cGkuU2tlbGV0b24uTGluaxIMCgR1cmRmGAMgASgJGoEBCgRMaW5rEgwKBG5h",
            "bWUYASABKAkSNQoJb2JqX21vZGVsGAIgASgLMiIuYm9zZHluLmFwaS5Ta2Vs",
            "ZXRvbi5MaW5rLk9iak1vZGVsGjQKCE9iak1vZGVsEhEKCWZpbGVfbmFtZRgB",
            "IAEoCRIVCg1maWxlX2NvbnRlbnRzGAIgASgJIvoBChVIYXJkd2FyZUNvbmZp",
            "Z3VyYXRpb24SJgoIc2tlbGV0b24YASABKAsyFC5ib3NkeW4uYXBpLlNrZWxl",
            "dG9uEisKI2Nhbl9wb3dlcl9jb21tYW5kX3JlcXVlc3Rfb2ZmX3JvYm90GAIg",
            "ASgIEi0KJWNhbl9wb3dlcl9jb21tYW5kX3JlcXVlc3RfY3ljbGVfcm9ib3QY",
            "AyABKAgSLwonY2FuX3Bvd2VyX2NvbW1hbmRfcmVxdWVzdF9wYXlsb2FkX3Bv",
            "cnRzGAQgASgIEiwKJGNhbl9wb3dlcl9jb21tYW5kX3JlcXVlc3Rfd2lmaV9y",
            "YWRpbxgFIAEoCCKaBAoKUm9ib3RTdGF0ZRIrCgtwb3dlcl9zdGF0ZRgBIAEo",
            "CzIWLmJvc2R5bi5hcGkuUG93ZXJTdGF0ZRIwCg5iYXR0ZXJ5X3N0YXRlcxgC",
            "IAMoCzIYLmJvc2R5bi5hcGkuQmF0dGVyeVN0YXRlEiwKDGNvbW1zX3N0YXRl",
            "cxgDIAMoCzIWLmJvc2R5bi5hcGkuQ29tbXNTdGF0ZRI4ChJzeXN0ZW1fZmF1",
            "bHRfc3RhdGUYBCABKAsyHC5ib3NkeW4uYXBpLlN5c3RlbUZhdWx0U3RhdGUS",
            "LAoMZXN0b3Bfc3RhdGVzGAUgAygLMhYuYm9zZHluLmFwaS5FU3RvcFN0YXRl",
            "EjMKD2tpbmVtYXRpY19zdGF0ZRgGIAEoCzIaLmJvc2R5bi5hcGkuS2luZW1h",
            "dGljU3RhdGUSPAoUYmVoYXZpb3JfZmF1bHRfc3RhdGUYByABKAsyHi5ib3Nk",
            "eW4uYXBpLkJlaGF2aW9yRmF1bHRTdGF0ZRIpCgpmb290X3N0YXRlGAggAygL",
            "MhUuYm9zZHluLmFwaS5Gb290U3RhdGUSNwoRbWFuaXB1bGF0b3Jfc3RhdGUY",
            "CyABKAsyHC5ib3NkeW4uYXBpLk1hbmlwdWxhdG9yU3RhdGUSOgoTc2Vydmlj",
            "ZV9mYXVsdF9zdGF0ZRgKIAEoCzIdLmJvc2R5bi5hcGkuU2VydmljZUZhdWx0",
            "U3RhdGVKBAgJEAoiswsKClBvd2VyU3RhdGUSLQoJdGltZXN0YW1wGAEgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJBChFtb3Rvcl9wb3dlcl9z",
            "dGF0ZRgCIAEoDjImLmJvc2R5bi5hcGkuUG93ZXJTdGF0ZS5Nb3RvclBvd2Vy",
            "U3RhdGUSQQoRc2hvcmVfcG93ZXJfc3RhdGUYAyABKA4yJi5ib3NkeW4uYXBp",
            "LlBvd2VyU3RhdGUuU2hvcmVQb3dlclN0YXRlEkEKEXJvYm90X3Bvd2VyX3N0",
            "YXRlGAYgASgOMiYuYm9zZHluLmFwaS5Qb3dlclN0YXRlLlJvYm90UG93ZXJT",
            "dGF0ZRJQChlwYXlsb2FkX3BvcnRzX3Bvd2VyX3N0YXRlGAcgASgOMi0uYm9z",
            "ZHluLmFwaS5Qb3dlclN0YXRlLlBheWxvYWRQb3J0c1Bvd2VyU3RhdGUSSgoW",
            "d2lmaV9yYWRpb19wb3dlcl9zdGF0ZRgJIAEoDjIqLmJvc2R5bi5hcGkuUG93",
            "ZXJTdGF0ZS5XaWZpUmFkaW9Qb3dlclN0YXRlEkIKHGxvY29tb3Rpb25fY2hh",
            "cmdlX3BlcmNlbnRhZ2UYBCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSPwocbG9jb21vdGlvbl9lc3RpbWF0ZWRfcnVudGltZRgFIAEoCzIZ",
            "Lmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiLVAgoPTW90b3JQb3dlclN0YXRl",
            "EhUKDVNUQVRFX1VOS05PV04QABoCCAESHQoZTU9UT1JfUE9XRVJfU1RBVEVf",
            "VU5LTk9XThAAEhEKCVNUQVRFX09GRhABGgIIARIZChVNT1RPUl9QT1dFUl9T",
            "VEFURV9PRkYQARIQCghTVEFURV9PThACGgIIARIYChRNT1RPUl9QT1dFUl9T",
            "VEFURV9PThACEhkKEVNUQVRFX1BPV0VSSU5HX09OEAMaAggBEiEKHU1PVE9S",
            "X1BPV0VSX1NUQVRFX1BPV0VSSU5HX09OEAMSGgoSU1RBVEVfUE9XRVJJTkdf",
            "T0ZGEAQaAggBEiIKHk1PVE9SX1BPV0VSX1NUQVRFX1BPV0VSSU5HX09GRhAE",
            "EhMKC1NUQVRFX0VSUk9SEAUaAggBEhsKF01PVE9SX1BPV0VSX1NUQVRFX0VS",
            "Uk9SEAUaAhABIskBCg9TaG9yZVBvd2VyU3RhdGUSIQoZU1RBVEVfVU5LTk9X",
            "Tl9TSE9SRV9QT1dFUhAAGgIIARIdChlTSE9SRV9QT1dFUl9TVEFURV9VTktO",
            "T1dOEAASHAoUU1RBVEVfT05fU0hPUkVfUE9XRVIQARoCCAESGAoUU0hPUkVf",
            "UE9XRVJfU1RBVEVfT04QARIdChVTVEFURV9PRkZfU0hPUkVfUE9XRVIQAhoC",
            "CAESGQoVU0hPUkVfUE9XRVJfU1RBVEVfT0ZGEAIaAhABImUKD1JvYm90UG93",
            "ZXJTdGF0ZRIdChlST0JPVF9QT1dFUl9TVEFURV9VTktOT1dOEAASGAoUUk9C",
            "T1RfUE9XRVJfU1RBVEVfT04QARIZChVST0JPVF9QT1dFUl9TVEFURV9PRkYQ",
            "AiKEAQoWUGF5bG9hZFBvcnRzUG93ZXJTdGF0ZRIlCiFQQVlMT0FEX1BPUlRT",
            "X1BPV0VSX1NUQVRFX1VOS05PV04QABIgChxQQVlMT0FEX1BPUlRTX1BPV0VS",
            "X1NUQVRFX09OEAESIQodUEFZTE9BRF9QT1JUU19QT1dFUl9TVEFURV9PRkYQ",
            "AiJ4ChNXaWZpUmFkaW9Qb3dlclN0YXRlEiIKHldJRklfUkFESU9fUE9XRVJf",
            "U1RBVEVfVU5LTk9XThAAEh0KGVdJRklfUkFESU9fUE9XRVJfU1RBVEVfT04Q",
            "ARIeChpXSUZJX1JBRElPX1BPV0VSX1NUQVRFX09GRhACIoYCChBTeXN0ZW1G",
            "YXVsdFN0YXRlEicKBmZhdWx0cxgBIAMoCzIXLmJvc2R5bi5hcGkuU3lzdGVt",
            "RmF1bHQSMgoRaGlzdG9yaWNhbF9mYXVsdHMYAiADKAsyFy5ib3NkeW4uYXBp",
            "LlN5c3RlbUZhdWx0EkAKCmFnZ3JlZ2F0ZWQYAyADKAsyLC5ib3NkeW4uYXBp",
            "LlN5c3RlbUZhdWx0U3RhdGUuQWdncmVnYXRlZEVudHJ5GlMKD0FnZ3JlZ2F0",
            "ZWRFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUYAiABKA4yIC5ib3NkeW4u",
            "YXBpLlN5c3RlbUZhdWx0LlNldmVyaXR5OgI4ASLWAgoLU3lzdGVtRmF1bHQS",
            "DAoEbmFtZRgBIAEoCRIzCg9vbnNldF90aW1lc3RhbXAYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEisKCGR1cmF0aW9uGAMgASgLMhkuZ29v",
            "Z2xlLnByb3RvYnVmLkR1cmF0aW9uEgwKBGNvZGUYBCABKAUSCwoDdWlkGAgg",
            "ASgEEhUKDWVycm9yX21lc3NhZ2UYBSABKAkSEgoKYXR0cmlidXRlcxgGIAMo",
            "CRIyCghzZXZlcml0eRgHIAEoDjIgLmJvc2R5bi5hcGkuU3lzdGVtRmF1bHQu",
            "U2V2ZXJpdHkiXQoIU2V2ZXJpdHkSFAoQU0VWRVJJVFlfVU5LTk9XThAAEhEK",
            "DVNFVkVSSVRZX0lORk8QARIRCg1TRVZFUklUWV9XQVJOEAISFQoRU0VWRVJJ",
            "VFlfQ1JJVElDQUwQAyLEAgoKRVN0b3BTdGF0ZRItCgl0aW1lc3RhbXAYASAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEgwKBG5hbWUYAiABKAkS",
            "KQoEdHlwZRgDIAEoDjIbLmJvc2R5bi5hcGkuRVN0b3BTdGF0ZS5UeXBlEisK",
            "BXN0YXRlGAQgASgOMhwuYm9zZHluLmFwaS5FU3RvcFN0YXRlLlN0YXRlEhkK",
            "EXN0YXRlX2Rlc2NyaXB0aW9uGAUgASgJIj4KBFR5cGUSEAoMVFlQRV9VTktO",
            "T1dOEAASEQoNVFlQRV9IQVJEV0FSRRABEhEKDVRZUEVfU09GVFdBUkUQAiJG",
            "CgVTdGF0ZRIRCg1TVEFURV9VTktOT1dOEAASEgoOU1RBVEVfRVNUT1BQRUQQ",
            "ARIWChJTVEFURV9OT1RfRVNUT1BQRUQQAiLYAwoMQmF0dGVyeVN0YXRlEi0K",
            "CXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "EgoKaWRlbnRpZmllchgCIAEoCRI3ChFjaGFyZ2VfcGVyY2VudGFnZRgDIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI0ChFlc3RpbWF0ZWRf",
            "cnVudGltZRgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhItCgdj",
            "dXJyZW50GAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEi0K",
            "B3ZvbHRhZ2UYBiABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "FAoMdGVtcGVyYXR1cmVzGAcgAygBEi8KBnN0YXR1cxgIIAEoDjIfLmJvc2R5",
            "bi5hcGkuQmF0dGVyeVN0YXRlLlN0YXR1cyJxCgZTdGF0dXMSEgoOU1RBVFVT",
            "X1VOS05PV04QABISCg5TVEFUVVNfTUlTU0lORxABEhMKD1NUQVRVU19DSEFS",
            "R0lORxACEhYKElNUQVRVU19ESVNDSEFSR0lORxADEhIKDlNUQVRVU19CT09U",
            "SU5HEAQi3QIKDktpbmVtYXRpY1N0YXRlEiwKDGpvaW50X3N0YXRlcxgCIAMo",
            "CzIWLmJvc2R5bi5hcGkuSm9pbnRTdGF0ZRI5ChVhY3F1aXNpdGlvbl90aW1l",
            "c3RhbXAYHiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjoKE3Ry",
            "YW5zZm9ybXNfc25hcHNob3QYHyABKAsyHS5ib3NkeW4uYXBpLkZyYW1lVHJl",
            "ZVNuYXBzaG90EjsKGnZlbG9jaXR5X29mX2JvZHlfaW5fdmlzaW9uGAggASgL",
            "MhcuYm9zZHluLmFwaS5TRTNWZWxvY2l0eRI5Chh2ZWxvY2l0eV9vZl9ib2R5",
            "X2luX29kb20YDCABKAsyFy5ib3NkeW4uYXBpLlNFM1ZlbG9jaXR5SgQIARAC",
            "SgQIAxAESgQIBBAFSgQIBRAGSgQIBhAHSgQICRAKSgQIChALSgQICxAMItoB",
            "CgpKb2ludFN0YXRlEgwKBG5hbWUYASABKAkSLgoIcG9zaXRpb24YAiABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSLgoIdmVsb2NpdHkYAyAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMgoMYWNjZWxlcmF0",
            "aW9uGAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEioKBGxv",
            "YWQYBSABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUiPwoSQmVo",
            "YXZpb3JGYXVsdFN0YXRlEikKBmZhdWx0cxgBIAMoCzIZLmJvc2R5bi5hcGku",
            "QmVoYXZpb3JGYXVsdCLmAgoNQmVoYXZpb3JGYXVsdBIZChFiZWhhdmlvcl9m",
            "YXVsdF9pZBgBIAEoDRIzCg9vbnNldF90aW1lc3RhbXAYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEi4KBWNhdXNlGAMgASgOMh8uYm9zZHlu",
            "LmFwaS5CZWhhdmlvckZhdWx0LkNhdXNlEjAKBnN0YXR1cxgEIAEoDjIgLmJv",
            "c2R5bi5hcGkuQmVoYXZpb3JGYXVsdC5TdGF0dXMiVwoFQ2F1c2USEQoNQ0FV",
            "U0VfVU5LTk9XThAAEg4KCkNBVVNFX0ZBTEwQARISCg5DQVVTRV9IQVJEV0FS",
            "RRACEhcKE0NBVVNFX0xFQVNFX1RJTUVPVVQQAyJKCgZTdGF0dXMSEgoOU1RB",
            "VFVTX1VOS05PV04QABIUChBTVEFUVVNfQ0xFQVJBQkxFEAESFgoSU1RBVFVT",
            "X1VOQ0xFQVJBQkxFEAIiZQoMUm9ib3RNZXRyaWNzEi0KCXRpbWVzdGFtcBgB",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJgoHbWV0cmljcxgC",
            "IAMoCzIVLmJvc2R5bi5hcGkuUGFyYW1ldGVyInEKCkNvbW1zU3RhdGUSLQoJ",
            "dGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIr",
            "Cgp3aWZpX3N0YXRlGAIgASgLMhUuYm9zZHluLmFwaS5XaUZpU3RhdGVIAEIH",
            "CgVzdGF0ZSKOAQoJV2lGaVN0YXRlEjAKDGN1cnJlbnRfbW9kZRgBIAEoDjIa",
            "LmJvc2R5bi5hcGkuV2lGaVN0YXRlLk1vZGUSDQoFZXNzaWQYAiABKAkiQAoE",
            "TW9kZRIQCgxNT0RFX1VOS05PV04QABIVChFNT0RFX0FDQ0VTU19QT0lOVBAB",
            "Eg8KC01PREVfQ0xJRU5UEAIiqAQKCUZvb3RTdGF0ZRIvChVmb290X3Bvc2l0",
            "aW9uX3J0X2JvZHkYASABKAsyEC5ib3NkeW4uYXBpLlZlYzMSLgoHY29udGFj",
            "dBgCIAEoDjIdLmJvc2R5bi5hcGkuRm9vdFN0YXRlLkNvbnRhY3QSMwoHdGVy",
            "cmFpbhgDIAEoCzIiLmJvc2R5bi5hcGkuRm9vdFN0YXRlLlRlcnJhaW5TdGF0",
            "ZRrAAgoMVGVycmFpblN0YXRlEhUKDWdyb3VuZF9tdV9lc3QYASABKAESEgoK",
            "ZnJhbWVfbmFtZRgCIAEoCRI1Chtmb290X3NsaXBfZGlzdGFuY2VfcnRfZnJh",
            "bWUYAyABKAsyEC5ib3NkeW4uYXBpLlZlYzMSNQobZm9vdF9zbGlwX3ZlbG9j",
            "aXR5X3J0X2ZyYW1lGAQgASgLMhAuYm9zZHluLmFwaS5WZWMzEjgKHmdyb3Vu",
            "ZF9jb250YWN0X25vcm1hbF9ydF9mcmFtZRgFIAEoCzIQLmJvc2R5bi5hcGku",
            "VmVjMxIuCiZ2aXN1YWxfc3VyZmFjZV9ncm91bmRfcGVuZXRyYXRpb25fbWVh",
            "bhgGIAEoARItCiV2aXN1YWxfc3VyZmFjZV9ncm91bmRfcGVuZXRyYXRpb25f",
            "c3RkGAcgASgBIkIKB0NvbnRhY3QSEwoPQ09OVEFDVF9VTktOT1dOEAASEAoM",
            "Q09OVEFDVF9NQURFEAESEAoMQ09OVEFDVF9MT1NUEAIimAUKEE1hbmlwdWxh",
            "dG9yU3RhdGUSHwoXZ3JpcHBlcl9vcGVuX3BlcmNlbnRhZ2UYDCABKAESHwoX",
            "aXNfZ3JpcHBlcl9ob2xkaW5nX2l0ZW0YBiABKAgSPgokZXN0aW1hdGVkX2Vu",
            "ZF9lZmZlY3Rvcl9mb3JjZV9pbl9oYW5kGA0gASgLMhAuYm9zZHluLmFwaS5W",
            "ZWMzEjoKCnN0b3dfc3RhdGUYCSABKA4yJi5ib3NkeW4uYXBpLk1hbmlwdWxh",
            "dG9yU3RhdGUuU3Rvd1N0YXRlEjsKGnZlbG9jaXR5X29mX2hhbmRfaW5fdmlz",
            "aW9uGA4gASgLMhcuYm9zZHluLmFwaS5TRTNWZWxvY2l0eRI5Chh2ZWxvY2l0",
            "eV9vZl9oYW5kX2luX29kb20YDyABKAsyFy5ib3NkeW4uYXBpLlNFM1ZlbG9j",
            "aXR5EjwKC2NhcnJ5X3N0YXRlGBAgASgOMicuYm9zZHluLmFwaS5NYW5pcHVs",
            "YXRvclN0YXRlLkNhcnJ5U3RhdGUiUAoJU3Rvd1N0YXRlEhUKEVNUT1dTVEFU",
            "RV9VTktOT1dOEAASFAoQU1RPV1NUQVRFX1NUT1dFRBABEhYKElNUT1dTVEFU",
            "RV9ERVBMT1lFRBACIocBCgpDYXJyeVN0YXRlEhcKE0NBUlJZX1NUQVRFX1VO",
            "S05PV04QABIdChlDQVJSWV9TVEFURV9OT1RfQ0FSUklBQkxFEAESGQoVQ0FS",
            "UllfU1RBVEVfQ0FSUklBQkxFEAISJgoiQ0FSUllfU1RBVEVfQ0FSUklBQkxF",
            "X0FORF9TVE9XQUJMRRADSgQIARACSgQIAhADSgQIAxAESgQIBBAFSgQIBRAG",
            "SgQIBxAISgQICBAJSgQIChALSgQICxAMIosCChFTZXJ2aWNlRmF1bHRTdGF0",
            "ZRIoCgZmYXVsdHMYASADKAsyGC5ib3NkeW4uYXBpLlNlcnZpY2VGYXVsdBIz",
            "ChFoaXN0b3JpY2FsX2ZhdWx0cxgCIAMoCzIYLmJvc2R5bi5hcGkuU2Vydmlj",
            "ZUZhdWx0EkEKCmFnZ3JlZ2F0ZWQYAyADKAsyLS5ib3NkeW4uYXBpLlNlcnZp",
            "Y2VGYXVsdFN0YXRlLkFnZ3JlZ2F0ZWRFbnRyeRpUCg9BZ2dyZWdhdGVkRW50",
            "cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgOMiEuYm9zZHluLmFwaS5T",
            "ZXJ2aWNlRmF1bHQuU2V2ZXJpdHk6AjgBIj4KEVJvYm90U3RhdGVSZXF1ZXN0",
            "EikKBmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJt",
            "ChJSb2JvdFN0YXRlUmVzcG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHlu",
            "LmFwaS5SZXNwb25zZUhlYWRlchIrCgtyb2JvdF9zdGF0ZRgCIAEoCzIWLmJv",
            "c2R5bi5hcGkuUm9ib3RTdGF0ZSJAChNSb2JvdE1ldHJpY3NSZXF1ZXN0EikK",
            "BmhlYWRlchgBIAEoCzIZLmJvc2R5bi5hcGkuUmVxdWVzdEhlYWRlciJzChRS",
            "b2JvdE1ldHJpY3NSZXNwb25zZRIqCgZoZWFkZXIYASABKAsyGi5ib3NkeW4u",
            "YXBpLlJlc3BvbnNlSGVhZGVyEi8KDXJvYm90X21ldHJpY3MYAiABKAsyGC5i",
            "b3NkeW4uYXBpLlJvYm90TWV0cmljcyJOCiFSb2JvdEhhcmR3YXJlQ29uZmln",
            "dXJhdGlvblJlcXVlc3QSKQoGaGVhZGVyGAEgASgLMhkuYm9zZHluLmFwaS5S",
            "ZXF1ZXN0SGVhZGVyIpMBCiJSb2JvdEhhcmR3YXJlQ29uZmlndXJhdGlvblJl",
            "c3BvbnNlEioKBmhlYWRlchgBIAEoCzIaLmJvc2R5bi5hcGkuUmVzcG9uc2VI",
            "ZWFkZXISQQoWaGFyZHdhcmVfY29uZmlndXJhdGlvbhgCIAEoCzIhLmJvc2R5",
            "bi5hcGkuSGFyZHdhcmVDb25maWd1cmF0aW9uIlUKFVJvYm90TGlua01vZGVs",
            "UmVxdWVzdBIpCgZoZWFkZXIYASABKAsyGS5ib3NkeW4uYXBpLlJlcXVlc3RI",
            "ZWFkZXISEQoJbGlua19uYW1lGAIgASgJInwKFlJvYm90TGlua01vZGVsUmVz",
            "cG9uc2USKgoGaGVhZGVyGAEgASgLMhouYm9zZHluLmFwaS5SZXNwb25zZUhl",
            "YWRlchI2CgpsaW5rX21vZGVsGAIgASgLMiIuYm9zZHluLmFwaS5Ta2VsZXRv",
            "bi5MaW5rLk9iak1vZGVsIpkEChJSb2JvdEltcGFpcmVkU3RhdGUSRgoPaW1w",
            "YWlyZWRfc3RhdHVzGAEgASgOMi0uYm9zZHluLmFwaS5Sb2JvdEltcGFpcmVk",
            "U3RhdGUuSW1wYWlyZWRTdGF0dXMSLgoNc3lzdGVtX2ZhdWx0cxgCIAMoCzIX",
            "LmJvc2R5bi5hcGkuU3lzdGVtRmF1bHQSMAoOc2VydmljZV9mYXVsdHMYAyAD",
            "KAsyGC5ib3NkeW4uYXBpLlNlcnZpY2VGYXVsdBIyCg9iZWhhdmlvcl9mYXVs",
            "dHMYBCADKAsyGS5ib3NkeW4uYXBpLkJlaGF2aW9yRmF1bHQipAIKDkltcGFp",
            "cmVkU3RhdHVzEhsKF0lNUEFJUkVEX1NUQVRVU19VTktOT1dOEAASFgoSSU1Q",
            "QUlSRURfU1RBVFVTX09LEAESIQodSU1QQUlSRURfU1RBVFVTX05PX1JPQk9U",
            "X0RBVEEQAhIgChxJTVBBSVJFRF9TVEFUVVNfU1lTVEVNX0ZBVUxUEAMSIgoe",
            "SU1QQUlSRURfU1RBVFVTX05PX01PVE9SX1BPV0VSEAQSLQopSU1QQUlSRURf",
            "U1RBVFVTX1JFTU9URV9DTE9VRFNfTk9UX1dPUktJTkcQBRIhCh1JTVBBSVJF",
            "RF9TVEFUVVNfU0VSVklDRV9GQVVMVBAGEiIKHklNUEFJUkVEX1NUQVRVU19C",
            "RUhBVklPUl9GQVVMVBAHQhFCD1JvYm90U3RhdGVQcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bosdyn.Api.GeometryReflection.Descriptor, global::Bosdyn.Api.HeaderReflection.Descriptor, global::Bosdyn.Api.ParameterReflection.Descriptor, global::Bosdyn.Api.ServiceFaultReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Skeleton), global::Bosdyn.Api.Skeleton.Parser, new[]{ "Links", "Urdf" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Skeleton.Types.Link), global::Bosdyn.Api.Skeleton.Types.Link.Parser, new[]{ "Name", "ObjModel" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel), global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel.Parser, new[]{ "FileName", "FileContents" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.HardwareConfiguration), global::Bosdyn.Api.HardwareConfiguration.Parser, new[]{ "Skeleton", "CanPowerCommandRequestOffRobot", "CanPowerCommandRequestCycleRobot", "CanPowerCommandRequestPayloadPorts", "CanPowerCommandRequestWifiRadio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotState), global::Bosdyn.Api.RobotState.Parser, new[]{ "PowerState", "BatteryStates", "CommsStates", "SystemFaultState", "EstopStates", "KinematicState", "BehaviorFaultState", "FootState", "ManipulatorState", "ServiceFaultState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.PowerState), global::Bosdyn.Api.PowerState.Parser, new[]{ "Timestamp", "MotorPowerState", "ShorePowerState", "RobotPowerState", "PayloadPortsPowerState", "WifiRadioPowerState", "LocomotionChargePercentage", "LocomotionEstimatedRuntime" }, null, new[]{ typeof(global::Bosdyn.Api.PowerState.Types.MotorPowerState), typeof(global::Bosdyn.Api.PowerState.Types.ShorePowerState), typeof(global::Bosdyn.Api.PowerState.Types.RobotPowerState), typeof(global::Bosdyn.Api.PowerState.Types.PayloadPortsPowerState), typeof(global::Bosdyn.Api.PowerState.Types.WifiRadioPowerState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SystemFaultState), global::Bosdyn.Api.SystemFaultState.Parser, new[]{ "Faults", "HistoricalFaults", "Aggregated" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.SystemFault), global::Bosdyn.Api.SystemFault.Parser, new[]{ "Name", "OnsetTimestamp", "Duration", "Code", "Uid", "ErrorMessage", "Attributes", "Severity" }, null, new[]{ typeof(global::Bosdyn.Api.SystemFault.Types.Severity) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.EStopState), global::Bosdyn.Api.EStopState.Parser, new[]{ "Timestamp", "Name", "Type", "State", "StateDescription" }, null, new[]{ typeof(global::Bosdyn.Api.EStopState.Types.Type), typeof(global::Bosdyn.Api.EStopState.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.BatteryState), global::Bosdyn.Api.BatteryState.Parser, new[]{ "Timestamp", "Identifier", "ChargePercentage", "EstimatedRuntime", "Current", "Voltage", "Temperatures", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.BatteryState.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.KinematicState), global::Bosdyn.Api.KinematicState.Parser, new[]{ "JointStates", "AcquisitionTimestamp", "TransformsSnapshot", "VelocityOfBodyInVision", "VelocityOfBodyInOdom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.JointState), global::Bosdyn.Api.JointState.Parser, new[]{ "Name", "Position", "Velocity", "Acceleration", "Load" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.BehaviorFaultState), global::Bosdyn.Api.BehaviorFaultState.Parser, new[]{ "Faults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.BehaviorFault), global::Bosdyn.Api.BehaviorFault.Parser, new[]{ "BehaviorFaultId", "OnsetTimestamp", "Cause", "Status" }, null, new[]{ typeof(global::Bosdyn.Api.BehaviorFault.Types.Cause), typeof(global::Bosdyn.Api.BehaviorFault.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotMetrics), global::Bosdyn.Api.RobotMetrics.Parser, new[]{ "Timestamp", "Metrics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.CommsState), global::Bosdyn.Api.CommsState.Parser, new[]{ "Timestamp", "WifiState" }, new[]{ "State" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.WiFiState), global::Bosdyn.Api.WiFiState.Parser, new[]{ "CurrentMode", "Essid" }, null, new[]{ typeof(global::Bosdyn.Api.WiFiState.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.FootState), global::Bosdyn.Api.FootState.Parser, new[]{ "FootPositionRtBody", "Contact", "Terrain" }, null, new[]{ typeof(global::Bosdyn.Api.FootState.Types.Contact) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.FootState.Types.TerrainState), global::Bosdyn.Api.FootState.Types.TerrainState.Parser, new[]{ "GroundMuEst", "FrameName", "FootSlipDistanceRtFrame", "FootSlipVelocityRtFrame", "GroundContactNormalRtFrame", "VisualSurfaceGroundPenetrationMean", "VisualSurfaceGroundPenetrationStd" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ManipulatorState), global::Bosdyn.Api.ManipulatorState.Parser, new[]{ "GripperOpenPercentage", "IsGripperHoldingItem", "EstimatedEndEffectorForceInHand", "StowState", "VelocityOfHandInVision", "VelocityOfHandInOdom", "CarryState" }, null, new[]{ typeof(global::Bosdyn.Api.ManipulatorState.Types.StowState), typeof(global::Bosdyn.Api.ManipulatorState.Types.CarryState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.ServiceFaultState), global::Bosdyn.Api.ServiceFaultState.Parser, new[]{ "Faults", "HistoricalFaults", "Aggregated" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotStateRequest), global::Bosdyn.Api.RobotStateRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotStateResponse), global::Bosdyn.Api.RobotStateResponse.Parser, new[]{ "Header", "RobotState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotMetricsRequest), global::Bosdyn.Api.RobotMetricsRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotMetricsResponse), global::Bosdyn.Api.RobotMetricsResponse.Parser, new[]{ "Header", "RobotMetrics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotHardwareConfigurationRequest), global::Bosdyn.Api.RobotHardwareConfigurationRequest.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotHardwareConfigurationResponse), global::Bosdyn.Api.RobotHardwareConfigurationResponse.Parser, new[]{ "Header", "HardwareConfiguration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotLinkModelRequest), global::Bosdyn.Api.RobotLinkModelRequest.Parser, new[]{ "Header", "LinkName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotLinkModelResponse), global::Bosdyn.Api.RobotLinkModelResponse.Parser, new[]{ "Header", "LinkModel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bosdyn.Api.RobotImpairedState), global::Bosdyn.Api.RobotImpairedState.Parser, new[]{ "ImpairedStatus", "SystemFaults", "ServiceFaults", "BehaviorFaults" }, null, new[]{ typeof(global::Bosdyn.Api.RobotImpairedState.Types.ImpairedStatus) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Kinematic model of the robot skeleton.
  /// </summary>
  public sealed partial class Skeleton : pb::IMessage<Skeleton> {
    private static readonly pb::MessageParser<Skeleton> _parser = new pb::MessageParser<Skeleton>(() => new Skeleton());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skeleton> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skeleton() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skeleton(Skeleton other) : this() {
      links_ = other.links_.Clone();
      urdf_ = other.urdf_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skeleton Clone() {
      return new Skeleton(this);
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Skeleton.Types.Link> _repeated_links_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.Skeleton.Types.Link.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Skeleton.Types.Link> links_ = new pbc::RepeatedField<global::Bosdyn.Api.Skeleton.Types.Link>();
    /// <summary>
    /// The list of links that make up the robot skeleton.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Skeleton.Types.Link> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "urdf" field.</summary>
    public const int UrdfFieldNumber = 3;
    private string urdf_ = "";
    /// <summary>
    /// URDF description of the robot skeleton.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Urdf {
      get { return urdf_; }
      set {
        urdf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skeleton);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skeleton other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!links_.Equals(other.links_)) return false;
      if (Urdf != other.Urdf) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= links_.GetHashCode();
      if (Urdf.Length != 0) hash ^= Urdf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      links_.WriteTo(output, _repeated_links_codec);
      if (Urdf.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Urdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += links_.CalculateSize(_repeated_links_codec);
      if (Urdf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Urdf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skeleton other) {
      if (other == null) {
        return;
      }
      links_.Add(other.links_);
      if (other.Urdf.Length != 0) {
        Urdf = other.Urdf;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 26: {
            Urdf = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Skeleton message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Each link of the robot skeleton.
      /// </summary>
      public sealed partial class Link : pb::IMessage<Link> {
        private static readonly pb::MessageParser<Link> _parser = new pb::MessageParser<Link>(() => new Link());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Link> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.Skeleton.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link(Link other) : this() {
          name_ = other.name_;
          objModel_ = other.objModel_ != null ? other.objModel_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link Clone() {
          return new Link(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// The link name, which matches those used in the urdf.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "obj_model" field.</summary>
        public const int ObjModelFieldNumber = 2;
        private global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel objModel_;
        /// <summary>
        /// The OBJ file representing the model of this link.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel ObjModel {
          get { return objModel_; }
          set {
            objModel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Link);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Link other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(ObjModel, other.ObjModel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (objModel_ != null) hash ^= ObjModel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (objModel_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ObjModel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (objModel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjModel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Link other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.objModel_ != null) {
            if (objModel_ == null) {
              ObjModel = new global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel();
            }
            ObjModel.MergeFrom(other.ObjModel);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (objModel_ == null) {
                  ObjModel = new global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel();
                }
                input.ReadMessage(ObjModel);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Link message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Model to draw, expressed as an obj file.
          /// Note: To limit the size of responses, obj_file_contents might be omitted.
          /// </summary>
          public sealed partial class ObjModel : pb::IMessage<ObjModel> {
            private static readonly pb::MessageParser<ObjModel> _parser = new pb::MessageParser<ObjModel>(() => new ObjModel());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ObjModel> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Bosdyn.Api.Skeleton.Types.Link.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjModel() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjModel(ObjModel other) : this() {
              fileName_ = other.fileName_;
              fileContents_ = other.fileContents_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjModel Clone() {
              return new ObjModel(this);
            }

            /// <summary>Field number for the "file_name" field.</summary>
            public const int FileNameFieldNumber = 1;
            private string fileName_ = "";
            /// <summary>
            /// Name of the file.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FileName {
              get { return fileName_; }
              set {
                fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "file_contents" field.</summary>
            public const int FileContentsFieldNumber = 2;
            private string fileContents_ = "";
            /// <summary>
            /// The contents of the file.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FileContents {
              get { return fileContents_; }
              set {
                fileContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ObjModel);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ObjModel other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FileName != other.FileName) return false;
              if (FileContents != other.FileContents) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (FileName.Length != 0) hash ^= FileName.GetHashCode();
              if (FileContents.Length != 0) hash ^= FileContents.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (FileName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(FileName);
              }
              if (FileContents.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(FileContents);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (FileName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
              }
              if (FileContents.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FileContents);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ObjModel other) {
              if (other == null) {
                return;
              }
              if (other.FileName.Length != 0) {
                FileName = other.FileName;
              }
              if (other.FileContents.Length != 0) {
                FileContents = other.FileContents;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    FileName = input.ReadString();
                    break;
                  }
                  case 18: {
                    FileContents = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Robot Hardware Configuration, described with the robot skeleton.
  /// </summary>
  public sealed partial class HardwareConfiguration : pb::IMessage<HardwareConfiguration> {
    private static readonly pb::MessageParser<HardwareConfiguration> _parser = new pb::MessageParser<HardwareConfiguration>(() => new HardwareConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HardwareConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareConfiguration(HardwareConfiguration other) : this() {
      skeleton_ = other.skeleton_ != null ? other.skeleton_.Clone() : null;
      canPowerCommandRequestOffRobot_ = other.canPowerCommandRequestOffRobot_;
      canPowerCommandRequestCycleRobot_ = other.canPowerCommandRequestCycleRobot_;
      canPowerCommandRequestPayloadPorts_ = other.canPowerCommandRequestPayloadPorts_;
      canPowerCommandRequestWifiRadio_ = other.canPowerCommandRequestWifiRadio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareConfiguration Clone() {
      return new HardwareConfiguration(this);
    }

    /// <summary>Field number for the "skeleton" field.</summary>
    public const int SkeletonFieldNumber = 1;
    private global::Bosdyn.Api.Skeleton skeleton_;
    /// <summary>
    /// Robot link and joint description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Skeleton Skeleton {
      get { return skeleton_; }
      set {
        skeleton_ = value;
      }
    }

    /// <summary>Field number for the "can_power_command_request_off_robot" field.</summary>
    public const int CanPowerCommandRequestOffRobotFieldNumber = 2;
    private bool canPowerCommandRequestOffRobot_;
    /// <summary>
    /// Turn off the robot. Same as physical switch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPowerCommandRequestOffRobot {
      get { return canPowerCommandRequestOffRobot_; }
      set {
        canPowerCommandRequestOffRobot_ = value;
      }
    }

    /// <summary>Field number for the "can_power_command_request_cycle_robot" field.</summary>
    public const int CanPowerCommandRequestCycleRobotFieldNumber = 3;
    private bool canPowerCommandRequestCycleRobot_;
    /// <summary>
    /// Power cycle the robot. Same as physical switch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPowerCommandRequestCycleRobot {
      get { return canPowerCommandRequestCycleRobot_; }
      set {
        canPowerCommandRequestCycleRobot_ = value;
      }
    }

    /// <summary>Field number for the "can_power_command_request_payload_ports" field.</summary>
    public const int CanPowerCommandRequestPayloadPortsFieldNumber = 4;
    private bool canPowerCommandRequestPayloadPorts_;
    /// <summary>
    /// Control power to the payload ports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPowerCommandRequestPayloadPorts {
      get { return canPowerCommandRequestPayloadPorts_; }
      set {
        canPowerCommandRequestPayloadPorts_ = value;
      }
    }

    /// <summary>Field number for the "can_power_command_request_wifi_radio" field.</summary>
    public const int CanPowerCommandRequestWifiRadioFieldNumber = 5;
    private bool canPowerCommandRequestWifiRadio_;
    /// <summary>
    /// Control power to the hardware Wi-Fi radio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPowerCommandRequestWifiRadio {
      get { return canPowerCommandRequestWifiRadio_; }
      set {
        canPowerCommandRequestWifiRadio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HardwareConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HardwareConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Skeleton, other.Skeleton)) return false;
      if (CanPowerCommandRequestOffRobot != other.CanPowerCommandRequestOffRobot) return false;
      if (CanPowerCommandRequestCycleRobot != other.CanPowerCommandRequestCycleRobot) return false;
      if (CanPowerCommandRequestPayloadPorts != other.CanPowerCommandRequestPayloadPorts) return false;
      if (CanPowerCommandRequestWifiRadio != other.CanPowerCommandRequestWifiRadio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (skeleton_ != null) hash ^= Skeleton.GetHashCode();
      if (CanPowerCommandRequestOffRobot != false) hash ^= CanPowerCommandRequestOffRobot.GetHashCode();
      if (CanPowerCommandRequestCycleRobot != false) hash ^= CanPowerCommandRequestCycleRobot.GetHashCode();
      if (CanPowerCommandRequestPayloadPorts != false) hash ^= CanPowerCommandRequestPayloadPorts.GetHashCode();
      if (CanPowerCommandRequestWifiRadio != false) hash ^= CanPowerCommandRequestWifiRadio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (skeleton_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Skeleton);
      }
      if (CanPowerCommandRequestOffRobot != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanPowerCommandRequestOffRobot);
      }
      if (CanPowerCommandRequestCycleRobot != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPowerCommandRequestCycleRobot);
      }
      if (CanPowerCommandRequestPayloadPorts != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanPowerCommandRequestPayloadPorts);
      }
      if (CanPowerCommandRequestWifiRadio != false) {
        output.WriteRawTag(40);
        output.WriteBool(CanPowerCommandRequestWifiRadio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (skeleton_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skeleton);
      }
      if (CanPowerCommandRequestOffRobot != false) {
        size += 1 + 1;
      }
      if (CanPowerCommandRequestCycleRobot != false) {
        size += 1 + 1;
      }
      if (CanPowerCommandRequestPayloadPorts != false) {
        size += 1 + 1;
      }
      if (CanPowerCommandRequestWifiRadio != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HardwareConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.skeleton_ != null) {
        if (skeleton_ == null) {
          Skeleton = new global::Bosdyn.Api.Skeleton();
        }
        Skeleton.MergeFrom(other.Skeleton);
      }
      if (other.CanPowerCommandRequestOffRobot != false) {
        CanPowerCommandRequestOffRobot = other.CanPowerCommandRequestOffRobot;
      }
      if (other.CanPowerCommandRequestCycleRobot != false) {
        CanPowerCommandRequestCycleRobot = other.CanPowerCommandRequestCycleRobot;
      }
      if (other.CanPowerCommandRequestPayloadPorts != false) {
        CanPowerCommandRequestPayloadPorts = other.CanPowerCommandRequestPayloadPorts;
      }
      if (other.CanPowerCommandRequestWifiRadio != false) {
        CanPowerCommandRequestWifiRadio = other.CanPowerCommandRequestWifiRadio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (skeleton_ == null) {
              Skeleton = new global::Bosdyn.Api.Skeleton();
            }
            input.ReadMessage(Skeleton);
            break;
          }
          case 16: {
            CanPowerCommandRequestOffRobot = input.ReadBool();
            break;
          }
          case 24: {
            CanPowerCommandRequestCycleRobot = input.ReadBool();
            break;
          }
          case 32: {
            CanPowerCommandRequestPayloadPorts = input.ReadBool();
            break;
          }
          case 40: {
            CanPowerCommandRequestWifiRadio = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The current state of the robot.
  /// </summary>
  public sealed partial class RobotState : pb::IMessage<RobotState> {
    private static readonly pb::MessageParser<RobotState> _parser = new pb::MessageParser<RobotState>(() => new RobotState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState(RobotState other) : this() {
      powerState_ = other.powerState_ != null ? other.powerState_.Clone() : null;
      batteryStates_ = other.batteryStates_.Clone();
      commsStates_ = other.commsStates_.Clone();
      systemFaultState_ = other.systemFaultState_ != null ? other.systemFaultState_.Clone() : null;
      estopStates_ = other.estopStates_.Clone();
      kinematicState_ = other.kinematicState_ != null ? other.kinematicState_.Clone() : null;
      behaviorFaultState_ = other.behaviorFaultState_ != null ? other.behaviorFaultState_.Clone() : null;
      footState_ = other.footState_.Clone();
      manipulatorState_ = other.manipulatorState_ != null ? other.manipulatorState_.Clone() : null;
      serviceFaultState_ = other.serviceFaultState_ != null ? other.serviceFaultState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState Clone() {
      return new RobotState(this);
    }

    /// <summary>Field number for the "power_state" field.</summary>
    public const int PowerStateFieldNumber = 1;
    private global::Bosdyn.Api.PowerState powerState_;
    /// <summary>
    /// Power state (e.g. motor power).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState PowerState {
      get { return powerState_; }
      set {
        powerState_ = value;
      }
    }

    /// <summary>Field number for the "battery_states" field.</summary>
    public const int BatteryStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.BatteryState> _repeated_batteryStates_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.BatteryState.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.BatteryState> batteryStates_ = new pbc::RepeatedField<global::Bosdyn.Api.BatteryState>();
    /// <summary>
    /// Battery state (e.g. charge, temperature, current).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.BatteryState> BatteryStates {
      get { return batteryStates_; }
    }

    /// <summary>Field number for the "comms_states" field.</summary>
    public const int CommsStatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.CommsState> _repeated_commsStates_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.CommsState.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.CommsState> commsStates_ = new pbc::RepeatedField<global::Bosdyn.Api.CommsState>();
    /// <summary>
    /// Communication state (e.g. type of comms network).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.CommsState> CommsStates {
      get { return commsStates_; }
    }

    /// <summary>Field number for the "system_fault_state" field.</summary>
    public const int SystemFaultStateFieldNumber = 4;
    private global::Bosdyn.Api.SystemFaultState systemFaultState_;
    /// <summary>
    /// Different system faults for the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SystemFaultState SystemFaultState {
      get { return systemFaultState_; }
      set {
        systemFaultState_ = value;
      }
    }

    /// <summary>Field number for the "estop_states" field.</summary>
    public const int EstopStatesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.EStopState> _repeated_estopStates_codec
        = pb::FieldCodec.ForMessage(42, global::Bosdyn.Api.EStopState.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.EStopState> estopStates_ = new pbc::RepeatedField<global::Bosdyn.Api.EStopState>();
    /// <summary>
    /// Because there may be multiple E-Stops, and because E-Stops may be supplied with payloads,
    /// this is a repeated field instead of a hardcoded list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.EStopState> EstopStates {
      get { return estopStates_; }
    }

    /// <summary>Field number for the "kinematic_state" field.</summary>
    public const int KinematicStateFieldNumber = 6;
    private global::Bosdyn.Api.KinematicState kinematicState_;
    /// <summary>
    /// Kinematic state of the robot (e.g. positions, velocities, other frame information).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.KinematicState KinematicState {
      get { return kinematicState_; }
      set {
        kinematicState_ = value;
      }
    }

    /// <summary>Field number for the "behavior_fault_state" field.</summary>
    public const int BehaviorFaultStateFieldNumber = 7;
    private global::Bosdyn.Api.BehaviorFaultState behaviorFaultState_;
    /// <summary>
    /// Robot behavior fault state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.BehaviorFaultState BehaviorFaultState {
      get { return behaviorFaultState_; }
      set {
        behaviorFaultState_ = value;
      }
    }

    /// <summary>Field number for the "foot_state" field.</summary>
    public const int FootStateFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.FootState> _repeated_footState_codec
        = pb::FieldCodec.ForMessage(66, global::Bosdyn.Api.FootState.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.FootState> footState_ = new pbc::RepeatedField<global::Bosdyn.Api.FootState>();
    /// <summary>
    /// The foot states (and contact information).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.FootState> FootState {
      get { return footState_; }
    }

    /// <summary>Field number for the "manipulator_state" field.</summary>
    public const int ManipulatorStateFieldNumber = 11;
    private global::Bosdyn.Api.ManipulatorState manipulatorState_;
    /// <summary>
    //// State of the manipulator, only populated if an arm is attached to the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ManipulatorState ManipulatorState {
      get { return manipulatorState_; }
      set {
        manipulatorState_ = value;
      }
    }

    /// <summary>Field number for the "service_fault_state" field.</summary>
    public const int ServiceFaultStateFieldNumber = 10;
    private global::Bosdyn.Api.ServiceFaultState serviceFaultState_;
    /// <summary>
    /// Service faults for services registered with the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ServiceFaultState ServiceFaultState {
      get { return serviceFaultState_; }
      set {
        serviceFaultState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PowerState, other.PowerState)) return false;
      if(!batteryStates_.Equals(other.batteryStates_)) return false;
      if(!commsStates_.Equals(other.commsStates_)) return false;
      if (!object.Equals(SystemFaultState, other.SystemFaultState)) return false;
      if(!estopStates_.Equals(other.estopStates_)) return false;
      if (!object.Equals(KinematicState, other.KinematicState)) return false;
      if (!object.Equals(BehaviorFaultState, other.BehaviorFaultState)) return false;
      if(!footState_.Equals(other.footState_)) return false;
      if (!object.Equals(ManipulatorState, other.ManipulatorState)) return false;
      if (!object.Equals(ServiceFaultState, other.ServiceFaultState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (powerState_ != null) hash ^= PowerState.GetHashCode();
      hash ^= batteryStates_.GetHashCode();
      hash ^= commsStates_.GetHashCode();
      if (systemFaultState_ != null) hash ^= SystemFaultState.GetHashCode();
      hash ^= estopStates_.GetHashCode();
      if (kinematicState_ != null) hash ^= KinematicState.GetHashCode();
      if (behaviorFaultState_ != null) hash ^= BehaviorFaultState.GetHashCode();
      hash ^= footState_.GetHashCode();
      if (manipulatorState_ != null) hash ^= ManipulatorState.GetHashCode();
      if (serviceFaultState_ != null) hash ^= ServiceFaultState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (powerState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PowerState);
      }
      batteryStates_.WriteTo(output, _repeated_batteryStates_codec);
      commsStates_.WriteTo(output, _repeated_commsStates_codec);
      if (systemFaultState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SystemFaultState);
      }
      estopStates_.WriteTo(output, _repeated_estopStates_codec);
      if (kinematicState_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(KinematicState);
      }
      if (behaviorFaultState_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BehaviorFaultState);
      }
      footState_.WriteTo(output, _repeated_footState_codec);
      if (serviceFaultState_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ServiceFaultState);
      }
      if (manipulatorState_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ManipulatorState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (powerState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerState);
      }
      size += batteryStates_.CalculateSize(_repeated_batteryStates_codec);
      size += commsStates_.CalculateSize(_repeated_commsStates_codec);
      if (systemFaultState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemFaultState);
      }
      size += estopStates_.CalculateSize(_repeated_estopStates_codec);
      if (kinematicState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KinematicState);
      }
      if (behaviorFaultState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BehaviorFaultState);
      }
      size += footState_.CalculateSize(_repeated_footState_codec);
      if (manipulatorState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManipulatorState);
      }
      if (serviceFaultState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceFaultState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotState other) {
      if (other == null) {
        return;
      }
      if (other.powerState_ != null) {
        if (powerState_ == null) {
          PowerState = new global::Bosdyn.Api.PowerState();
        }
        PowerState.MergeFrom(other.PowerState);
      }
      batteryStates_.Add(other.batteryStates_);
      commsStates_.Add(other.commsStates_);
      if (other.systemFaultState_ != null) {
        if (systemFaultState_ == null) {
          SystemFaultState = new global::Bosdyn.Api.SystemFaultState();
        }
        SystemFaultState.MergeFrom(other.SystemFaultState);
      }
      estopStates_.Add(other.estopStates_);
      if (other.kinematicState_ != null) {
        if (kinematicState_ == null) {
          KinematicState = new global::Bosdyn.Api.KinematicState();
        }
        KinematicState.MergeFrom(other.KinematicState);
      }
      if (other.behaviorFaultState_ != null) {
        if (behaviorFaultState_ == null) {
          BehaviorFaultState = new global::Bosdyn.Api.BehaviorFaultState();
        }
        BehaviorFaultState.MergeFrom(other.BehaviorFaultState);
      }
      footState_.Add(other.footState_);
      if (other.manipulatorState_ != null) {
        if (manipulatorState_ == null) {
          ManipulatorState = new global::Bosdyn.Api.ManipulatorState();
        }
        ManipulatorState.MergeFrom(other.ManipulatorState);
      }
      if (other.serviceFaultState_ != null) {
        if (serviceFaultState_ == null) {
          ServiceFaultState = new global::Bosdyn.Api.ServiceFaultState();
        }
        ServiceFaultState.MergeFrom(other.ServiceFaultState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (powerState_ == null) {
              PowerState = new global::Bosdyn.Api.PowerState();
            }
            input.ReadMessage(PowerState);
            break;
          }
          case 18: {
            batteryStates_.AddEntriesFrom(input, _repeated_batteryStates_codec);
            break;
          }
          case 26: {
            commsStates_.AddEntriesFrom(input, _repeated_commsStates_codec);
            break;
          }
          case 34: {
            if (systemFaultState_ == null) {
              SystemFaultState = new global::Bosdyn.Api.SystemFaultState();
            }
            input.ReadMessage(SystemFaultState);
            break;
          }
          case 42: {
            estopStates_.AddEntriesFrom(input, _repeated_estopStates_codec);
            break;
          }
          case 50: {
            if (kinematicState_ == null) {
              KinematicState = new global::Bosdyn.Api.KinematicState();
            }
            input.ReadMessage(KinematicState);
            break;
          }
          case 58: {
            if (behaviorFaultState_ == null) {
              BehaviorFaultState = new global::Bosdyn.Api.BehaviorFaultState();
            }
            input.ReadMessage(BehaviorFaultState);
            break;
          }
          case 66: {
            footState_.AddEntriesFrom(input, _repeated_footState_codec);
            break;
          }
          case 82: {
            if (serviceFaultState_ == null) {
              ServiceFaultState = new global::Bosdyn.Api.ServiceFaultState();
            }
            input.ReadMessage(ServiceFaultState);
            break;
          }
          case 90: {
            if (manipulatorState_ == null) {
              ManipulatorState = new global::Bosdyn.Api.ManipulatorState();
            }
            input.ReadMessage(ManipulatorState);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The power state for the robot.
  /// If a robot is not in the POWER OFF state, if is not safe to approach.
  /// The robot must not be E-Stopped to enter the POWER_ON state.
  /// </summary>
  public sealed partial class PowerState : pb::IMessage<PowerState> {
    private static readonly pb::MessageParser<PowerState> _parser = new pb::MessageParser<PowerState>(() => new PowerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerState(PowerState other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      motorPowerState_ = other.motorPowerState_;
      shorePowerState_ = other.shorePowerState_;
      robotPowerState_ = other.robotPowerState_;
      payloadPortsPowerState_ = other.payloadPortsPowerState_;
      wifiRadioPowerState_ = other.wifiRadioPowerState_;
      LocomotionChargePercentage = other.LocomotionChargePercentage;
      locomotionEstimatedRuntime_ = other.locomotionEstimatedRuntime_ != null ? other.locomotionEstimatedRuntime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerState Clone() {
      return new PowerState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Robot clock timestamp corresponding to these readings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "motor_power_state" field.</summary>
    public const int MotorPowerStateFieldNumber = 2;
    private global::Bosdyn.Api.PowerState.Types.MotorPowerState motorPowerState_ = 0;
    /// <summary>
    /// The motor power state of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState.Types.MotorPowerState MotorPowerState {
      get { return motorPowerState_; }
      set {
        motorPowerState_ = value;
      }
    }

    /// <summary>Field number for the "shore_power_state" field.</summary>
    public const int ShorePowerStateFieldNumber = 3;
    private global::Bosdyn.Api.PowerState.Types.ShorePowerState shorePowerState_ = 0;
    /// <summary>
    /// The shore power state of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState.Types.ShorePowerState ShorePowerState {
      get { return shorePowerState_; }
      set {
        shorePowerState_ = value;
      }
    }

    /// <summary>Field number for the "robot_power_state" field.</summary>
    public const int RobotPowerStateFieldNumber = 6;
    private global::Bosdyn.Api.PowerState.Types.RobotPowerState robotPowerState_ = 0;
    /// <summary>
    /// The payload ports power state of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState.Types.RobotPowerState RobotPowerState {
      get { return robotPowerState_; }
      set {
        robotPowerState_ = value;
      }
    }

    /// <summary>Field number for the "payload_ports_power_state" field.</summary>
    public const int PayloadPortsPowerStateFieldNumber = 7;
    private global::Bosdyn.Api.PowerState.Types.PayloadPortsPowerState payloadPortsPowerState_ = 0;
    /// <summary>
    /// The payload ports power state of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState.Types.PayloadPortsPowerState PayloadPortsPowerState {
      get { return payloadPortsPowerState_; }
      set {
        payloadPortsPowerState_ = value;
      }
    }

    /// <summary>Field number for the "wifi_radio_power_state" field.</summary>
    public const int WifiRadioPowerStateFieldNumber = 9;
    private global::Bosdyn.Api.PowerState.Types.WifiRadioPowerState wifiRadioPowerState_ = 0;
    /// <summary>
    /// The hardware radio power state of the robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.PowerState.Types.WifiRadioPowerState WifiRadioPowerState {
      get { return wifiRadioPowerState_; }
      set {
        wifiRadioPowerState_ = value;
      }
    }

    /// <summary>Field number for the "locomotion_charge_percentage" field.</summary>
    public const int LocomotionChargePercentageFieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_locomotionChargePercentage_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? locomotionChargePercentage_;
    /// <summary>
    /// Number from 0 (empty) to 100 (full) indicating the estimated state of charge.
    /// This field provides a summary of the BatteryStates that provide power for motor and/or
    /// base compute power, both of which are required for locomotion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? LocomotionChargePercentage {
      get { return locomotionChargePercentage_; }
      set {
        locomotionChargePercentage_ = value;
      }
    }


    /// <summary>Field number for the "locomotion_estimated_runtime" field.</summary>
    public const int LocomotionEstimatedRuntimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Duration locomotionEstimatedRuntime_;
    /// <summary>
    /// An estimate of remaining runtime. Note that this field might not be populated.
    /// This field provides a summary of the BatteryStates that provide power for motor and/or
    /// base compute power, both of which are required for locomotion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration LocomotionEstimatedRuntime {
      get { return locomotionEstimatedRuntime_; }
      set {
        locomotionEstimatedRuntime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (MotorPowerState != other.MotorPowerState) return false;
      if (ShorePowerState != other.ShorePowerState) return false;
      if (RobotPowerState != other.RobotPowerState) return false;
      if (PayloadPortsPowerState != other.PayloadPortsPowerState) return false;
      if (WifiRadioPowerState != other.WifiRadioPowerState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(LocomotionChargePercentage, other.LocomotionChargePercentage)) return false;
      if (!object.Equals(LocomotionEstimatedRuntime, other.LocomotionEstimatedRuntime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (MotorPowerState != 0) hash ^= MotorPowerState.GetHashCode();
      if (ShorePowerState != 0) hash ^= ShorePowerState.GetHashCode();
      if (RobotPowerState != 0) hash ^= RobotPowerState.GetHashCode();
      if (PayloadPortsPowerState != 0) hash ^= PayloadPortsPowerState.GetHashCode();
      if (WifiRadioPowerState != 0) hash ^= WifiRadioPowerState.GetHashCode();
      if (locomotionChargePercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(LocomotionChargePercentage);
      if (locomotionEstimatedRuntime_ != null) hash ^= LocomotionEstimatedRuntime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (MotorPowerState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotorPowerState);
      }
      if (ShorePowerState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ShorePowerState);
      }
      if (locomotionChargePercentage_ != null) {
        _single_locomotionChargePercentage_codec.WriteTagAndValue(output, LocomotionChargePercentage);
      }
      if (locomotionEstimatedRuntime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LocomotionEstimatedRuntime);
      }
      if (RobotPowerState != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RobotPowerState);
      }
      if (PayloadPortsPowerState != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PayloadPortsPowerState);
      }
      if (WifiRadioPowerState != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) WifiRadioPowerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (MotorPowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotorPowerState);
      }
      if (ShorePowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShorePowerState);
      }
      if (RobotPowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RobotPowerState);
      }
      if (PayloadPortsPowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadPortsPowerState);
      }
      if (WifiRadioPowerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WifiRadioPowerState);
      }
      if (locomotionChargePercentage_ != null) {
        size += _single_locomotionChargePercentage_codec.CalculateSizeWithTag(LocomotionChargePercentage);
      }
      if (locomotionEstimatedRuntime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocomotionEstimatedRuntime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerState other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.MotorPowerState != 0) {
        MotorPowerState = other.MotorPowerState;
      }
      if (other.ShorePowerState != 0) {
        ShorePowerState = other.ShorePowerState;
      }
      if (other.RobotPowerState != 0) {
        RobotPowerState = other.RobotPowerState;
      }
      if (other.PayloadPortsPowerState != 0) {
        PayloadPortsPowerState = other.PayloadPortsPowerState;
      }
      if (other.WifiRadioPowerState != 0) {
        WifiRadioPowerState = other.WifiRadioPowerState;
      }
      if (other.locomotionChargePercentage_ != null) {
        if (locomotionChargePercentage_ == null || other.LocomotionChargePercentage != 0D) {
          LocomotionChargePercentage = other.LocomotionChargePercentage;
        }
      }
      if (other.locomotionEstimatedRuntime_ != null) {
        if (locomotionEstimatedRuntime_ == null) {
          LocomotionEstimatedRuntime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LocomotionEstimatedRuntime.MergeFrom(other.LocomotionEstimatedRuntime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 16: {
            MotorPowerState = (global::Bosdyn.Api.PowerState.Types.MotorPowerState) input.ReadEnum();
            break;
          }
          case 24: {
            ShorePowerState = (global::Bosdyn.Api.PowerState.Types.ShorePowerState) input.ReadEnum();
            break;
          }
          case 34: {
            double? value = _single_locomotionChargePercentage_codec.Read(input);
            if (locomotionChargePercentage_ == null || value != 0D) {
              LocomotionChargePercentage = value;
            }
            break;
          }
          case 42: {
            if (locomotionEstimatedRuntime_ == null) {
              LocomotionEstimatedRuntime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(LocomotionEstimatedRuntime);
            break;
          }
          case 48: {
            RobotPowerState = (global::Bosdyn.Api.PowerState.Types.RobotPowerState) input.ReadEnum();
            break;
          }
          case 56: {
            PayloadPortsPowerState = (global::Bosdyn.Api.PowerState.Types.PayloadPortsPowerState) input.ReadEnum();
            break;
          }
          case 72: {
            WifiRadioPowerState = (global::Bosdyn.Api.PowerState.Types.WifiRadioPowerState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PowerState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MotorPowerState {
        /// <summary>
        /// Unknown motor power state. Do not use this field.
        /// </summary>
        [pbr::OriginalName("STATE_UNKNOWN")] StateUnknown = 0,
        [pbr::OriginalName("MOTOR_POWER_STATE_UNKNOWN", PreferredAlias = false)] Unknown = 0,
        /// <summary>
        /// Motors are off, the robot is safe to approach.
        /// </summary>
        [pbr::OriginalName("STATE_OFF")] StateOff = 1,
        [pbr::OriginalName("MOTOR_POWER_STATE_OFF", PreferredAlias = false)] Off = 1,
        /// <summary>
        /// The motors are powered.
        /// </summary>
        [pbr::OriginalName("STATE_ON")] StateOn = 2,
        [pbr::OriginalName("MOTOR_POWER_STATE_ON", PreferredAlias = false)] On = 2,
        /// <summary>
        /// The robot has received an ON command, and is turning on.
        /// </summary>
        [pbr::OriginalName("STATE_POWERING_ON")] StatePoweringOn = 3,
        [pbr::OriginalName("MOTOR_POWER_STATE_POWERING_ON", PreferredAlias = false)] PoweringOn = 3,
        /// <summary>
        /// In the process of powering down, not yet safe to approach.
        /// </summary>
        [pbr::OriginalName("STATE_POWERING_OFF")] StatePoweringOff = 4,
        [pbr::OriginalName("MOTOR_POWER_STATE_POWERING_OFF", PreferredAlias = false)] PoweringOff = 4,
        /// <summary>
        /// The robot is in an error state and must be powered off before attempting to re-power.
        /// </summary>
        [pbr::OriginalName("STATE_ERROR")] StateError = 5,
        [pbr::OriginalName("MOTOR_POWER_STATE_ERROR", PreferredAlias = false)] Error = 5,
      }

      /// <summary>
      /// State describing if robot is connected to shore (wall) power. Robot can't be powered on
      /// while on shore power
      /// </summary>
      public enum ShorePowerState {
        /// <summary>
        /// Unknown shore power state. Do not use.
        /// </summary>
        [pbr::OriginalName("STATE_UNKNOWN_SHORE_POWER")] StateUnknownShorePower = 0,
        [pbr::OriginalName("SHORE_POWER_STATE_UNKNOWN", PreferredAlias = false)] Unknown = 0,
        /// <summary>
        /// The robot is connected to shore power. The robot will not power on while connected to
        /// shore power.
        /// </summary>
        [pbr::OriginalName("STATE_ON_SHORE_POWER")] StateOnShorePower = 1,
        [pbr::OriginalName("SHORE_POWER_STATE_ON", PreferredAlias = false)] On = 1,
        /// <summary>
        /// The robot is disconnected from shore power and motors can be powered up.
        /// </summary>
        [pbr::OriginalName("STATE_OFF_SHORE_POWER")] StateOffShorePower = 2,
        [pbr::OriginalName("SHORE_POWER_STATE_OFF", PreferredAlias = false)] Off = 2,
      }

      /// <summary>
      /// State describing if the robot has power.
      /// </summary>
      public enum RobotPowerState {
        /// <summary>
        /// Unknown robot power state. Do not use this field.
        /// </summary>
        [pbr::OriginalName("ROBOT_POWER_STATE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The robot is powered on.
        /// </summary>
        [pbr::OriginalName("ROBOT_POWER_STATE_ON")] On = 1,
        /// <summary>
        /// The robot does not have power.
        /// Impossible to get this response, as the robot cannot respond if it is powered off.
        /// </summary>
        [pbr::OriginalName("ROBOT_POWER_STATE_OFF")] Off = 2,
      }

      /// <summary>
      /// State describing if the payload port has power.
      /// </summary>
      public enum PayloadPortsPowerState {
        /// <summary>
        /// Unknown payload port power state. Do not use this field.
        /// </summary>
        [pbr::OriginalName("PAYLOAD_PORTS_POWER_STATE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The payload port is powered on.
        /// </summary>
        [pbr::OriginalName("PAYLOAD_PORTS_POWER_STATE_ON")] On = 1,
        /// <summary>
        /// The payload port does not have power.
        /// </summary>
        [pbr::OriginalName("PAYLOAD_PORTS_POWER_STATE_OFF")] Off = 2,
      }

      /// <summary>
      /// State describing if the robot Wi-Fi router has power.
      /// </summary>
      public enum WifiRadioPowerState {
        /// <summary>
        /// Unknown radio power state. Do not use this field.
        /// </summary>
        [pbr::OriginalName("WIFI_RADIO_POWER_STATE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The radio is powered on.
        /// </summary>
        [pbr::OriginalName("WIFI_RADIO_POWER_STATE_ON")] On = 1,
        /// <summary>
        /// The radio does not have power.
        /// </summary>
        [pbr::OriginalName("WIFI_RADIO_POWER_STATE_OFF")] Off = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The current state of each system fault the robot is experiencing.
  /// An "active" fault indicates a hardware/software currently on the robot.
  /// A "historical" fault indicates a, now cleared, hardware/software problem.
  /// Historical faults are useful to diagnose robot behavior subject to intermittent failed states.
  /// </summary>
  public sealed partial class SystemFaultState : pb::IMessage<SystemFaultState> {
    private static readonly pb::MessageParser<SystemFaultState> _parser = new pb::MessageParser<SystemFaultState>(() => new SystemFaultState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemFaultState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFaultState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFaultState(SystemFaultState other) : this() {
      faults_ = other.faults_.Clone();
      historicalFaults_ = other.historicalFaults_.Clone();
      aggregated_ = other.aggregated_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFaultState Clone() {
      return new SystemFaultState(this);
    }

    /// <summary>Field number for the "faults" field.</summary>
    public const int FaultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SystemFault> _repeated_faults_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.SystemFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SystemFault> faults_ = new pbc::RepeatedField<global::Bosdyn.Api.SystemFault>();
    /// <summary>
    /// Currently active faults
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SystemFault> Faults {
      get { return faults_; }
    }

    /// <summary>Field number for the "historical_faults" field.</summary>
    public const int HistoricalFaultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SystemFault> _repeated_historicalFaults_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SystemFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SystemFault> historicalFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.SystemFault>();
    /// <summary>
    /// Inactive faults that cleared within the last 10 minutes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SystemFault> HistoricalFaults {
      get { return historicalFaults_; }
    }

    /// <summary>Field number for the "aggregated" field.</summary>
    public const int AggregatedFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Bosdyn.Api.SystemFault.Types.Severity>.Codec _map_aggregated_codec
        = new pbc::MapField<string, global::Bosdyn.Api.SystemFault.Types.Severity>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Bosdyn.Api.SystemFault.Types.Severity) x), 26);
    private readonly pbc::MapField<string, global::Bosdyn.Api.SystemFault.Types.Severity> aggregated_ = new pbc::MapField<string, global::Bosdyn.Api.SystemFault.Types.Severity>();
    /// <summary>
    /// Aggregated fault data.
    /// This provides a very quick way of determining if there any
    /// "battery" or "vision" faults above a certain severity level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bosdyn.Api.SystemFault.Types.Severity> Aggregated {
      get { return aggregated_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemFaultState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemFaultState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faults_.Equals(other.faults_)) return false;
      if(!historicalFaults_.Equals(other.historicalFaults_)) return false;
      if (!Aggregated.Equals(other.Aggregated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= faults_.GetHashCode();
      hash ^= historicalFaults_.GetHashCode();
      hash ^= Aggregated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      faults_.WriteTo(output, _repeated_faults_codec);
      historicalFaults_.WriteTo(output, _repeated_historicalFaults_codec);
      aggregated_.WriteTo(output, _map_aggregated_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += faults_.CalculateSize(_repeated_faults_codec);
      size += historicalFaults_.CalculateSize(_repeated_historicalFaults_codec);
      size += aggregated_.CalculateSize(_map_aggregated_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemFaultState other) {
      if (other == null) {
        return;
      }
      faults_.Add(other.faults_);
      historicalFaults_.Add(other.historicalFaults_);
      aggregated_.Add(other.aggregated_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            faults_.AddEntriesFrom(input, _repeated_faults_codec);
            break;
          }
          case 18: {
            historicalFaults_.AddEntriesFrom(input, _repeated_historicalFaults_codec);
            break;
          }
          case 26: {
            aggregated_.AddEntriesFrom(input, _map_aggregated_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The current system faults for a robot.
  /// A fault is an indicator of a hardware or software problem on the robot. An
  /// active fault may indicate the robot may fail to comply with a user request.
  /// The exact response a fault may vary, but possible responses include: failure
  /// to enable motor power, loss of perception enabled behavior, or triggering a
  /// fault recovery behavior on robot.
  /// </summary>
  public sealed partial class SystemFault : pb::IMessage<SystemFault> {
    private static readonly pb::MessageParser<SystemFault> _parser = new pb::MessageParser<SystemFault>(() => new SystemFault());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemFault> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFault() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFault(SystemFault other) : this() {
      name_ = other.name_;
      onsetTimestamp_ = other.onsetTimestamp_ != null ? other.onsetTimestamp_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      code_ = other.code_;
      uid_ = other.uid_;
      errorMessage_ = other.errorMessage_;
      attributes_ = other.attributes_.Clone();
      severity_ = other.severity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemFault Clone() {
      return new SystemFault(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onset_timestamp" field.</summary>
    public const int OnsetTimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp onsetTimestamp_;
    /// <summary>
    /// Time of robot local clock at fault onset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OnsetTimestamp {
      get { return onsetTimestamp_; }
      set {
        onsetTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Time elapsed since onset of the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    /// <summary>
    /// Error code returned by a fault. The exact interpretation of the fault code
    /// is unique to each variety of fault on the robot. The code is useful for
    /// Boston Dynamics support staff to diagnose hardware/software issues on
    /// robot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 8;
    private ulong uid_;
    /// <summary>
    /// Fault UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 5;
    private string errorMessage_ = "";
    /// <summary>
    /// User visible description of the fault (and possibly remedies.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_attributes_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> attributes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fault attributes
    /// Each fault may be flagged with attribute metadata (strings in this case.)
    /// These attributes are useful to communicate that a particular fault may
    /// have significant effect on robot operations. Some potential attributes
    /// may be "robot", "imu", "vision", or "battery". These attributes would let
    /// us flag a fault as indicating a problem with the base robot hardware,
    /// gyro, perception system, or battery respectively. A fault may have, zero,
    /// one, or more attributes attached to it, i.e. a "battery" fault may also
    /// be considered a "robot" fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 7;
    private global::Bosdyn.Api.SystemFault.Types.Severity severity_ = 0;
    /// <summary>
    /// Fault severity, how bad is the fault?
    /// The severity level will have some indication of the potential robot
    /// response to the fault. For example, a fault marked with "battery"
    /// attribute and severity level SEVERITY_WARN may indicate a low battery
    /// state of charge. However a "battery" fault with severity level
    /// SEVERITY_CRITICAL likely means the robot is going to shutdown
    /// immediately.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SystemFault.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemFault);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemFault other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(OnsetTimestamp, other.OnsetTimestamp)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (Code != other.Code) return false;
      if (Uid != other.Uid) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (Severity != other.Severity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (onsetTimestamp_ != null) hash ^= OnsetTimestamp.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (onsetTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnsetTimestamp);
      }
      if (duration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Duration);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ErrorMessage);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (Severity != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Severity);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (onsetTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnsetTimestamp);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemFault other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.onsetTimestamp_ != null) {
        if (onsetTimestamp_ == null) {
          OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OnsetTimestamp.MergeFrom(other.OnsetTimestamp);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      attributes_.Add(other.attributes_);
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (onsetTimestamp_ == null) {
              OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OnsetTimestamp);
            break;
          }
          case 26: {
            if (duration_ == null) {
              Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Duration);
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 50: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 56: {
            Severity = (global::Bosdyn.Api.SystemFault.Types.Severity) input.ReadEnum();
            break;
          }
          case 64: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SystemFault message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Severity {
        /// <summary>
        /// Unknown severity
        /// </summary>
        [pbr::OriginalName("SEVERITY_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// No hardware problem
        /// </summary>
        [pbr::OriginalName("SEVERITY_INFO")] Info = 1,
        /// <summary>
        /// Robot performance may be degraded
        /// </summary>
        [pbr::OriginalName("SEVERITY_WARN")] Warn = 2,
        /// <summary>
        /// Critical fault
        /// </summary>
        [pbr::OriginalName("SEVERITY_CRITICAL")] Critical = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// The robot's current E-Stop states and endpoints.
  /// A typical robot has several different E-Stops, all which must be "NOT_ESTOPPED"
  /// in order to run the robot.
  /// </summary>
  public sealed partial class EStopState : pb::IMessage<EStopState> {
    private static readonly pb::MessageParser<EStopState> _parser = new pb::MessageParser<EStopState>(() => new EStopState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EStopState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStopState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStopState(EStopState other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      name_ = other.name_;
      type_ = other.type_;
      state_ = other.state_;
      stateDescription_ = other.stateDescription_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EStopState Clone() {
      return new EStopState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Robot clock timestamp corresponding to these readings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the E-Stop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Bosdyn.Api.EStopState.Types.Type type_ = 0;
    /// <summary>
    /// What kind of E-Stop this message describes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.EStopState.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Bosdyn.Api.EStopState.Types.State state_ = 0;
    /// <summary>
    /// The state of the E-Stop (is it E-Stopped or not?)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.EStopState.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "state_description" field.</summary>
    public const int StateDescriptionFieldNumber = 5;
    private string stateDescription_ = "";
    /// <summary>
    /// Optional description of E-Stop status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateDescription {
      get { return stateDescription_; }
      set {
        stateDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EStopState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EStopState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (State != other.State) return false;
      if (StateDescription != other.StateDescription) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (StateDescription.Length != 0) hash ^= StateDescription.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (StateDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StateDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (StateDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateDescription);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EStopState other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.StateDescription.Length != 0) {
        StateDescription = other.StateDescription;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Bosdyn.Api.EStopState.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            State = (global::Bosdyn.Api.EStopState.Types.State) input.ReadEnum();
            break;
          }
          case 42: {
            StateDescription = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EStopState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Unknown type of E-Stop. Do not use this field.
        /// </summary>
        [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// E-Stop is a physical button
        /// </summary>
        [pbr::OriginalName("TYPE_HARDWARE")] Hardware = 1,
        /// <summary>
        /// E-Stop is a software process
        /// </summary>
        [pbr::OriginalName("TYPE_SOFTWARE")] Software = 2,
      }

      public enum State {
        /// <summary>
        /// No E-Stop information is present. Only happens in an error case.
        /// </summary>
        [pbr::OriginalName("STATE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// E-Stop is active -- robot cannot power its actuators.
        /// </summary>
        [pbr::OriginalName("STATE_ESTOPPED")] Estopped = 1,
        /// <summary>
        /// E-Stop is released -- robot may be able to power its actuators.
        /// </summary>
        [pbr::OriginalName("STATE_NOT_ESTOPPED")] NotEstopped = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The battery state for the robot. This includes information about the charge or the
  /// battery temperature.
  /// </summary>
  public sealed partial class BatteryState : pb::IMessage<BatteryState> {
    private static readonly pb::MessageParser<BatteryState> _parser = new pb::MessageParser<BatteryState>(() => new BatteryState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatteryState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryState(BatteryState other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      identifier_ = other.identifier_;
      ChargePercentage = other.ChargePercentage;
      estimatedRuntime_ = other.estimatedRuntime_ != null ? other.estimatedRuntime_.Clone() : null;
      Current = other.Current;
      Voltage = other.Voltage;
      temperatures_ = other.temperatures_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryState Clone() {
      return new BatteryState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Robot clock timestamp corresponding to these readings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 2;
    private string identifier_ = "";
    /// <summary>
    /// An identifier for this battery (could be a serial number or a name. subject to change).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_percentage" field.</summary>
    public const int ChargePercentageFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_chargePercentage_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? chargePercentage_;
    /// <summary>
    /// Number from 0 (empty) to 100 (full) indicating the estimated state of charge of the battery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ChargePercentage {
      get { return chargePercentage_; }
      set {
        chargePercentage_ = value;
      }
    }


    /// <summary>Field number for the "estimated_runtime" field.</summary>
    public const int EstimatedRuntimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration estimatedRuntime_;
    /// <summary>
    /// An estimate of remaining runtime. Note that this field might not be populated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration EstimatedRuntime {
      get { return estimatedRuntime_; }
      set {
        estimatedRuntime_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_current_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? current_;
    /// <summary>
    /// Measured current into (charging, positive) or out of (discharging, negative) the battery in
    /// Amps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }


    /// <summary>Field number for the "voltage" field.</summary>
    public const int VoltageFieldNumber = 6;
    private static readonly pb::FieldCodec<double?> _single_voltage_codec = pb::FieldCodec.ForStructWrapper<double>(50);
    private double? voltage_;
    /// <summary>
    /// Measured voltage of the entire battery in Volts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Voltage {
      get { return voltage_; }
      set {
        voltage_ = value;
      }
    }


    /// <summary>Field number for the "temperatures" field.</summary>
    public const int TemperaturesFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_temperatures_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> temperatures_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Measured temperature measurements of battery, in Celsius.
    /// Temperatures may be measured in many locations across the battery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Temperatures {
      get { return temperatures_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Bosdyn.Api.BatteryState.Types.Status status_ = 0;
    /// <summary>
    /// Current state of the battery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.BatteryState.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatteryState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatteryState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Identifier != other.Identifier) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ChargePercentage, other.ChargePercentage)) return false;
      if (!object.Equals(EstimatedRuntime, other.EstimatedRuntime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Current, other.Current)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
      if(!temperatures_.Equals(other.temperatures_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (chargePercentage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ChargePercentage);
      if (estimatedRuntime_ != null) hash ^= EstimatedRuntime.GetHashCode();
      if (current_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Current);
      if (voltage_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Voltage);
      hash ^= temperatures_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identifier);
      }
      if (chargePercentage_ != null) {
        _single_chargePercentage_codec.WriteTagAndValue(output, ChargePercentage);
      }
      if (estimatedRuntime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EstimatedRuntime);
      }
      if (current_ != null) {
        _single_current_codec.WriteTagAndValue(output, Current);
      }
      if (voltage_ != null) {
        _single_voltage_codec.WriteTagAndValue(output, Voltage);
      }
      temperatures_.WriteTo(output, _repeated_temperatures_codec);
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (chargePercentage_ != null) {
        size += _single_chargePercentage_codec.CalculateSizeWithTag(ChargePercentage);
      }
      if (estimatedRuntime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EstimatedRuntime);
      }
      if (current_ != null) {
        size += _single_current_codec.CalculateSizeWithTag(Current);
      }
      if (voltage_ != null) {
        size += _single_voltage_codec.CalculateSizeWithTag(Voltage);
      }
      size += temperatures_.CalculateSize(_repeated_temperatures_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatteryState other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.chargePercentage_ != null) {
        if (chargePercentage_ == null || other.ChargePercentage != 0D) {
          ChargePercentage = other.ChargePercentage;
        }
      }
      if (other.estimatedRuntime_ != null) {
        if (estimatedRuntime_ == null) {
          EstimatedRuntime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        EstimatedRuntime.MergeFrom(other.EstimatedRuntime);
      }
      if (other.current_ != null) {
        if (current_ == null || other.Current != 0D) {
          Current = other.Current;
        }
      }
      if (other.voltage_ != null) {
        if (voltage_ == null || other.Voltage != 0D) {
          Voltage = other.Voltage;
        }
      }
      temperatures_.Add(other.temperatures_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            Identifier = input.ReadString();
            break;
          }
          case 26: {
            double? value = _single_chargePercentage_codec.Read(input);
            if (chargePercentage_ == null || value != 0D) {
              ChargePercentage = value;
            }
            break;
          }
          case 34: {
            if (estimatedRuntime_ == null) {
              EstimatedRuntime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(EstimatedRuntime);
            break;
          }
          case 42: {
            double? value = _single_current_codec.Read(input);
            if (current_ == null || value != 0D) {
              Current = value;
            }
            break;
          }
          case 50: {
            double? value = _single_voltage_codec.Read(input);
            if (voltage_ == null || value != 0D) {
              Voltage = value;
            }
            break;
          }
          case 58:
          case 57: {
            temperatures_.AddEntriesFrom(input, _repeated_temperatures_codec);
            break;
          }
          case 64: {
            Status = (global::Bosdyn.Api.BatteryState.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BatteryState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// The battery is in an unknown / unexpected state.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The battery is not plugged in or otherwise not talking.
        /// </summary>
        [pbr::OriginalName("STATUS_MISSING")] Missing = 1,
        /// <summary>
        /// The battery is plugged in to shore power and charging.
        /// </summary>
        [pbr::OriginalName("STATUS_CHARGING")] Charging = 2,
        /// <summary>
        /// The battery is not plugged into shore power and discharging.
        /// </summary>
        [pbr::OriginalName("STATUS_DISCHARGING")] Discharging = 3,
        /// <summary>
        /// The battery was just plugged in and is booting up= 3;
        /// </summary>
        [pbr::OriginalName("STATUS_BOOTING")] Booting = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// The kinematic state of the robot describes the current estimated positions of the robot body and joints throughout the world.
  /// It includes a transform snapshot of the robot’s current known frames as well as joint states and the velocity of the body.
  /// </summary>
  public sealed partial class KinematicState : pb::IMessage<KinematicState> {
    private static readonly pb::MessageParser<KinematicState> _parser = new pb::MessageParser<KinematicState>(() => new KinematicState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KinematicState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KinematicState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KinematicState(KinematicState other) : this() {
      jointStates_ = other.jointStates_.Clone();
      acquisitionTimestamp_ = other.acquisitionTimestamp_ != null ? other.acquisitionTimestamp_.Clone() : null;
      transformsSnapshot_ = other.transformsSnapshot_ != null ? other.transformsSnapshot_.Clone() : null;
      velocityOfBodyInVision_ = other.velocityOfBodyInVision_ != null ? other.velocityOfBodyInVision_.Clone() : null;
      velocityOfBodyInOdom_ = other.velocityOfBodyInOdom_ != null ? other.velocityOfBodyInOdom_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KinematicState Clone() {
      return new KinematicState(this);
    }

    /// <summary>Field number for the "joint_states" field.</summary>
    public const int JointStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.JointState> _repeated_jointStates_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.JointState.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.JointState> jointStates_ = new pbc::RepeatedField<global::Bosdyn.Api.JointState>();
    /// <summary>
    /// Joint state of all robot joints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.JointState> JointStates {
      get { return jointStates_; }
    }

    /// <summary>Field number for the "acquisition_timestamp" field.</summary>
    public const int AcquisitionTimestampFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp acquisitionTimestamp_;
    /// <summary>
    /// Robot clock timestamp corresponding to these readings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AcquisitionTimestamp {
      get { return acquisitionTimestamp_; }
      set {
        acquisitionTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "transforms_snapshot" field.</summary>
    public const int TransformsSnapshotFieldNumber = 31;
    private global::Bosdyn.Api.FrameTreeSnapshot transformsSnapshot_;
    /// <summary>
    /// A tree-based collection of transformations, which will include the transformations to the
    /// robot body ("body") in addition to transformations to the common frames ("world", "dr") and
    /// ground plane estimate "gpe".
    /// All transforms within the snapshot are at the acquisition time of kinematic state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FrameTreeSnapshot TransformsSnapshot {
      get { return transformsSnapshot_; }
      set {
        transformsSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "velocity_of_body_in_vision" field.</summary>
    public const int VelocityOfBodyInVisionFieldNumber = 8;
    private global::Bosdyn.Api.SE3Velocity velocityOfBodyInVision_;
    /// <summary>
    /// Velocity of the body frame with respect to vision frame and expressed in vision frame.
    /// The linear velocity is applied at the origin of the body frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Velocity VelocityOfBodyInVision {
      get { return velocityOfBodyInVision_; }
      set {
        velocityOfBodyInVision_ = value;
      }
    }

    /// <summary>Field number for the "velocity_of_body_in_odom" field.</summary>
    public const int VelocityOfBodyInOdomFieldNumber = 12;
    private global::Bosdyn.Api.SE3Velocity velocityOfBodyInOdom_;
    /// <summary>
    /// Velocity of the body frame with respect to odom frame and expressed in odom frame.
    /// Again, the linear velocity is applied at the origin of the body frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Velocity VelocityOfBodyInOdom {
      get { return velocityOfBodyInOdom_; }
      set {
        velocityOfBodyInOdom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KinematicState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KinematicState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jointStates_.Equals(other.jointStates_)) return false;
      if (!object.Equals(AcquisitionTimestamp, other.AcquisitionTimestamp)) return false;
      if (!object.Equals(TransformsSnapshot, other.TransformsSnapshot)) return false;
      if (!object.Equals(VelocityOfBodyInVision, other.VelocityOfBodyInVision)) return false;
      if (!object.Equals(VelocityOfBodyInOdom, other.VelocityOfBodyInOdom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jointStates_.GetHashCode();
      if (acquisitionTimestamp_ != null) hash ^= AcquisitionTimestamp.GetHashCode();
      if (transformsSnapshot_ != null) hash ^= TransformsSnapshot.GetHashCode();
      if (velocityOfBodyInVision_ != null) hash ^= VelocityOfBodyInVision.GetHashCode();
      if (velocityOfBodyInOdom_ != null) hash ^= VelocityOfBodyInOdom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jointStates_.WriteTo(output, _repeated_jointStates_codec);
      if (velocityOfBodyInVision_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(VelocityOfBodyInVision);
      }
      if (velocityOfBodyInOdom_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VelocityOfBodyInOdom);
      }
      if (acquisitionTimestamp_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(AcquisitionTimestamp);
      }
      if (transformsSnapshot_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(TransformsSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jointStates_.CalculateSize(_repeated_jointStates_codec);
      if (acquisitionTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AcquisitionTimestamp);
      }
      if (transformsSnapshot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformsSnapshot);
      }
      if (velocityOfBodyInVision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityOfBodyInVision);
      }
      if (velocityOfBodyInOdom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityOfBodyInOdom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KinematicState other) {
      if (other == null) {
        return;
      }
      jointStates_.Add(other.jointStates_);
      if (other.acquisitionTimestamp_ != null) {
        if (acquisitionTimestamp_ == null) {
          AcquisitionTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AcquisitionTimestamp.MergeFrom(other.AcquisitionTimestamp);
      }
      if (other.transformsSnapshot_ != null) {
        if (transformsSnapshot_ == null) {
          TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
        }
        TransformsSnapshot.MergeFrom(other.TransformsSnapshot);
      }
      if (other.velocityOfBodyInVision_ != null) {
        if (velocityOfBodyInVision_ == null) {
          VelocityOfBodyInVision = new global::Bosdyn.Api.SE3Velocity();
        }
        VelocityOfBodyInVision.MergeFrom(other.VelocityOfBodyInVision);
      }
      if (other.velocityOfBodyInOdom_ != null) {
        if (velocityOfBodyInOdom_ == null) {
          VelocityOfBodyInOdom = new global::Bosdyn.Api.SE3Velocity();
        }
        VelocityOfBodyInOdom.MergeFrom(other.VelocityOfBodyInOdom);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            jointStates_.AddEntriesFrom(input, _repeated_jointStates_codec);
            break;
          }
          case 66: {
            if (velocityOfBodyInVision_ == null) {
              VelocityOfBodyInVision = new global::Bosdyn.Api.SE3Velocity();
            }
            input.ReadMessage(VelocityOfBodyInVision);
            break;
          }
          case 98: {
            if (velocityOfBodyInOdom_ == null) {
              VelocityOfBodyInOdom = new global::Bosdyn.Api.SE3Velocity();
            }
            input.ReadMessage(VelocityOfBodyInOdom);
            break;
          }
          case 242: {
            if (acquisitionTimestamp_ == null) {
              AcquisitionTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AcquisitionTimestamp);
            break;
          }
          case 250: {
            if (transformsSnapshot_ == null) {
              TransformsSnapshot = new global::Bosdyn.Api.FrameTreeSnapshot();
            }
            input.ReadMessage(TransformsSnapshot);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Proto containing the state of a joint on the robot. This can be used with the robot skeleton to
  /// update the current view of the robot.
  /// </summary>
  public sealed partial class JointState : pb::IMessage<JointState> {
    private static readonly pb::MessageParser<JointState> _parser = new pb::MessageParser<JointState>(() => new JointState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JointState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointState(JointState other) : this() {
      name_ = other.name_;
      Position = other.Position;
      Velocity = other.Velocity;
      Acceleration = other.Acceleration;
      Load = other.Load;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointState Clone() {
      return new JointState(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// This name maps directly to the joints in the URDF.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_position_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? position_;
    /// <summary>
    /// This is typically an angle in radians as joints are typically revolute. However, for
    /// translational joints this could be a distance in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }


    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_velocity_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? velocity_;
    /// <summary>
    /// The joint velocity in [m/s].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }


    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_acceleration_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? acceleration_;
    /// <summary>
    /// The joint acceleration in [m/s^2].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }


    /// <summary>Field number for the "load" field.</summary>
    public const int LoadFieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_load_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? load_;
    /// <summary>
    /// This is typically a torque in Newton meters as joints are typically revolute. However, for
    /// translational joints this could be a force in Newtons.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Load {
      get { return load_; }
      set {
        load_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JointState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JointState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Velocity, other.Velocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Load, other.Load)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (position_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Position);
      if (velocity_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Velocity);
      if (acceleration_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Acceleration);
      if (load_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Load);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (position_ != null) {
        _single_position_codec.WriteTagAndValue(output, Position);
      }
      if (velocity_ != null) {
        _single_velocity_codec.WriteTagAndValue(output, Velocity);
      }
      if (acceleration_ != null) {
        _single_acceleration_codec.WriteTagAndValue(output, Acceleration);
      }
      if (load_ != null) {
        _single_load_codec.WriteTagAndValue(output, Load);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (position_ != null) {
        size += _single_position_codec.CalculateSizeWithTag(Position);
      }
      if (velocity_ != null) {
        size += _single_velocity_codec.CalculateSizeWithTag(Velocity);
      }
      if (acceleration_ != null) {
        size += _single_acceleration_codec.CalculateSizeWithTag(Acceleration);
      }
      if (load_ != null) {
        size += _single_load_codec.CalculateSizeWithTag(Load);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JointState other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.position_ != null) {
        if (position_ == null || other.Position != 0D) {
          Position = other.Position;
        }
      }
      if (other.velocity_ != null) {
        if (velocity_ == null || other.Velocity != 0D) {
          Velocity = other.Velocity;
        }
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null || other.Acceleration != 0D) {
          Acceleration = other.Acceleration;
        }
      }
      if (other.load_ != null) {
        if (load_ == null || other.Load != 0D) {
          Load = other.Load;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            double? value = _single_position_codec.Read(input);
            if (position_ == null || value != 0D) {
              Position = value;
            }
            break;
          }
          case 26: {
            double? value = _single_velocity_codec.Read(input);
            if (velocity_ == null || value != 0D) {
              Velocity = value;
            }
            break;
          }
          case 34: {
            double? value = _single_acceleration_codec.Read(input);
            if (acceleration_ == null || value != 0D) {
              Acceleration = value;
            }
            break;
          }
          case 42: {
            double? value = _single_load_codec.Read(input);
            if (load_ == null || value != 0D) {
              Load = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This describes any current behaviror faults on the robot, which would block any robot commands
  /// from going through. These can be cleared using the ClearBehaviorFault rpc in the robot command
  /// service.
  /// </summary>
  public sealed partial class BehaviorFaultState : pb::IMessage<BehaviorFaultState> {
    private static readonly pb::MessageParser<BehaviorFaultState> _parser = new pb::MessageParser<BehaviorFaultState>(() => new BehaviorFaultState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorFaultState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFaultState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFaultState(BehaviorFaultState other) : this() {
      faults_ = other.faults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFaultState Clone() {
      return new BehaviorFaultState(this);
    }

    /// <summary>Field number for the "faults" field.</summary>
    public const int FaultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.BehaviorFault> _repeated_faults_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.BehaviorFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault> faults_ = new pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault>();
    /// <summary>
    /// Current errors potentially blocking commands on robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault> Faults {
      get { return faults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorFaultState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorFaultState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faults_.Equals(other.faults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= faults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      faults_.WriteTo(output, _repeated_faults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += faults_.CalculateSize(_repeated_faults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorFaultState other) {
      if (other == null) {
        return;
      }
      faults_.Add(other.faults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            faults_.AddEntriesFrom(input, _repeated_faults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The details of what the behavior fault consistents of, and the id for the fault. The unique
  /// behavior_fault_id can be used to clear the fault in robot command service ClearBehaviorFault rpc.
  /// </summary>
  public sealed partial class BehaviorFault : pb::IMessage<BehaviorFault> {
    private static readonly pb::MessageParser<BehaviorFault> _parser = new pb::MessageParser<BehaviorFault>(() => new BehaviorFault());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorFault> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFault() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFault(BehaviorFault other) : this() {
      behaviorFaultId_ = other.behaviorFaultId_;
      onsetTimestamp_ = other.onsetTimestamp_ != null ? other.onsetTimestamp_.Clone() : null;
      cause_ = other.cause_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorFault Clone() {
      return new BehaviorFault(this);
    }

    /// <summary>Field number for the "behavior_fault_id" field.</summary>
    public const int BehaviorFaultIdFieldNumber = 1;
    private uint behaviorFaultId_;
    /// <summary>
    /// Behavior fault unique id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BehaviorFaultId {
      get { return behaviorFaultId_; }
      set {
        behaviorFaultId_ = value;
      }
    }

    /// <summary>Field number for the "onset_timestamp" field.</summary>
    public const int OnsetTimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp onsetTimestamp_;
    /// <summary>
    /// Time of robot local clock at time of the error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OnsetTimestamp {
      get { return onsetTimestamp_; }
      set {
        onsetTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 3;
    private global::Bosdyn.Api.BehaviorFault.Types.Cause cause_ = 0;
    /// <summary>
    /// The potential cause of the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.BehaviorFault.Types.Cause Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Bosdyn.Api.BehaviorFault.Types.Status status_ = 0;
    /// <summary>
    /// Information about the status/what can be done with the fault.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.BehaviorFault.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorFault);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorFault other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BehaviorFaultId != other.BehaviorFaultId) return false;
      if (!object.Equals(OnsetTimestamp, other.OnsetTimestamp)) return false;
      if (Cause != other.Cause) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BehaviorFaultId != 0) hash ^= BehaviorFaultId.GetHashCode();
      if (onsetTimestamp_ != null) hash ^= OnsetTimestamp.GetHashCode();
      if (Cause != 0) hash ^= Cause.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BehaviorFaultId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BehaviorFaultId);
      }
      if (onsetTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OnsetTimestamp);
      }
      if (Cause != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Cause);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BehaviorFaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BehaviorFaultId);
      }
      if (onsetTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnsetTimestamp);
      }
      if (Cause != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cause);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorFault other) {
      if (other == null) {
        return;
      }
      if (other.BehaviorFaultId != 0) {
        BehaviorFaultId = other.BehaviorFaultId;
      }
      if (other.onsetTimestamp_ != null) {
        if (onsetTimestamp_ == null) {
          OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OnsetTimestamp.MergeFrom(other.OnsetTimestamp);
      }
      if (other.Cause != 0) {
        Cause = other.Cause;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BehaviorFaultId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (onsetTimestamp_ == null) {
              OnsetTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OnsetTimestamp);
            break;
          }
          case 24: {
            Cause = (global::Bosdyn.Api.BehaviorFault.Types.Cause) input.ReadEnum();
            break;
          }
          case 32: {
            Status = (global::Bosdyn.Api.BehaviorFault.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BehaviorFault message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Cause {
        /// <summary>
        /// Unknown cause of error
        /// </summary>
        [pbr::OriginalName("CAUSE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Error caused by mobility failure or fall
        /// </summary>
        [pbr::OriginalName("CAUSE_FALL")] Fall = 1,
        /// <summary>
        /// Error caused by robot hardware malfunction
        /// </summary>
        [pbr::OriginalName("CAUSE_HARDWARE")] Hardware = 2,
        /// <summary>
        //// A lease has timed out
        /// </summary>
        [pbr::OriginalName("CAUSE_LEASE_TIMEOUT")] LeaseTimeout = 3,
      }

      public enum Status {
        /// <summary>
        /// Unknown clearable status
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Fault is clearable
        /// </summary>
        [pbr::OriginalName("STATUS_CLEARABLE")] Clearable = 1,
        /// <summary>
        /// Fault is currently not clearable
        /// </summary>
        [pbr::OriginalName("STATUS_UNCLEARABLE")] Unclearable = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Key robot metrics (e.g., Gait cycles (count), distance walked, time moving, etc...).
  /// </summary>
  public sealed partial class RobotMetrics : pb::IMessage<RobotMetrics> {
    private static readonly pb::MessageParser<RobotMetrics> _parser = new pb::MessageParser<RobotMetrics>(() => new RobotMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetrics(RobotMetrics other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      metrics_ = other.metrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetrics Clone() {
      return new RobotMetrics(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Robot timestamp corresponding to these metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.Parameter> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.Parameter.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.Parameter> metrics_ = new pbc::RepeatedField<global::Bosdyn.Api.Parameter>();
    /// <summary>
    /// Key tracked robot metrics, such as distance walked, runtime, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.Parameter> Metrics {
      get { return metrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= metrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotMetrics other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      metrics_.Add(other.metrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The current comms information, including what comms the robot is using and the current status
  /// of the comms network.
  /// </summary>
  public sealed partial class CommsState : pb::IMessage<CommsState> {
    private static readonly pb::MessageParser<CommsState> _parser = new pb::MessageParser<CommsState>(() => new CommsState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommsState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommsState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommsState(CommsState other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      switch (other.StateCase) {
        case StateOneofCase.WifiState:
          WifiState = other.WifiState.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommsState Clone() {
      return new CommsState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Robot timestamp corresponding to these readings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "wifi_state" field.</summary>
    public const int WifiStateFieldNumber = 2;
    /// <summary>
    /// The communication state is WiFi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.WiFiState WifiState {
      get { return stateCase_ == StateOneofCase.WifiState ? (global::Bosdyn.Api.WiFiState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.WifiState;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "state" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      WifiState = 2,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommsState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommsState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(WifiState, other.WifiState)) return false;
      if (StateCase != other.StateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (stateCase_ == StateOneofCase.WifiState) hash ^= WifiState.GetHashCode();
      hash ^= (int) stateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (stateCase_ == StateOneofCase.WifiState) {
        output.WriteRawTag(18);
        output.WriteMessage(WifiState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (stateCase_ == StateOneofCase.WifiState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WifiState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommsState other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      switch (other.StateCase) {
        case StateOneofCase.WifiState:
          if (WifiState == null) {
            WifiState = new global::Bosdyn.Api.WiFiState();
          }
          WifiState.MergeFrom(other.WifiState);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            global::Bosdyn.Api.WiFiState subBuilder = new global::Bosdyn.Api.WiFiState();
            if (stateCase_ == StateOneofCase.WifiState) {
              subBuilder.MergeFrom(WifiState);
            }
            input.ReadMessage(subBuilder);
            WifiState = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class WiFiState : pb::IMessage<WiFiState> {
    private static readonly pb::MessageParser<WiFiState> _parser = new pb::MessageParser<WiFiState>(() => new WiFiState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WiFiState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WiFiState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WiFiState(WiFiState other) : this() {
      currentMode_ = other.currentMode_;
      essid_ = other.essid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WiFiState Clone() {
      return new WiFiState(this);
    }

    /// <summary>Field number for the "current_mode" field.</summary>
    public const int CurrentModeFieldNumber = 1;
    private global::Bosdyn.Api.WiFiState.Types.Mode currentMode_ = 0;
    /// <summary>
    /// Current WiFi mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.WiFiState.Types.Mode CurrentMode {
      get { return currentMode_; }
      set {
        currentMode_ = value;
      }
    }

    /// <summary>Field number for the "essid" field.</summary>
    public const int EssidFieldNumber = 2;
    private string essid_ = "";
    /// <summary>
    /// Essid of robot (master mode) or connected network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Essid {
      get { return essid_; }
      set {
        essid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WiFiState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WiFiState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentMode != other.CurrentMode) return false;
      if (Essid != other.Essid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentMode != 0) hash ^= CurrentMode.GetHashCode();
      if (Essid.Length != 0) hash ^= Essid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentMode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrentMode);
      }
      if (Essid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Essid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentMode);
      }
      if (Essid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Essid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WiFiState other) {
      if (other == null) {
        return;
      }
      if (other.CurrentMode != 0) {
        CurrentMode = other.CurrentMode;
      }
      if (other.Essid.Length != 0) {
        Essid = other.Essid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentMode = (global::Bosdyn.Api.WiFiState.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            Essid = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WiFiState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        /// <summary>
        /// The robot's comms state is unknown, or no user requested mode.
        /// </summary>
        [pbr::OriginalName("MODE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The robot is acting as an access point.
        /// </summary>
        [pbr::OriginalName("MODE_ACCESS_POINT")] AccessPoint = 1,
        /// <summary>
        /// The robot is connected to a network.
        /// </summary>
        [pbr::OriginalName("MODE_CLIENT")] Client = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Information about the foot positions and contact state, on a per-foot basis.
  /// </summary>
  public sealed partial class FootState : pb::IMessage<FootState> {
    private static readonly pb::MessageParser<FootState> _parser = new pb::MessageParser<FootState>(() => new FootState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FootState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FootState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FootState(FootState other) : this() {
      footPositionRtBody_ = other.footPositionRtBody_ != null ? other.footPositionRtBody_.Clone() : null;
      contact_ = other.contact_;
      terrain_ = other.terrain_ != null ? other.terrain_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FootState Clone() {
      return new FootState(this);
    }

    /// <summary>Field number for the "foot_position_rt_body" field.</summary>
    public const int FootPositionRtBodyFieldNumber = 1;
    private global::Bosdyn.Api.Vec3 footPositionRtBody_;
    /// <summary>
    /// The foot position described relative to the body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 FootPositionRtBody {
      get { return footPositionRtBody_; }
      set {
        footPositionRtBody_ = value;
      }
    }

    /// <summary>Field number for the "contact" field.</summary>
    public const int ContactFieldNumber = 2;
    private global::Bosdyn.Api.FootState.Types.Contact contact_ = 0;
    /// <summary>
    /// Is the foot in contact with the ground?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FootState.Types.Contact Contact {
      get { return contact_; }
      set {
        contact_ = value;
      }
    }

    /// <summary>Field number for the "terrain" field.</summary>
    public const int TerrainFieldNumber = 3;
    private global::Bosdyn.Api.FootState.Types.TerrainState terrain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.FootState.Types.TerrainState Terrain {
      get { return terrain_; }
      set {
        terrain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FootState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FootState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FootPositionRtBody, other.FootPositionRtBody)) return false;
      if (Contact != other.Contact) return false;
      if (!object.Equals(Terrain, other.Terrain)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (footPositionRtBody_ != null) hash ^= FootPositionRtBody.GetHashCode();
      if (Contact != 0) hash ^= Contact.GetHashCode();
      if (terrain_ != null) hash ^= Terrain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (footPositionRtBody_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FootPositionRtBody);
      }
      if (Contact != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Contact);
      }
      if (terrain_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Terrain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (footPositionRtBody_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FootPositionRtBody);
      }
      if (Contact != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Contact);
      }
      if (terrain_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Terrain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FootState other) {
      if (other == null) {
        return;
      }
      if (other.footPositionRtBody_ != null) {
        if (footPositionRtBody_ == null) {
          FootPositionRtBody = new global::Bosdyn.Api.Vec3();
        }
        FootPositionRtBody.MergeFrom(other.FootPositionRtBody);
      }
      if (other.Contact != 0) {
        Contact = other.Contact;
      }
      if (other.terrain_ != null) {
        if (terrain_ == null) {
          Terrain = new global::Bosdyn.Api.FootState.Types.TerrainState();
        }
        Terrain.MergeFrom(other.Terrain);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (footPositionRtBody_ == null) {
              FootPositionRtBody = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(FootPositionRtBody);
            break;
          }
          case 16: {
            Contact = (global::Bosdyn.Api.FootState.Types.Contact) input.ReadEnum();
            break;
          }
          case 26: {
            if (terrain_ == null) {
              Terrain = new global::Bosdyn.Api.FootState.Types.TerrainState();
            }
            input.ReadMessage(Terrain);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FootState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Contact {
        /// <summary>
        /// Unknown contact. Do not use.
        /// </summary>
        [pbr::OriginalName("CONTACT_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The foot is currently in contact with the ground.
        /// </summary>
        [pbr::OriginalName("CONTACT_MADE")] Made = 1,
        /// <summary>
        /// The foot is not in contact with the ground.
        /// </summary>
        [pbr::OriginalName("CONTACT_LOST")] Lost = 2,
      }

      /// <summary>
      /// Foot specific terrain data. Data may not be valid if the contact state is
      /// not CONTACT_MADE.
      /// </summary>
      public sealed partial class TerrainState : pb::IMessage<TerrainState> {
        private static readonly pb::MessageParser<TerrainState> _parser = new pb::MessageParser<TerrainState>(() => new TerrainState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TerrainState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Bosdyn.Api.FootState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TerrainState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TerrainState(TerrainState other) : this() {
          groundMuEst_ = other.groundMuEst_;
          frameName_ = other.frameName_;
          footSlipDistanceRtFrame_ = other.footSlipDistanceRtFrame_ != null ? other.footSlipDistanceRtFrame_.Clone() : null;
          footSlipVelocityRtFrame_ = other.footSlipVelocityRtFrame_ != null ? other.footSlipVelocityRtFrame_.Clone() : null;
          groundContactNormalRtFrame_ = other.groundContactNormalRtFrame_ != null ? other.groundContactNormalRtFrame_.Clone() : null;
          visualSurfaceGroundPenetrationMean_ = other.visualSurfaceGroundPenetrationMean_;
          visualSurfaceGroundPenetrationStd_ = other.visualSurfaceGroundPenetrationStd_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TerrainState Clone() {
          return new TerrainState(this);
        }

        /// <summary>Field number for the "ground_mu_est" field.</summary>
        public const int GroundMuEstFieldNumber = 1;
        private double groundMuEst_;
        /// <summary>
        /// Estimated ground coefficient of friction for this foot.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GroundMuEst {
          get { return groundMuEst_; }
          set {
            groundMuEst_ = value;
          }
        }

        /// <summary>Field number for the "frame_name" field.</summary>
        public const int FrameNameFieldNumber = 2;
        private string frameName_ = "";
        /// <summary>
        /// Reference frame name for vector data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FrameName {
          get { return frameName_; }
          set {
            frameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "foot_slip_distance_rt_frame" field.</summary>
        public const int FootSlipDistanceRtFrameFieldNumber = 3;
        private global::Bosdyn.Api.Vec3 footSlipDistanceRtFrame_;
        /// <summary>
        /// Foot slip distance rt named frame
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 FootSlipDistanceRtFrame {
          get { return footSlipDistanceRtFrame_; }
          set {
            footSlipDistanceRtFrame_ = value;
          }
        }

        /// <summary>Field number for the "foot_slip_velocity_rt_frame" field.</summary>
        public const int FootSlipVelocityRtFrameFieldNumber = 4;
        private global::Bosdyn.Api.Vec3 footSlipVelocityRtFrame_;
        /// <summary>
        /// Foot slip velocity rt named frame
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 FootSlipVelocityRtFrame {
          get { return footSlipVelocityRtFrame_; }
          set {
            footSlipVelocityRtFrame_ = value;
          }
        }

        /// <summary>Field number for the "ground_contact_normal_rt_frame" field.</summary>
        public const int GroundContactNormalRtFrameFieldNumber = 5;
        private global::Bosdyn.Api.Vec3 groundContactNormalRtFrame_;
        /// <summary>
        /// Ground contact normal rt named frame
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Bosdyn.Api.Vec3 GroundContactNormalRtFrame {
          get { return groundContactNormalRtFrame_; }
          set {
            groundContactNormalRtFrame_ = value;
          }
        }

        /// <summary>Field number for the "visual_surface_ground_penetration_mean" field.</summary>
        public const int VisualSurfaceGroundPenetrationMeanFieldNumber = 6;
        private double visualSurfaceGroundPenetrationMean_;
        /// <summary>
        /// Mean penetration (meters) of the foot below the ground visual
        /// surface. For penetrable terrains (gravel/sand/grass etc.) these values are
        /// positive. Negative values would indicate potential odometry issues.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VisualSurfaceGroundPenetrationMean {
          get { return visualSurfaceGroundPenetrationMean_; }
          set {
            visualSurfaceGroundPenetrationMean_ = value;
          }
        }

        /// <summary>Field number for the "visual_surface_ground_penetration_std" field.</summary>
        public const int VisualSurfaceGroundPenetrationStdFieldNumber = 7;
        private double visualSurfaceGroundPenetrationStd_;
        /// <summary>
        /// Standard deviation of the visual surface ground penetration.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VisualSurfaceGroundPenetrationStd {
          get { return visualSurfaceGroundPenetrationStd_; }
          set {
            visualSurfaceGroundPenetrationStd_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TerrainState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TerrainState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundMuEst, other.GroundMuEst)) return false;
          if (FrameName != other.FrameName) return false;
          if (!object.Equals(FootSlipDistanceRtFrame, other.FootSlipDistanceRtFrame)) return false;
          if (!object.Equals(FootSlipVelocityRtFrame, other.FootSlipVelocityRtFrame)) return false;
          if (!object.Equals(GroundContactNormalRtFrame, other.GroundContactNormalRtFrame)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VisualSurfaceGroundPenetrationMean, other.VisualSurfaceGroundPenetrationMean)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VisualSurfaceGroundPenetrationStd, other.VisualSurfaceGroundPenetrationStd)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroundMuEst != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundMuEst);
          if (FrameName.Length != 0) hash ^= FrameName.GetHashCode();
          if (footSlipDistanceRtFrame_ != null) hash ^= FootSlipDistanceRtFrame.GetHashCode();
          if (footSlipVelocityRtFrame_ != null) hash ^= FootSlipVelocityRtFrame.GetHashCode();
          if (groundContactNormalRtFrame_ != null) hash ^= GroundContactNormalRtFrame.GetHashCode();
          if (VisualSurfaceGroundPenetrationMean != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VisualSurfaceGroundPenetrationMean);
          if (VisualSurfaceGroundPenetrationStd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VisualSurfaceGroundPenetrationStd);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroundMuEst != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(GroundMuEst);
          }
          if (FrameName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FrameName);
          }
          if (footSlipDistanceRtFrame_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(FootSlipDistanceRtFrame);
          }
          if (footSlipVelocityRtFrame_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(FootSlipVelocityRtFrame);
          }
          if (groundContactNormalRtFrame_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(GroundContactNormalRtFrame);
          }
          if (VisualSurfaceGroundPenetrationMean != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(VisualSurfaceGroundPenetrationMean);
          }
          if (VisualSurfaceGroundPenetrationStd != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(VisualSurfaceGroundPenetrationStd);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroundMuEst != 0D) {
            size += 1 + 8;
          }
          if (FrameName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameName);
          }
          if (footSlipDistanceRtFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FootSlipDistanceRtFrame);
          }
          if (footSlipVelocityRtFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FootSlipVelocityRtFrame);
          }
          if (groundContactNormalRtFrame_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundContactNormalRtFrame);
          }
          if (VisualSurfaceGroundPenetrationMean != 0D) {
            size += 1 + 8;
          }
          if (VisualSurfaceGroundPenetrationStd != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TerrainState other) {
          if (other == null) {
            return;
          }
          if (other.GroundMuEst != 0D) {
            GroundMuEst = other.GroundMuEst;
          }
          if (other.FrameName.Length != 0) {
            FrameName = other.FrameName;
          }
          if (other.footSlipDistanceRtFrame_ != null) {
            if (footSlipDistanceRtFrame_ == null) {
              FootSlipDistanceRtFrame = new global::Bosdyn.Api.Vec3();
            }
            FootSlipDistanceRtFrame.MergeFrom(other.FootSlipDistanceRtFrame);
          }
          if (other.footSlipVelocityRtFrame_ != null) {
            if (footSlipVelocityRtFrame_ == null) {
              FootSlipVelocityRtFrame = new global::Bosdyn.Api.Vec3();
            }
            FootSlipVelocityRtFrame.MergeFrom(other.FootSlipVelocityRtFrame);
          }
          if (other.groundContactNormalRtFrame_ != null) {
            if (groundContactNormalRtFrame_ == null) {
              GroundContactNormalRtFrame = new global::Bosdyn.Api.Vec3();
            }
            GroundContactNormalRtFrame.MergeFrom(other.GroundContactNormalRtFrame);
          }
          if (other.VisualSurfaceGroundPenetrationMean != 0D) {
            VisualSurfaceGroundPenetrationMean = other.VisualSurfaceGroundPenetrationMean;
          }
          if (other.VisualSurfaceGroundPenetrationStd != 0D) {
            VisualSurfaceGroundPenetrationStd = other.VisualSurfaceGroundPenetrationStd;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                GroundMuEst = input.ReadDouble();
                break;
              }
              case 18: {
                FrameName = input.ReadString();
                break;
              }
              case 26: {
                if (footSlipDistanceRtFrame_ == null) {
                  FootSlipDistanceRtFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(FootSlipDistanceRtFrame);
                break;
              }
              case 34: {
                if (footSlipVelocityRtFrame_ == null) {
                  FootSlipVelocityRtFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(FootSlipVelocityRtFrame);
                break;
              }
              case 42: {
                if (groundContactNormalRtFrame_ == null) {
                  GroundContactNormalRtFrame = new global::Bosdyn.Api.Vec3();
                }
                input.ReadMessage(GroundContactNormalRtFrame);
                break;
              }
              case 49: {
                VisualSurfaceGroundPenetrationMean = input.ReadDouble();
                break;
              }
              case 57: {
                VisualSurfaceGroundPenetrationStd = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  //// Additional state published if an arm is attached to the robot.
  /// </summary>
  public sealed partial class ManipulatorState : pb::IMessage<ManipulatorState> {
    private static readonly pb::MessageParser<ManipulatorState> _parser = new pb::MessageParser<ManipulatorState>(() => new ManipulatorState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManipulatorState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManipulatorState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManipulatorState(ManipulatorState other) : this() {
      gripperOpenPercentage_ = other.gripperOpenPercentage_;
      isGripperHoldingItem_ = other.isGripperHoldingItem_;
      estimatedEndEffectorForceInHand_ = other.estimatedEndEffectorForceInHand_ != null ? other.estimatedEndEffectorForceInHand_.Clone() : null;
      stowState_ = other.stowState_;
      velocityOfHandInVision_ = other.velocityOfHandInVision_ != null ? other.velocityOfHandInVision_.Clone() : null;
      velocityOfHandInOdom_ = other.velocityOfHandInOdom_ != null ? other.velocityOfHandInOdom_.Clone() : null;
      carryState_ = other.carryState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManipulatorState Clone() {
      return new ManipulatorState(this);
    }

    /// <summary>Field number for the "gripper_open_percentage" field.</summary>
    public const int GripperOpenPercentageFieldNumber = 12;
    private double gripperOpenPercentage_;
    /// <summary>
    /// How open the gripper is, measured in percent.
    /// 0 = fully closed, 100 = fully open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GripperOpenPercentage {
      get { return gripperOpenPercentage_; }
      set {
        gripperOpenPercentage_ = value;
      }
    }

    /// <summary>Field number for the "is_gripper_holding_item" field.</summary>
    public const int IsGripperHoldingItemFieldNumber = 6;
    private bool isGripperHoldingItem_;
    /// <summary>
    //// Will be true if the gripper is holding an item, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGripperHoldingItem {
      get { return isGripperHoldingItem_; }
      set {
        isGripperHoldingItem_ = value;
      }
    }

    /// <summary>Field number for the "estimated_end_effector_force_in_hand" field.</summary>
    public const int EstimatedEndEffectorForceInHandFieldNumber = 13;
    private global::Bosdyn.Api.Vec3 estimatedEndEffectorForceInHand_;
    /// <summary>
    /// The estimated force on the end-effector expressed in the hand frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Vec3 EstimatedEndEffectorForceInHand {
      get { return estimatedEndEffectorForceInHand_; }
      set {
        estimatedEndEffectorForceInHand_ = value;
      }
    }

    /// <summary>Field number for the "stow_state" field.</summary>
    public const int StowStateFieldNumber = 9;
    private global::Bosdyn.Api.ManipulatorState.Types.StowState stowState_ = 0;
    /// <summary>
    //// Information on if the arm is stowed, or deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ManipulatorState.Types.StowState StowState {
      get { return stowState_; }
      set {
        stowState_ = value;
      }
    }

    /// <summary>Field number for the "velocity_of_hand_in_vision" field.</summary>
    public const int VelocityOfHandInVisionFieldNumber = 14;
    private global::Bosdyn.Api.SE3Velocity velocityOfHandInVision_;
    /// <summary>
    /// Velocity of the hand frame with respect to vision frame and expressed in vision frame.
    /// The linear velocity is applied at the origin of the hand frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Velocity VelocityOfHandInVision {
      get { return velocityOfHandInVision_; }
      set {
        velocityOfHandInVision_ = value;
      }
    }

    /// <summary>Field number for the "velocity_of_hand_in_odom" field.</summary>
    public const int VelocityOfHandInOdomFieldNumber = 15;
    private global::Bosdyn.Api.SE3Velocity velocityOfHandInOdom_;
    /// <summary>
    /// Velocity of the hand frame with respect to odom frame and expressed in odom frame.
    /// Again, the linear velocity is applied at the origin of the hand frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.SE3Velocity VelocityOfHandInOdom {
      get { return velocityOfHandInOdom_; }
      set {
        velocityOfHandInOdom_ = value;
      }
    }

    /// <summary>Field number for the "carry_state" field.</summary>
    public const int CarryStateFieldNumber = 16;
    private global::Bosdyn.Api.ManipulatorState.Types.CarryState carryState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ManipulatorState.Types.CarryState CarryState {
      get { return carryState_; }
      set {
        carryState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManipulatorState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManipulatorState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GripperOpenPercentage, other.GripperOpenPercentage)) return false;
      if (IsGripperHoldingItem != other.IsGripperHoldingItem) return false;
      if (!object.Equals(EstimatedEndEffectorForceInHand, other.EstimatedEndEffectorForceInHand)) return false;
      if (StowState != other.StowState) return false;
      if (!object.Equals(VelocityOfHandInVision, other.VelocityOfHandInVision)) return false;
      if (!object.Equals(VelocityOfHandInOdom, other.VelocityOfHandInOdom)) return false;
      if (CarryState != other.CarryState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GripperOpenPercentage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GripperOpenPercentage);
      if (IsGripperHoldingItem != false) hash ^= IsGripperHoldingItem.GetHashCode();
      if (estimatedEndEffectorForceInHand_ != null) hash ^= EstimatedEndEffectorForceInHand.GetHashCode();
      if (StowState != 0) hash ^= StowState.GetHashCode();
      if (velocityOfHandInVision_ != null) hash ^= VelocityOfHandInVision.GetHashCode();
      if (velocityOfHandInOdom_ != null) hash ^= VelocityOfHandInOdom.GetHashCode();
      if (CarryState != 0) hash ^= CarryState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGripperHoldingItem != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsGripperHoldingItem);
      }
      if (StowState != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) StowState);
      }
      if (GripperOpenPercentage != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(GripperOpenPercentage);
      }
      if (estimatedEndEffectorForceInHand_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EstimatedEndEffectorForceInHand);
      }
      if (velocityOfHandInVision_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(VelocityOfHandInVision);
      }
      if (velocityOfHandInOdom_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(VelocityOfHandInOdom);
      }
      if (CarryState != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) CarryState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GripperOpenPercentage != 0D) {
        size += 1 + 8;
      }
      if (IsGripperHoldingItem != false) {
        size += 1 + 1;
      }
      if (estimatedEndEffectorForceInHand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EstimatedEndEffectorForceInHand);
      }
      if (StowState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StowState);
      }
      if (velocityOfHandInVision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityOfHandInVision);
      }
      if (velocityOfHandInOdom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityOfHandInOdom);
      }
      if (CarryState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CarryState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManipulatorState other) {
      if (other == null) {
        return;
      }
      if (other.GripperOpenPercentage != 0D) {
        GripperOpenPercentage = other.GripperOpenPercentage;
      }
      if (other.IsGripperHoldingItem != false) {
        IsGripperHoldingItem = other.IsGripperHoldingItem;
      }
      if (other.estimatedEndEffectorForceInHand_ != null) {
        if (estimatedEndEffectorForceInHand_ == null) {
          EstimatedEndEffectorForceInHand = new global::Bosdyn.Api.Vec3();
        }
        EstimatedEndEffectorForceInHand.MergeFrom(other.EstimatedEndEffectorForceInHand);
      }
      if (other.StowState != 0) {
        StowState = other.StowState;
      }
      if (other.velocityOfHandInVision_ != null) {
        if (velocityOfHandInVision_ == null) {
          VelocityOfHandInVision = new global::Bosdyn.Api.SE3Velocity();
        }
        VelocityOfHandInVision.MergeFrom(other.VelocityOfHandInVision);
      }
      if (other.velocityOfHandInOdom_ != null) {
        if (velocityOfHandInOdom_ == null) {
          VelocityOfHandInOdom = new global::Bosdyn.Api.SE3Velocity();
        }
        VelocityOfHandInOdom.MergeFrom(other.VelocityOfHandInOdom);
      }
      if (other.CarryState != 0) {
        CarryState = other.CarryState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 48: {
            IsGripperHoldingItem = input.ReadBool();
            break;
          }
          case 72: {
            StowState = (global::Bosdyn.Api.ManipulatorState.Types.StowState) input.ReadEnum();
            break;
          }
          case 97: {
            GripperOpenPercentage = input.ReadDouble();
            break;
          }
          case 106: {
            if (estimatedEndEffectorForceInHand_ == null) {
              EstimatedEndEffectorForceInHand = new global::Bosdyn.Api.Vec3();
            }
            input.ReadMessage(EstimatedEndEffectorForceInHand);
            break;
          }
          case 114: {
            if (velocityOfHandInVision_ == null) {
              VelocityOfHandInVision = new global::Bosdyn.Api.SE3Velocity();
            }
            input.ReadMessage(VelocityOfHandInVision);
            break;
          }
          case 122: {
            if (velocityOfHandInOdom_ == null) {
              VelocityOfHandInOdom = new global::Bosdyn.Api.SE3Velocity();
            }
            input.ReadMessage(VelocityOfHandInOdom);
            break;
          }
          case 128: {
            CarryState = (global::Bosdyn.Api.ManipulatorState.Types.CarryState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ManipulatorState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StowState {
        [pbr::OriginalName("STOWSTATE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("STOWSTATE_STOWED")] Stowed = 1,
        [pbr::OriginalName("STOWSTATE_DEPLOYED")] Deployed = 2,
      }

      /// <summary>
      /// The stowing behavior is modified as a function of the Carry State.  If holding an item, the
      /// stowing behavior will be modified as follows:
      ///  NOT_CARRIABLE - The arm will not stow, instead entering stop
      ///  CARRIABLE - The arm will not stow, instead entering stop
      ///  CARRIABLE_AND_STOWABLE - The arm will stow while continuing to grasp the item
      /// The comms loss behavior of the arm is also modified as follows:
      ///  NOT_CARRIABLE - The arm will release the item and stow
      ///  CARRIABLE - The arm will not stow, instead entering stop
      ///  CARRIABLE_AND_STOWABLE - The arm will stow while continuing to grasp the item
      /// </summary>
      public enum CarryState {
        [pbr::OriginalName("CARRY_STATE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CARRY_STATE_NOT_CARRIABLE")] NotCarriable = 1,
        [pbr::OriginalName("CARRY_STATE_CARRIABLE")] Carriable = 2,
        [pbr::OriginalName("CARRY_STATE_CARRIABLE_AND_STOWABLE")] CarriableAndStowable = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// The current state of each service fault the robot is experiencing.
  /// An "active" fault indicates a fault currently in a service.
  /// A "historical" fault indicates a, now cleared, service problem.
  /// </summary>
  public sealed partial class ServiceFaultState : pb::IMessage<ServiceFaultState> {
    private static readonly pb::MessageParser<ServiceFaultState> _parser = new pb::MessageParser<ServiceFaultState>(() => new ServiceFaultState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceFaultState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultState(ServiceFaultState other) : this() {
      faults_ = other.faults_.Clone();
      historicalFaults_ = other.historicalFaults_.Clone();
      aggregated_ = other.aggregated_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceFaultState Clone() {
      return new ServiceFaultState(this);
    }

    /// <summary>Field number for the "faults" field.</summary>
    public const int FaultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ServiceFault> _repeated_faults_codec
        = pb::FieldCodec.ForMessage(10, global::Bosdyn.Api.ServiceFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> faults_ = new pbc::RepeatedField<global::Bosdyn.Api.ServiceFault>();
    /// <summary>
    /// Currently active faults
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> Faults {
      get { return faults_; }
    }

    /// <summary>Field number for the "historical_faults" field.</summary>
    public const int HistoricalFaultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ServiceFault> _repeated_historicalFaults_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.ServiceFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> historicalFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.ServiceFault>();
    /// <summary>
    /// Service faults that have been cleared. Acts as a ring buffer with size of 50.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> HistoricalFaults {
      get { return historicalFaults_; }
    }

    /// <summary>Field number for the "aggregated" field.</summary>
    public const int AggregatedFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Bosdyn.Api.ServiceFault.Types.Severity>.Codec _map_aggregated_codec
        = new pbc::MapField<string, global::Bosdyn.Api.ServiceFault.Types.Severity>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Bosdyn.Api.ServiceFault.Types.Severity) x), 26);
    private readonly pbc::MapField<string, global::Bosdyn.Api.ServiceFault.Types.Severity> aggregated_ = new pbc::MapField<string, global::Bosdyn.Api.ServiceFault.Types.Severity>();
    /// <summary>
    /// Aggregated service fault data. Maps attribute string to highest severity level
    /// of any active fault containing that attribute string.
    /// This provides a very quick way of determining if there any "locomotion" or
    /// "vision" faults above a certain severity level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Bosdyn.Api.ServiceFault.Types.Severity> Aggregated {
      get { return aggregated_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceFaultState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceFaultState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faults_.Equals(other.faults_)) return false;
      if(!historicalFaults_.Equals(other.historicalFaults_)) return false;
      if (!Aggregated.Equals(other.Aggregated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= faults_.GetHashCode();
      hash ^= historicalFaults_.GetHashCode();
      hash ^= Aggregated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      faults_.WriteTo(output, _repeated_faults_codec);
      historicalFaults_.WriteTo(output, _repeated_historicalFaults_codec);
      aggregated_.WriteTo(output, _map_aggregated_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += faults_.CalculateSize(_repeated_faults_codec);
      size += historicalFaults_.CalculateSize(_repeated_historicalFaults_codec);
      size += aggregated_.CalculateSize(_map_aggregated_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceFaultState other) {
      if (other == null) {
        return;
      }
      faults_.Add(other.faults_);
      historicalFaults_.Add(other.historicalFaults_);
      aggregated_.Add(other.aggregated_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            faults_.AddEntriesFrom(input, _repeated_faults_codec);
            break;
          }
          case 18: {
            historicalFaults_.AddEntriesFrom(input, _repeated_historicalFaults_codec);
            break;
          }
          case 26: {
            aggregated_.AddEntriesFrom(input, _map_aggregated_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotState request message to get the current state of the robot.
  /// </summary>
  public sealed partial class RobotStateRequest : pb::IMessage<RobotStateRequest> {
    private static readonly pb::MessageParser<RobotStateRequest> _parser = new pb::MessageParser<RobotStateRequest>(() => new RobotStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateRequest(RobotStateRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateRequest Clone() {
      return new RobotStateRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotState response message, which returns the robot state information from the time
  /// the request was received.
  /// </summary>
  public sealed partial class RobotStateResponse : pb::IMessage<RobotStateResponse> {
    private static readonly pb::MessageParser<RobotStateResponse> _parser = new pb::MessageParser<RobotStateResponse>(() => new RobotStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateResponse(RobotStateResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      robotState_ = other.robotState_ != null ? other.robotState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotStateResponse Clone() {
      return new RobotStateResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "robot_state" field.</summary>
    public const int RobotStateFieldNumber = 2;
    private global::Bosdyn.Api.RobotState robotState_;
    /// <summary>
    /// The requested RobotState.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotState RobotState {
      get { return robotState_; }
      set {
        robotState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(RobotState, other.RobotState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (robotState_ != null) hash ^= RobotState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (robotState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RobotState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (robotState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.robotState_ != null) {
        if (robotState_ == null) {
          RobotState = new global::Bosdyn.Api.RobotState();
        }
        RobotState.MergeFrom(other.RobotState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (robotState_ == null) {
              RobotState = new global::Bosdyn.Api.RobotState();
            }
            input.ReadMessage(RobotState);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotMetrics request message to get metrics and parameters from the robot.
  /// </summary>
  public sealed partial class RobotMetricsRequest : pb::IMessage<RobotMetricsRequest> {
    private static readonly pb::MessageParser<RobotMetricsRequest> _parser = new pb::MessageParser<RobotMetricsRequest>(() => new RobotMetricsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotMetricsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsRequest(RobotMetricsRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsRequest Clone() {
      return new RobotMetricsRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotMetricsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotMetricsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotMetricsRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotMetrics response message, which returns the metrics information from the time
  /// the request was received.
  /// </summary>
  public sealed partial class RobotMetricsResponse : pb::IMessage<RobotMetricsResponse> {
    private static readonly pb::MessageParser<RobotMetricsResponse> _parser = new pb::MessageParser<RobotMetricsResponse>(() => new RobotMetricsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotMetricsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsResponse(RobotMetricsResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      robotMetrics_ = other.robotMetrics_ != null ? other.robotMetrics_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMetricsResponse Clone() {
      return new RobotMetricsResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "robot_metrics" field.</summary>
    public const int RobotMetricsFieldNumber = 2;
    private global::Bosdyn.Api.RobotMetrics robotMetrics_;
    /// <summary>
    /// The requested robot metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotMetrics RobotMetrics {
      get { return robotMetrics_; }
      set {
        robotMetrics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotMetricsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotMetricsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(RobotMetrics, other.RobotMetrics)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (robotMetrics_ != null) hash ^= RobotMetrics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (robotMetrics_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RobotMetrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (robotMetrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotMetrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotMetricsResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.robotMetrics_ != null) {
        if (robotMetrics_ == null) {
          RobotMetrics = new global::Bosdyn.Api.RobotMetrics();
        }
        RobotMetrics.MergeFrom(other.RobotMetrics);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (robotMetrics_ == null) {
              RobotMetrics = new global::Bosdyn.Api.RobotMetrics();
            }
            input.ReadMessage(RobotMetrics);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotHardwareConfiguration request message to get hardware configuration, described
  /// by the robot skeleton and urdf.
  /// </summary>
  public sealed partial class RobotHardwareConfigurationRequest : pb::IMessage<RobotHardwareConfigurationRequest> {
    private static readonly pb::MessageParser<RobotHardwareConfigurationRequest> _parser = new pb::MessageParser<RobotHardwareConfigurationRequest>(() => new RobotHardwareConfigurationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotHardwareConfigurationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationRequest(RobotHardwareConfigurationRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationRequest Clone() {
      return new RobotHardwareConfigurationRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotHardwareConfigurationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotHardwareConfigurationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotHardwareConfigurationRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotHardwareConfiguration response message, which returns the hardware config from the time
  /// the request was received.
  /// </summary>
  public sealed partial class RobotHardwareConfigurationResponse : pb::IMessage<RobotHardwareConfigurationResponse> {
    private static readonly pb::MessageParser<RobotHardwareConfigurationResponse> _parser = new pb::MessageParser<RobotHardwareConfigurationResponse>(() => new RobotHardwareConfigurationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotHardwareConfigurationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationResponse(RobotHardwareConfigurationResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      hardwareConfiguration_ = other.hardwareConfiguration_ != null ? other.hardwareConfiguration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotHardwareConfigurationResponse Clone() {
      return new RobotHardwareConfigurationResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hardware_configuration" field.</summary>
    public const int HardwareConfigurationFieldNumber = 2;
    private global::Bosdyn.Api.HardwareConfiguration hardwareConfiguration_;
    /// <summary>
    /// The requested RobotState.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.HardwareConfiguration HardwareConfiguration {
      get { return hardwareConfiguration_; }
      set {
        hardwareConfiguration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotHardwareConfigurationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotHardwareConfigurationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(HardwareConfiguration, other.HardwareConfiguration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (hardwareConfiguration_ != null) hash ^= HardwareConfiguration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (hardwareConfiguration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HardwareConfiguration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (hardwareConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HardwareConfiguration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotHardwareConfigurationResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.hardwareConfiguration_ != null) {
        if (hardwareConfiguration_ == null) {
          HardwareConfiguration = new global::Bosdyn.Api.HardwareConfiguration();
        }
        HardwareConfiguration.MergeFrom(other.HardwareConfiguration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (hardwareConfiguration_ == null) {
              HardwareConfiguration = new global::Bosdyn.Api.HardwareConfiguration();
            }
            input.ReadMessage(HardwareConfiguration);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotLinkModel request message uses a link name returned by the RobotHardwareConfiguration response to
  /// get the associated OBJ file.
  /// </summary>
  public sealed partial class RobotLinkModelRequest : pb::IMessage<RobotLinkModelRequest> {
    private static readonly pb::MessageParser<RobotLinkModelRequest> _parser = new pb::MessageParser<RobotLinkModelRequest>(() => new RobotLinkModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotLinkModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelRequest(RobotLinkModelRequest other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      linkName_ = other.linkName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelRequest Clone() {
      return new RobotLinkModelRequest(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.RequestHeader header_;
    /// <summary>
    /// Common request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RequestHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "link_name" field.</summary>
    public const int LinkNameFieldNumber = 2;
    private string linkName_ = "";
    /// <summary>
    /// The link name of which the OBJ file shoould represent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkName {
      get { return linkName_; }
      set {
        linkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotLinkModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotLinkModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (LinkName != other.LinkName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (LinkName.Length != 0) hash ^= LinkName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (LinkName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LinkName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (LinkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotLinkModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.RequestHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.LinkName.Length != 0) {
        LinkName = other.LinkName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.RequestHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            LinkName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The RobotLinkModel response message returns the OBJ file for a specifc robot link.
  /// </summary>
  public sealed partial class RobotLinkModelResponse : pb::IMessage<RobotLinkModelResponse> {
    private static readonly pb::MessageParser<RobotLinkModelResponse> _parser = new pb::MessageParser<RobotLinkModelResponse>(() => new RobotLinkModelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotLinkModelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelResponse(RobotLinkModelResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      linkModel_ = other.linkModel_ != null ? other.linkModel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLinkModelResponse Clone() {
      return new RobotLinkModelResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Bosdyn.Api.ResponseHeader header_;
    /// <summary>
    /// Common response header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "link_model" field.</summary>
    public const int LinkModelFieldNumber = 2;
    private global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel linkModel_;
    /// <summary>
    /// The requested RobotState skeleton obj model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel LinkModel {
      get { return linkModel_; }
      set {
        linkModel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotLinkModelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotLinkModelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(LinkModel, other.LinkModel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (linkModel_ != null) hash ^= LinkModel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (linkModel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LinkModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (linkModel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkModel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotLinkModelResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Bosdyn.Api.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.linkModel_ != null) {
        if (linkModel_ == null) {
          LinkModel = new global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel();
        }
        LinkModel.MergeFrom(other.LinkModel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Bosdyn.Api.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (linkModel_ == null) {
              LinkModel = new global::Bosdyn.Api.Skeleton.Types.Link.Types.ObjModel();
            }
            input.ReadMessage(LinkModel);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Keeps track of why the robot is not able to drive autonomously.
  /// </summary>
  public sealed partial class RobotImpairedState : pb::IMessage<RobotImpairedState> {
    private static readonly pb::MessageParser<RobotImpairedState> _parser = new pb::MessageParser<RobotImpairedState>(() => new RobotImpairedState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotImpairedState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bosdyn.Api.RobotStateReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotImpairedState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotImpairedState(RobotImpairedState other) : this() {
      impairedStatus_ = other.impairedStatus_;
      systemFaults_ = other.systemFaults_.Clone();
      serviceFaults_ = other.serviceFaults_.Clone();
      behaviorFaults_ = other.behaviorFaults_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotImpairedState Clone() {
      return new RobotImpairedState(this);
    }

    /// <summary>Field number for the "impaired_status" field.</summary>
    public const int ImpairedStatusFieldNumber = 1;
    private global::Bosdyn.Api.RobotImpairedState.Types.ImpairedStatus impairedStatus_ = 0;
    /// <summary>
    /// If the status is ROBOT_IMPAIRED, this is specifically why the robot is impaired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bosdyn.Api.RobotImpairedState.Types.ImpairedStatus ImpairedStatus {
      get { return impairedStatus_; }
      set {
        impairedStatus_ = value;
      }
    }

    /// <summary>Field number for the "system_faults" field.</summary>
    public const int SystemFaultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.SystemFault> _repeated_systemFaults_codec
        = pb::FieldCodec.ForMessage(18, global::Bosdyn.Api.SystemFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.SystemFault> systemFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.SystemFault>();
    /// <summary>
    /// If impaired_status is STATUS_SYSTEM_FAULT, these are the faults which caused the robot to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.SystemFault> SystemFaults {
      get { return systemFaults_; }
    }

    /// <summary>Field number for the "service_faults" field.</summary>
    public const int ServiceFaultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.ServiceFault> _repeated_serviceFaults_codec
        = pb::FieldCodec.ForMessage(26, global::Bosdyn.Api.ServiceFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> serviceFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.ServiceFault>();
    /// <summary>
    /// If impaired_status is STATUS_SERVICE_FAULT, these are the service faults which caused
    /// the robot to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.ServiceFault> ServiceFaults {
      get { return serviceFaults_; }
    }

    /// <summary>Field number for the "behavior_faults" field.</summary>
    public const int BehaviorFaultsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Bosdyn.Api.BehaviorFault> _repeated_behaviorFaults_codec
        = pb::FieldCodec.ForMessage(34, global::Bosdyn.Api.BehaviorFault.Parser);
    private readonly pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault> behaviorFaults_ = new pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault>();
    /// <summary>
    /// If impaired_status is STATUS_BEHAVIOR_FAULT, these are the behavior faults which caused
    /// the robot to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bosdyn.Api.BehaviorFault> BehaviorFaults {
      get { return behaviorFaults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotImpairedState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotImpairedState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImpairedStatus != other.ImpairedStatus) return false;
      if(!systemFaults_.Equals(other.systemFaults_)) return false;
      if(!serviceFaults_.Equals(other.serviceFaults_)) return false;
      if(!behaviorFaults_.Equals(other.behaviorFaults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImpairedStatus != 0) hash ^= ImpairedStatus.GetHashCode();
      hash ^= systemFaults_.GetHashCode();
      hash ^= serviceFaults_.GetHashCode();
      hash ^= behaviorFaults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImpairedStatus != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ImpairedStatus);
      }
      systemFaults_.WriteTo(output, _repeated_systemFaults_codec);
      serviceFaults_.WriteTo(output, _repeated_serviceFaults_codec);
      behaviorFaults_.WriteTo(output, _repeated_behaviorFaults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImpairedStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImpairedStatus);
      }
      size += systemFaults_.CalculateSize(_repeated_systemFaults_codec);
      size += serviceFaults_.CalculateSize(_repeated_serviceFaults_codec);
      size += behaviorFaults_.CalculateSize(_repeated_behaviorFaults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotImpairedState other) {
      if (other == null) {
        return;
      }
      if (other.ImpairedStatus != 0) {
        ImpairedStatus = other.ImpairedStatus;
      }
      systemFaults_.Add(other.systemFaults_);
      serviceFaults_.Add(other.serviceFaults_);
      behaviorFaults_.Add(other.behaviorFaults_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImpairedStatus = (global::Bosdyn.Api.RobotImpairedState.Types.ImpairedStatus) input.ReadEnum();
            break;
          }
          case 18: {
            systemFaults_.AddEntriesFrom(input, _repeated_systemFaults_codec);
            break;
          }
          case 26: {
            serviceFaults_.AddEntriesFrom(input, _repeated_serviceFaults_codec);
            break;
          }
          case 34: {
            behaviorFaults_.AddEntriesFrom(input, _repeated_behaviorFaults_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotImpairedState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// If the robot is stopped due to being impaired, this is the reason why.
      /// </summary>
      public enum ImpairedStatus {
        /// <summary>
        /// Unknown/unexpected error.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The robot is able to drive.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_OK")] Ok = 1,
        /// <summary>
        /// The autonomous system does not have any data from the robot state service.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_NO_ROBOT_DATA")] NoRobotData = 2,
        /// <summary>
        /// There is a system fault which caused the robot to stop. See system_fault for details.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_SYSTEM_FAULT")] SystemFault = 3,
        /// <summary>
        /// The robot's motors are not powered on.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_NO_MOTOR_POWER")] NoMotorPower = 4,
        /// <summary>
        /// The autonomous system is expected to have a remote point cloud (e.g. a LIDAR), but this is not working.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_REMOTE_CLOUDS_NOT_WORKING")] RemoteCloudsNotWorking = 5,
        /// <summary>
        /// A remote service the autonomous system depends on is not working.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_SERVICE_FAULT")] ServiceFault = 6,
        /// <summary>
        /// A behavior fault caused the robot to stop. See behavior_faults for details.
        /// </summary>
        [pbr::OriginalName("IMPAIRED_STATUS_BEHAVIOR_FAULT")] BehaviorFault = 7,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
